Warning: Loading sys:libyices.dylib failed with error:
         dlopen(/Users/cmunoz/local/PVS-6.0/bin/ix86-MacOSX/runtime/libyices.dylib, 10): image not found.
International Allegro CL Enterprise Edition
9.0 [64-bit Mac OS X (Intel)] (Jan 14, 2013 3:15)
Copyright (C) 1985-2012, Franz Inc., Oakland, CA, USA.  All Rights Reserved.

This dynamic runtime copy of Allegro CL was built by:
   [TC8101] SRI International

;; Optimization settings: safety 1, space 1, speed 3, debug 1.
;; For a complete description of all compiler switches given the
;; current optimization settings evaluate (explain-compiler-settings).
;;---
;; Current reader case mode: :case-sensitive-lower
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-0.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-1.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-2.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-3.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-4.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-5.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-6.n64fasl

ground-eval exists as a defined rule.
Redefining ground-eval. 
ground-eval$ exists as a strategy.
Redefining ground-eval$. 
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-7.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-8.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-9.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-10.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-11.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-12.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-13.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-14.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-100.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-101.n64fasl

Defining skip-steps. 
Defining skip-steps$. 
Defining sklisp. 
Defining extra-evalexprs. 
Defining extra-evalexprs$. 
printf exists as a strategy.
Redefining printf. 
commentf exists as a strategy.
Redefining commentf. 
unlabel* exists as a defined rule.
Redefining unlabel*. 
unlabel*$ exists as a strategy.
Redefining unlabel*$. 
delabel exists as a defined rule.
Redefining delabel. 
delabel$ exists as a strategy.
Redefining delabel$. 
Defining relabel__. 
Defining relabel__$. 
relabel exists as a defined rule.
Redefining relabel. 
relabel$ exists as a strategy.
Redefining relabel$. 
name-label exists as a defined rule.
Redefining name-label. 
name-label$ exists as a strategy.
Redefining name-label$. 
name-label* exists as a defined rule.
Redefining name-label*. 
name-label*$ exists as a strategy.
Redefining name-label*$. 
name-replace* exists as a strategy.
Redefining name-replace*. 
name-replace*$ exists as a strategy.
Redefining name-replace*$. 
discriminate exists as a defined rule.
Redefining discriminate. 
discriminate$ exists as a strategy.
Redefining discriminate$. 
mapstep exists as a strategy.
Redefining mapstep. 
mapstep@ exists as a strategy.
Redefining mapstep@. 
Defining with-fresh-labels-tccs__. 
Defining with-fresh-labels-tccs__$. 
Defining with-fresh-labels__. 
Defining with-fresh-labels__$. 
Defining with-fresh-labels. 
Defining with-fresh-labels@. 
Defining with-fresh-names-expand__. 
Defining with-fresh-names-expand__$. 
Defining with-fresh-names__. 
Defining with-fresh-names__$. 
Defining with-fresh-names. 
Defining with-fresh-names@. 
copy__ exists as a defined rule.
Redefining copy__. 
copy__$ exists as a strategy.
Redefining copy__$. 
copy* exists as a defined rule.
Redefining copy*. 
copy*$ exists as a strategy.
Redefining copy*$. 
protect exists as a defined rule.
Redefining protect. 
protect$ exists as a strategy.
Redefining protect$. 
Defining with-focus-on__. 
Defining with-focus-on__$. 
Defining with-focus-on. 
Defining with-focus-on@. 
localtactic__ exists as a defined rule.
Redefining localtactic__. 
localtactic__$ exists as a strategy.
Redefining localtactic__$. 
deftactic exists as a defined rule.
Redefining deftactic. 
Added rule trust!.

trust exists as a strategy.
Redefining trust. 
extra-tcc-step exists as a strategy.
Redefining extra-tcc-step. 
relabel-hide__ exists as a defined rule.
Redefining relabel-hide__. 
relabel-hide__$ exists as a strategy.
Redefining relabel-hide__$. 
Defining tccs-expression__. 
Defining tccs-expression__$. 
Defining tccs-expression. 
tccs-formula__ exists as a defined rule.
Redefining tccs-formula__. 
tccs-formula__$ exists as a strategy.
Redefining tccs-formula__$. 
tccs-formula*__ exists as a defined rule.
Redefining tccs-formula*__. 
tccs-formula*__$ exists as a strategy.
Redefining tccs-formula*__$. 
tccs-formula* exists as a defined rule.
Redefining tccs-formula*. 
tccs-formula exists as a defined rule.
Redefining tccs-formula. 
tccs-formula$ exists as a strategy.
Redefining tccs-formula$. 
tccs-step__ exists as a defined rule.
Redefining tccs-step__. 
tccs-step__$ exists as a strategy.
Redefining tccs-step__$. 
tccs-step exists as a defined rule.
Redefining tccs-step. 
with-tccs exists as a defined rule.
Redefining with-tccs. 
with-tccs$ exists as a strategy.
Redefining with-tccs$. 
finalize__ exists as a defined rule.
Redefining finalize__. 
finalize__$ exists as a strategy.
Redefining finalize__$. 
finalize exists as a strategy.
Redefining finalize. 
touch exists as a defined rule.
Redefining touch. 
touch$ exists as a strategy.
Redefining touch$. 
when exists as a strategy.
Redefining when. 
when@ exists as a strategy.
Redefining when@. 
unless exists as a strategy.
Redefining unless. 
unless@ exists as a strategy.
Redefining unless@. 
when-label__ exists as a defined rule.
Redefining when-label__. 
when-label__$ exists as a strategy.
Redefining when-label__$. 
when-label exists as a strategy.
Redefining when-label. 
Defining when-label@. 
unless-label__ exists as a defined rule.
Redefining unless-label__. 
unless-label__$ exists as a strategy.
Redefining unless-label__$. 
unless-label exists as a strategy.
Redefining unless-label. 
Defining unless-label@. 
if-label exists as a strategy.
Redefining if-label. 
for__ exists as a defined rule.
Redefining for__. 
for__$ exists as a strategy.
Redefining for__$. 
for exists as a defined rule.
Redefining for. 
for$ exists as a strategy.
Redefining for$. 
for@__ exists as a defined rule.
Redefining for@__. 
for@__$ exists as a strategy.
Redefining for@__$. 
for@ exists as a defined rule.
Redefining for@. 
for@$ exists as a strategy.
Redefining for@$. 
skeep exists as a defined rule.
Redefining skeep. 
skeep$ exists as a strategy.
Redefining skeep$. 
skeep* exists as a defined rule.
Redefining skeep*. 
skeep*$ exists as a strategy.
Redefining skeep*$. 
insteep exists as a defined rule.
Redefining insteep. 
insteep$ exists as a strategy.
Redefining insteep$. 
insteep* exists as a defined rule.
Redefining insteep*. 
insteep*$ exists as a strategy.
Redefining insteep*$. 
skoletin__ exists as a defined rule.
Redefining skoletin__. 
skoletin__$ exists as a strategy.
Redefining skoletin__$. 
skoletin exists as a defined rule.
Redefining skoletin. 
skoletin$ exists as a strategy.
Redefining skoletin$. 
skoletin* exists as a defined rule.
Redefining skoletin*. 
skoletin*$ exists as a strategy.
Redefining skoletin*$. 
redlet__ exists as a defined rule.
Redefining redlet__. 
redlet__$ exists as a strategy.
Redefining redlet__$. 
redlet exists as a defined rule.
Redefining redlet. 
redlet$ exists as a strategy.
Redefining redlet$. 
redlet* exists as a defined rule.
Redefining redlet*. 
redlet*$ exists as a strategy.
Redefining redlet*$. 
skodef__ exists as a defined rule.
Redefining skodef__. 
skodef__$ exists as a strategy.
Redefining skodef__$. 
skodef exists as a defined rule.
Redefining skodef. 
skodef$ exists as a strategy.
Redefining skodef$. 
skodef* exists as a defined rule.
Redefining skodef*. 
skodef*$ exists as a strategy.
Redefining skodef*$. 
cut exists as a defined rule.
Redefining cut. 
cut$ exists as a strategy.
Redefining cut$. 
splash__ exists as a defined rule.
Redefining splash__. 
splash__$ exists as a strategy.
Redefining splash__$. 
splash exists as a defined rule.
Redefining splash. 
splash$ exists as a strategy.
Redefining splash$. 
replaces exists as a defined rule.
Redefining replaces. 
replaces$ exists as a strategy.
Redefining replaces$. 
rewrites exists as a defined rule.
Redefining rewrites. 
rewrites$ exists as a strategy.
Redefining rewrites$. 
rewrite* exists as a defined rule.
Redefining rewrite*. 
rewrite*$ exists as a strategy.
Redefining rewrite*$. 
suffices exists as a defined rule.
Redefining suffices. 
suffices$ exists as a strategy.
Redefining suffices$. 
extrategies-about exists as a strategy.
Redefining extrategies-about. 
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-102.n64fasl

name-distrib exists as a strategy.
Redefining name-distrib. 
wrap-manip exists as a defined rule.
Redefining wrap-manip. 
wrap-manip$ exists as a strategy.
Redefining wrap-manip$. 
neg-formula exists as a defined rule.
Redefining neg-formula. 
neg-formula$ exists as a strategy.
Redefining neg-formula$. 
real-props exists as a defined rule.
Redefining real-props. 
real-props$ exists as a strategy.
Redefining real-props$. 
grind-reals exists as a defined rule.
Redefining grind-reals. 
grind-reals$ exists as a strategy.
Redefining grind-reals$. 
add-formulas exists as a defined rule.
Redefining add-formulas. 
add-formulas$ exists as a strategy.
Redefining add-formulas$. 
sub-formulas exists as a defined rule.
Redefining sub-formulas. 
sub-formulas$ exists as a strategy.
Redefining sub-formulas$. 
cases-monoms__ exists as a defined rule.
Redefining cases-monoms__. 
cases-monoms__$ exists as a strategy.
Redefining cases-monoms__$. 
simplify-monoms__ exists as a defined rule.
Redefining simplify-monoms__. 
simplify-monoms__$ exists as a strategy.
Redefining simplify-monoms__$. 
cancel-by exists as a defined rule.
Redefining cancel-by. 
cancel-by$ exists as a strategy.
Redefining cancel-by$. 
cancel-case__ exists as a defined rule.
Redefining cancel-case__. 
cancel-case__$ exists as a strategy.
Redefining cancel-case__$. 
guess_cancel_by__ exists as a defined rule.
Redefining guess_cancel_by__. 
guess_cancel_by__$ exists as a strategy.
Redefining guess_cancel_by__$. 
cancel-by__ exists as a defined rule.
Redefining cancel-by__. 
cancel-by__$ exists as a strategy.
Redefining cancel-by__$. 
cancel-formula exists as a defined rule.
Redefining cancel-formula. 
cancel-formula$ exists as a strategy.
Redefining cancel-formula$. 
field_case__ exists as a defined rule.
Redefining field_case__. 
field_case__$ exists as a strategy.
Redefining field_case__$. 
field__ exists as a defined rule.
Redefining field__. 
field__$ exists as a strategy.
Redefining field__$. 
field exists as a defined rule.
Redefining field. 
field$ exists as a strategy.
Redefining field$. 
sq-simp exists as a defined rule.
Redefining sq-simp. 
sq-simp$ exists as a strategy.
Redefining sq-simp$. 
both-sides-f exists as a defined rule.
Redefining both-sides-f. 
both-sides-f$ exists as a strategy.
Redefining both-sides-f$. 
wrap-formula exists as a strategy.
Redefining wrap-formula. 
field-about exists as a strategy.
Redefining field-about. 
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-103.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-104.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-105.n64fasl

eval-expr exists as a defined rule.
Redefining eval-expr. 
eval-formula exists as a defined rule.
Redefining eval-formula. 
eval exists as a defined rule.
Redefining eval. 
pvsio-about exists as a strategy.
Redefining pvsio-about. 
Defining eval-formulas. 
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-106.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-107.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-108.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-109.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-110.n64fasl

Loading semantic attachments in theory stdstr
Loading semantic attachments in theory stdio
Loading semantic attachments in theory stdmath
Loading semantic attachments in theory stdindent
Loading semantic attachments in theory stdprog
Loading semantic attachments in theory stdcatch
Loading semantic attachments in theory stdpvs
Loading semantic attachments in theory stdpvsio
Loading semantic attachments in theory stdsys
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-200.n64fasl

Defining metit. 
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-201.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-20170220.n64fasl
; Fast loading
;    /Users/cmunoz/local/PVS/nasalib/pvs-patches/patch-20170302.n64fasl
; Fast loading /Users/cmunoz/.pvs.n64fasl

*** 
*** top (16:43:59 12/11/2017)
*** Generated by proveit - ProofLite-6.0.10 (xx/xx/xx)
*** 
Context changed to ~/local/PVS-6.0/nasalib/affine_arith/
Parsing top
top parsed in 0.02 seconds
Typechecking top
Parsing affine
affine parsed in 0.47 seconds
Typechecking affine
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/more_list_props.bin in 0.38s (load part took 0.17s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/ordered_list.bin in 0.07s (load part took 0.02s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/indexed_list.bin in 0.04s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/reals_mod.bin in 0.04s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sigma.bin in 0.13s (load part took 0.04s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sigma_nat.bin in 0.10s (load part took 0.02s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sq.bin in 0.05s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/power_props.bin in 0.06s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/ints/pvsbin/floor_more.bin in 0.00s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/ints/pvsbin/div_nat.bin in 0.06s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/interval.bin in 0.27s (load part took 0.13s)

 Assuming TCCs not generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 35, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 36, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 36, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 39, column 52) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 40, column 10) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 51, column 30) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 52, column 11) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable last_h at line 83, col 21 is given type
  int from its value expression.


 LET/WHERE variable last_t at line 84, col 13 is given type
  int from its value expression.


 Assuming TCCs not generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 132, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 133, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 133, column 38) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 139, column 2) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 142, column 28) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 148, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 148, column 29) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 149, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 149, column 31) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 155, column 18) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 155, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 159, column 3) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 159, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 160, column 11) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 160, column 44) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable h at line 165, col 13 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable t at line 165, col 28 is given type
  ordered_list
      [[nat, nzEpsilon], lt_idx[nzEpsilon]] from its value expression.


 Assuming TCCs not generated (at line 164, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 165, column 32) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 165, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 174, column 22) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 175, column 31) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 175, column 47) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 176, column 26) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 177, column 30) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 178, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 178, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 179, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 179, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 179, column 51) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 180, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 180, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable hN at line 182, col 13 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable tN at line 182, col 29 is given type
  ordered_list
      [[nat, nzEpsilon], lt_idx[nzEpsilon]] from its value expression.


 Assuming TCCs not generated (at line 181, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 182, column 34) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 183, column 36) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 185, column 39) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 187, column 7) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 182, column 18) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 In declaration gnbi_updb_:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration gnbi_updb_:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration gnbi_updb:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration gnbi_updb:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 236, column 61) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 231, column 25) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 256, column 27) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 256, column 48) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 256, column 64) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 256, column 79) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 257, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 257, column 24) for
  null_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 258, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 258, column 41) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 258, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 258, column 77) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 259, column 26) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable h at line 271, col 11 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t at line 271, col 28 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 268, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 269, column 12) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 271, column 32) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 272, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 273, column 21) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 273, column 55) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 274, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 276, column 29) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 271, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 280, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 281, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 282, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 282, column 18) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 283, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 286, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 287, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 288, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 288, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 289, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 291, column 35) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 294, column 2) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 310, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 311, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 312, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 313, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 313, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 317, column 3) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 318, column 28) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 321, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 322, column 28) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable h1 at line 359, col 8 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable t1 at line 359, col 25 is given type
  Noise from its value expression.


 LET/WHERE variable h2 at line 360, col 5 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable t2 at line 360, col 22 is given type
  Noise from its value expression.


 Assuming TCCs not generated (at line 357, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 358, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 359, column 30) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 360, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 360, column 27) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 359, column 13) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable pdsh at line 369, col 8 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable pdst at line 369, col 28 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable noise_N1 at line 370, col 5 is given type
  Epsilon from its value expression.


 LET/WHERE variable noise_N2 at line 371, col 5 is given type
  Epsilon from its value expression.


 Assuming TCCs not generated (at line 368, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable noise_N1 at line 378, col 22 is given type
  Epsilon from its value expression.


 LET/WHERE variable noise_N2 at line 379, col 30 is given type
  Epsilon from its value expression.


 Assuming TCCs not generated (at line 386, column 28) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 386, column 45) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 386, column 62) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 387, column 23) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 387, column 44) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 388, column 14) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 388, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 388, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 389, column 23) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 389, column 44) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 390, column 14) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 390, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 390, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 391, column 14) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 391, column 35) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 391, column 56) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 392, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 392, column 29) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 392, column 42) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable h1 at line 395, col 13 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable t1 at line 395, col 30 is given type
  Noise from its value expression.


 LET/WHERE variable h2 at line 396, col 10 is given type
  [nat, nzEpsilon] from its value expression.


 LET/WHERE variable t2 at line 396, col 27 is given type
  Noise from its value expression.


 Assuming TCCs not generated (at line 393, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 394, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 395, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 396, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 396, column 32) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 397, column 25) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 398, column 25) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 399, column 7) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 395, column 18) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 LET/WHERE variable h2 at line 439, col 11 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t2 at line 439, col 30 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable r at line 440, col 11 is given type
  BaseType from its value expression.


 LET/WHERE variable h1 at line 442, col 13 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t1 at line 442, col 32 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable r at line 444, col 11 is given type
  BaseType from its value expression.


 LET/WHERE variable h2 at line 446, col 11 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t2 at line 446, col 30 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable r at line 448, col 16 is given type
  BaseType from its value expression.


 LET/WHERE variable r at line 451, col 16 is given type
  BaseType from its value expression.


 LET/WHERE variable r at line 453, col 16 is given type
  BaseType from its value expression.


 Assuming TCCs not generated (at line 436, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 437, column 12) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 439, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 439, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 443, column 9) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 446, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 446, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 18) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 458, column 21) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 458, column 2) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 460, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 463, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 464, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 464, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 468, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 39) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 59) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable h at line 526, col 13 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t at line 526, col 30 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 524, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 526, column 34) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 526, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In declaration add_pd_pd:
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to +, converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 In declaration sub_pd_pd:
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to -, converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 LET/WHERE variable h at line 659, col 16 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t at line 659, col 33 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 657, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 659, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 659, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 667, column 18) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 689, column 33) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 689, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable h at line 691, col 13 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable t at line 691, col 28 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 690, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 691, column 30) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 692, column 6) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 691, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable hd2 at line 720, col 11 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable tl2 at line 720, col 31 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable hd1 at line 723, col 13 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable tl1 at line 723, col 33 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 LET/WHERE variable hd2 at line 726, col 11 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable tl2 at line 726, col 31 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 717, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 718, column 12) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 719, column 11) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 724, column 9) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 736, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 737, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 737, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 738, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 739, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 742, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 743, column 46) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 743, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 744, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 745, column 42) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 756, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 757, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 758, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 759, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 762, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 763, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 768, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 769, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 770, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 775, column 2) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 782, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 786, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 818, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 822, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 835, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 832, column 23) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 839, column 25) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 856, column 7) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable x1 at line 863, col 8 is given type
  BaseType from a preceding variable declaration.


 LET/WHERE variable x2 at line 863, col 36 is given type
  BaseType from a preceding variable declaration.


 LET/WHERE variable som_x_som at line 864, col 8 is given type
  nnreal from its value expression.


 Assuming TCCs not generated (at line 915, column 34) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 919, column 8) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 920, column 23) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 932, column 29) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 973, column 30) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 977, column 3) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 977, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 983, column 3) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 983, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 992, column 3) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 992, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1000, column 45) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1000, column 67) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1000, column 85) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1000, column 101) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable head at line 1002, col 13 is given type
  [nat, nzBaseType] from its value expression.


 LET/WHERE variable tail at line 1002, col 33 is given type
  ordered_list
      [[nat, nzBaseType], lt_idx[nzBaseType]] from its value expression.


 Assuming TCCs not generated (at line 1001, column 7) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1002, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1003, column 6) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1002, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 LET/WHERE variable Xi at line 1007, col 8 is given type
  Interval from a preceding variable declaration.


 LET/WHERE variable Xi at line 1011, col 8 is given type
  Interval from a preceding variable declaration.

affine typechecked in 5.30s: 135 TCCs, 0 proved, 20 subsumed, 115 unproved; 6 conversions; 333 msgs
Parsing affine_bandb_boolexpr
affine_bandb_boolexpr parsed in 0.01 seconds
Typechecking affine_bandb_boolexpr
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/Maybe.bin in 0.02s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/stack.bin in 0.03s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/branch_and_bound.bin in 0.07s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/listn.bin in 0.09s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/Unit_adt.bin in 0.00s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/Unit_adt_reduce.bin in 0.00s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/Unit.bin in 0.03s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/real_orders.bin in 0.03s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/box.bin in 0.14s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/IntervalExpr_adt.bin in 0.23s (load part took 0.10s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/IntervalExpr_adt_reduce.bin in 0.08s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/IntervalExpr.bin in 0.08s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/interval_expr.bin in 0.25s (load part took 0.10s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/gbandb_boolexpr.bin in 0.15s (load part took 0.05s)
Parsing affine_boolexpr;;; GC:;;; Finished GC

affine_boolexpr parsed in 0.99 seconds
Typechecking affine_boolexpr
Parsing affine_expr_Eval
affine_expr_Eval parsed in 0.05 seconds
Typechecking affine_expr_Eval
Parsing affine_expr_Eval_fnd
affine_expr_Eval_fnd parsed in 0.12 seconds
Typechecking affine_expr_Eval_fnd
Parsing affine_expr
affine_expr parsed in 0.00 seconds
Typechecking affine_expr
Parsing affine_box
affine_box parsed in 0.03 seconds
Typechecking affine_box

 LET/WHERE variable lidx at line 36, col 8 is given type
  upfrom(-1) from its value expression.


 Judgement affine_box.Lbbox_Proper (line 111) is not needed;
it is subsumed by box.Lbbox_Proper (line 75)


 Judgement affine_box.Ubbox_Proper (line 113) is not needed;
it is subsumed by box.Ubbox_Proper (line 77)


 Judgement affine_box.Midbox_Proper (line 115) is not needed;
it is subsumed by box.Midbox_Proper (line 79)

affine_box typechecked in 0.32s: 17 TCCs, 0 proved, 6 subsumed, 11 unproved; 3 warnings; 1 msg
Parsing affine_pow
affine_pow parsed in 0.07 seconds
Typechecking affine_pow
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/for_iterate.bin in 0.19s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/ints/pvsbin/factorial.bin in 0.01s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/product.bin in 0.08s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sigma_upto.bin in 0.04s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sqrt_exists.bin in 0.03s (load part took 0.03s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sign.bin in 0.04s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sqrt.bin in 0.05s (load part took 0.02s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/factorial.bin in 0.04s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/binomial.bin in 0.09s (load part took 0.02s)

 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 19, column 54) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 21, column 18) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 In declaration pow_var_pd:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 22, column 9) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 23, column 36) for
  cdr_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 28, column 14) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 28, column 14) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 36, column 22) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 39, column 17) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 44, column 18) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 44, column 44) for
  null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 45, column 24) for
  car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration nats:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 49, column 9) for
  cons_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration next_idx_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration next_idx_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 66, column 52) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration idxs_ac_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration idxs_ac_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 76, column 10) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration idxs_ac_pow_var_ac_2:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration idxs_ac_pow_var_ac_2:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 89, column 10) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration pow_var_compatible?:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_compatible?:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 100, column 12) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 100, column 12) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]

Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/real_fun_ops.bin in 0.01s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/sigma_swap.bin in 0.03s (load part took 0.00s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/polynomials.bin in 0.32s (load part took 0.14s)

 In declaration containment_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration containment_pow_var_ac:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 114, column 51) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration notmember_ol_nat:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration notmember_ol_nat:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 123, column 13) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration pow_var_compatible_noise:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration pow_var_compatible_noise:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 129, column 12) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In declaration powvar_comp_noise_extension:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration powvar_comp_noise_extension:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration powvar_comp_noise_extension:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration powvar_comp_noise_extension:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 LET/WHERE variable newoff at line 144, col 8 is given type
  int from its value expression.


 Assuming TCCs not generated (at line 140, column 10) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_pow typechecked in 2.96s: 70 TCCs, 0 proved, 14 subsumed, 56 unproved; 34 conversions; 24 msgs
affine_expr typechecked in 3.61s: 3 TCCs, 0 proved, 0 subsumed, 3 unproved

 In declaration CacheData:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration CacheData:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 LET/WHERE variable re at line 19, col 8 is given type
  RealExpr from a preceding variable declaration.


 LET/WHERE variable ac at line 19, col 21 is given type
  AffineCombination from its value expression.


 LET/WHERE variable idxs at line 19, col 34 is given type
  ordered_list
      [nat,
       restrict[[real, real], [nat, nat], boolean]
           (<)] from its value expression.


 LET/WHERE variable varac at line 22, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable power at line 23, col 14 is given type
  nat from its value expression.


 LET/WHERE variable re at line 49, col 8 is given type
  RealExpr from a preceding variable declaration.


 LET/WHERE variable ac at line 49, col 26 is given type
  AffineCombination from its value expression.


 LET/WHERE variable nextresult at line 81, col 17 is given type
  {res: Maybe[CacheData] |
           some?(res) IMPLIES
            powvar?(val(res)`1) AND
             varidx_powvar(val(res)`1) = varidx_powvar(re) AND
              (EXISTS (i: below(length(t))):
                 nth(t, i) = val(res))} from its value expression.


 LET/WHERE variable cached at line 90, col 14 is given type
  {res: Maybe[CacheData] |
           some?(res) IMPLIES
            powvar?(val(res)`1) AND
             varidx_powvar(val(res)`1) = varidx_powvar(re) AND
              (EXISTS (i: below(length(cache))):
                 nth(cache, i) = val(res))} from its value expression.


 LET/WHERE variable res at line 103, col 20 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable newnidx at line 103, col 41 is given type
  nat from its value expression.


 In declaration RE2AC:
  added conversion restrict
                       [[IntervalExpr, IntervalExpr],
                        [RealExpr, RealExpr], boolean]
             
  to <<, converting
     [[IntervalExpr, IntervalExpr] -> bool]
  to [[RealExpr, RealExpr] -> bool]


 LET/WHERE variable result at line 115, col 27 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 117, col 27 is given type
  {res: Maybe[AffineCombination] |
           some?(res) IMPLIES
            (EXISTS (i: below(length(cache))):
               nth(cache, i)`1 = re AND
                nth(cache, i)`2 = val(res))} from its value expression.


 LET/WHERE variable result at line 119, col 16 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable ac at line 122, col 28 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 123, col 20 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 127, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 129, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 130, col 15 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 131, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 132, col 9 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 134, col 21 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 135, col 13 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 136, col 13 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 137, col 11 is given type
  [nat, (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 139, col 27 is given type
  {res: Maybe[AffineCombination] |
           some?(res) IMPLIES
            (EXISTS (i: below(length(cache))):
               nth(cache, i)`1 = re AND
                nth(cache, i)`2 = val(res))} from its value expression.


 LET/WHERE variable result at line 141, col 16 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 143, col 22 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 145, col 26 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 146, col 18 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 147, col 18 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 148, col 12 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 150, col 24 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 151, col 14 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 152, col 14 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 153, col 5 is given type
  [numfield, (cons?[CacheData])] from its value expression.


 LET/WHERE variable idx at line 158, col 25 is given type
  nat from its value expression.


 LET/WHERE variable varac at line 160, col 20 is given type
  AffineCombination from its value expression.


 In declaration RE2AC:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration RE2AC:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration RE2AC:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 LET/WHERE variable acRes at line 164, col 20 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 165, col 15 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 167, col 18 is given type
  {res: Maybe[CacheData] |
           some?(res) IMPLIES
            powvar?(val(res)`1) AND
             varidx_powvar(val(res)`1) = varidx_powvar(re) AND
              (EXISTS (i: below(length(cache))):
                 nth(cache, i) = val(res))} from its value expression.


 LET/WHERE variable result at line 170, col 16 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable idxs at line 176, col 13 is given type
  list[nat] from its value expression.


 LET/WHERE variable pownoises at line 177, col 13 is given type
  ordered_list
      [nat,
       restrict[[real, real], [nat, nat], boolean]
           (<)] from its value expression.


 LET/WHERE variable acRes at line 178, col 13 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 179, col 13 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable idxs at line 183, col 13 is given type
  list[nat] from its value expression.


 LET/WHERE variable pownoises at line 184, col 13 is given type
  ordered_list
      [nat,
       restrict[[real, real], [nat, nat], boolean]
           (<)] from its value expression.


 LET/WHERE variable newoff at line 185, col 13 is given type
  int from its value expression.


 LET/WHERE variable nwidxs at line 186, col 15 is given type
  list[nat] from its value expression.


 LET/WHERE variable acRes at line 190, col 13 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 191, col 13 is given type
  [int,
   (cons?
        [[RealExpr, AffineCombination,
          list[nat]]])] from its value expression.


 LET/WHERE variable newoff at line 194, col 13 is given type
  int from its value expression.


 LET/WHERE variable nwidxs at line 195, col 15 is given type
  {r:
     ordered_list
         [nat, restrict[[real, real], [nat, nat], boolean](<)] |
           NOT null_ol?
                   [nat, restrict[[real, real], [nat, nat], boolean](<)]
                   (r)
            AND
            car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
                (r)
             = nextfreeidx
             AND
             length(r) = newoff - nextfreeidx AND
              (FORALL (i: below(length(r))):
                 nth(r, i) =
                  i + nextfreeidx)} from its value expression.


 LET/WHERE variable acRes at line 196, col 12 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 197, col 12 is given type
  [int,
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable res1 at line 199, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 201, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 202, col 15 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 203, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 204, col 9 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 206, col 21 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 207, col 13 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 208, col 13 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 209, col 11 is given type
  [nat, (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 211, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 213, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 214, col 15 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 215, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 216, col 4 is given type
  [nat, (cons?[CacheData])] from its value expression.
;;; GC:;;; Finished GC


 In declaration RE2AC:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 164, column 52) for
  null_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 LET/WHERE variable RE2AC_ at line 232, col 6 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable RE2AC_ at line 252, col 6 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable RE2AC_ at line 269, col 6 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable R1 at line 290, col 14 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)(box)(vs) AND
                    compatible_pairs_on?(box, vs)(N)(val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable R2 at line 291, col 13 is given type
  {result: Maybe[[nat, (correct_cache?(append(box, (: I :))))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND EXISTS (N: Noise):
                   vars_in_box_compatible?(N)
                                          (append(box, (: I :)))
                                          (vs
                                           WITH [(length(box)) := x])
                    AND
                    compatible_pairs_on?(append(box, (: I :)),
                                         vs WITH [(length(box)) := x])
                                        (N)
                                        (val(result)`2)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.

affine_expr_Eval_fnd typechecked in 87.30s: 145 TCCs, 0 proved, 19 subsumed, 126 unproved; 7 conversions; 77 msgs

 LET/WHERE variable res at line 16, col 23 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable newnidx at line 16, col 44 is given type
  nat from its value expression.


 In declaration Eval_wCache:
  added conversion restrict
                       [[IntervalExpr, IntervalExpr],
                        [RealExpr, RealExpr], boolean]
             
  to <<, converting
     [[IntervalExpr, IntervalExpr] -> bool]
  to [[RealExpr, RealExpr] -> bool]


 LET/WHERE variable result at line 23, col 27 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 25, col 27 is given type
  {res: Maybe[AffineCombination] |
           some?(res) IMPLIES
            (EXISTS (i: below(length(cache))):
               nth(cache, i)`1 = re AND
                nth(cache, i)`2 = val(res))} from its value expression.


 LET/WHERE variable result at line 27, col 18 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable ac at line 31, col 27 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 32, col 16 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 34, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 36, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 37, col 17 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 38, col 17 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 39, col 9 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 41, col 21 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 42, col 15 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 43, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 44, col 11 is given type
  [nat, (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 46, col 27 is given type
  {res: Maybe[AffineCombination] |
           some?(res) IMPLIES
            (EXISTS (i: below(length(cache))):
               nth(cache, i)`1 = re AND
                nth(cache, i)`2 = val(res))} from its value expression.


 LET/WHERE variable result at line 48, col 18 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 50, col 22 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 52, col 26 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 53, col 20 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 54, col 20 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 55, col 12 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 57, col 24 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 58, col 16 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 59, col 16 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 60, col 7 is given type
  [numfield, (cons?[CacheData])] from its value expression.


 LET/WHERE variable idx at line 65, col 25 is given type
  nat from its value expression.


 LET/WHERE variable varac at line 67, col 20 is given type
  AffineCombination from its value expression.


 In declaration Eval_wCache:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration Eval_wCache:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration Eval_wCache:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 LET/WHERE variable acRes at line 71, col 20 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 72, col 17 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?[CacheData])] from its value expression.


 LET/WHERE variable cached at line 74, col 20 is given type
  {res: Maybe[CacheData] |
           some?(res) IMPLIES
            powvar?(val(res)`1) AND
             varidx_powvar(val(res)`1) = varidx_powvar(re) AND
              (EXISTS (i: below(length(cache))):
                 nth(cache, i) = val(res))} from its value expression.


 LET/WHERE variable result at line 77, col 18 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable idxs at line 83, col 15 is given type
  list[nat] from its value expression.


 LET/WHERE variable pownoises at line 84, col 15 is given type
  ordered_list
      [nat,
       restrict[[real, real], [nat, nat], boolean]
           (<)] from its value expression.


 LET/WHERE variable acRes at line 85, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 86, col 15 is given type
  [{nextfreeidx: nat | nextfreeidx > last_idx_in_box(box)},
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable idxs at line 90, col 15 is given type
  list[nat] from its value expression.


 LET/WHERE variable pownoises at line 91, col 15 is given type
  ordered_list
      [nat,
       restrict[[real, real], [nat, nat], boolean]
           (<)] from its value expression.


 LET/WHERE variable newoff at line 92, col 15 is given type
  int from its value expression.


 LET/WHERE variable nwidxs at line 93, col 15 is given type
  list[nat] from its value expression.


 LET/WHERE variable acRes at line 97, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 98, col 15 is given type
  [int,
   (cons?
        [[RealExpr, AffineCombination,
          list[nat]]])] from its value expression.


 LET/WHERE variable newoff at line 101, col 15 is given type
  int from its value expression.


 LET/WHERE variable nwidxs at line 102, col 15 is given type
  {r:
     ordered_list
         [nat, restrict[[real, real], [nat, nat], boolean](<)] |
           NOT null_ol?
                   [nat, restrict[[real, real], [nat, nat], boolean](<)]
                   (r)
            AND
            car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
                (r)
             = nextfreeidx
             AND
             length(r) = newoff - nextfreeidx AND
              (FORALL (i: below(length(r))):
                 nth(r, i) =
                  i + nextfreeidx)} from its value expression.


 LET/WHERE variable acRes at line 103, col 14 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 104, col 14 is given type
  [int,
   (cons?
        [[RealExpr, AffineCombination,
          ordered_list
              [nat,
               restrict[[real, real], [nat, nat], boolean]
                   (<)]]])] from its value expression.


 LET/WHERE variable res1 at line 107, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 109, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 110, col 17 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 111, col 17 is given type
  AffineCombination from its value expression.


 LET/WHERE variable res2 at line 112, col 9 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re2
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache1)
             AND val(result)`1 >= newid1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid2 at line 114, col 21 is given type
  nat from its value expression.


 LET/WHERE variable cache2 at line 115, col 15 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac2 at line 116, col 15 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 117, col 11 is given type
  [nat, (cons?[CacheData])] from its value expression.


 LET/WHERE variable res1 at line 119, col 27 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re1
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable newid1 at line 121, col 23 is given type
  nat from its value expression.


 LET/WHERE variable cache1 at line 122, col 17 is given type
  (correct_cache?(box)) from its value expression.


 LET/WHERE variable ac1 at line 123, col 17 is given type
  AffineCombination from its value expression.


 LET/WHERE variable result at line 124, col 6 is given type
  [nat, (cons?[CacheData])] from its value expression.
;;; GC:;;; Finished GC


 In declaration Eval_wCache:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 LET/WHERE variable result at line 133, col 8 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, null[CacheData])
             AND val(result)`1 >= 1 + last_idx_in_box(box)
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable E at line 146, col 10 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, cache)
             AND val(result)`1 >= nextfreeidx
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable ac at line 148, col 18 is given type
  AffineCombination from its value expression.


 LET/WHERE variable E at line 154, col 10 is given type
  {result: Maybe[[nat, (correct_cache?(box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2) AND car(val(result)`2)`1 = re
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, null[CacheData])
             AND val(result)`1 >= 1 + last_idx_in_box(box)
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable ac at line 156, col 18 is given type
  AffineCombination from its value expression.

affine_expr_Eval typechecked in 160.67s: 111 TCCs, 0 proved, 14 subsumed, 97 unproved; 5 conversions; 66 msgs
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/reals/pvsbin/RealInt.bin in 0.02s (load part took 0.01s)
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/interval_bexpr.bin in 0.18s (load part took 0.08s)

 LET/WHERE variable eval_blet at line 64, col 8 is given type
  real from its value expression.

Parsing boolexpr_lfcs
boolexpr_lfcs parsed in 0.03 seconds
Typechecking boolexpr_lfcs

 In declaration F:
  added conversion restrict
                       [[IntervalExpr, IntervalExpr],
                        [BoolExpr, BoolExpr], boolean]
             
  to <<, converting
     [[IntervalExpr, IntervalExpr] -> bool]
  to [[BoolExpr, BoolExpr] -> bool]


 LET/WHERE variable res_ctxt at line 87, col 29 is given type
  (post(bop, ctxt0)) from its value expression.


 LET/WHERE variable ctxt1 at line 90, col 29 is given type
  (post(bop1, ctxt0)) from its value expression.


 LET/WHERE variable ctxt2 at line 91, col 18 is given type
  (post(bop2, ctxt1)) from its value expression.


 LET/WHERE variable initialized_ctxt0 at line 99, col 26 is given type
  Ctxt from its value expression.


 LET/WHERE variable ctxt1 at line 100, col 12 is given type
  (post(bin, initialized_ctxt0)) from its value expression.


 LET/WHERE variable ctxt1 at line 102, col 13 is given type
  (post(blet, ctxt0)) from its value expression.


 LET/WHERE variable ctxt2 at line 103, col 12 is given type
  (post(bin,
        f_BLETIN_BoolExpr_merge1(ctxt0,
                                 ctxt1))) from its value expression.


 LET/WHERE variable ctxt1 at line 106, col 29 is given type
  (post(bif, ctxt0)) from its value expression.


 LET/WHERE variable ctxt2 at line 107, col 8 is given type
  (post(bt, f_BITE_merge1(ctxt0, ctxt1))) from its value expression.


 LET/WHERE variable ctxt3 at line 108, col 8 is given type
  (post(be,
        f_BITE_merge2(ctxt0, ctxt1, ctxt2))) from its value expression.


 LET/WHERE variable ctxt1 at line 111, col 29 is given type
  (post(bop1, ctxt0)) from its value expression.


 LET/WHERE variable ctxt2 at line 112, col 18 is given type
  (post(bop2, ctxt1)) from its value expression.


 LET/WHERE variable ctxt1 at line 115, col 32 is given type
  (post(bop1, ctxt0)) from its value expression.


 LET/WHERE variable ctxt2 at line 116, col 21 is given type
  (post(bop2, ctxt1)) from its value expression.

boolexpr_lfcs typechecked in 0.40s: 36 TCCs, 0 proved, 1 subsumed, 35 unproved; 1 conversion; 14 msgs

 LET/WHERE variable ctxt_ at line 182, col 8 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable ctxt0_ at line 182, col 28 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable result at line 183, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable cache_0 at line 184, col 5 is given type
  {c_: (correct_cache?(ctxt0_`box)) |
           idxs_bounded(ctxt0_`nextid)(c_)} from its value expression.


 LET/WHERE variable cache_r at line 185, col 1 is given type
  {c_: (correct_cache?(ctxt_`box)) |
           idxs_bounded(ctxt_`nextid)(c_)} from its value expression.


 LET/WHERE variable nextfreeidx at line 186, col 3 is given type
  {n_: nat |
           n_ > last_idx_in_box(ctxt0_`box)} from its value expression.


 LET/WHERE variable newnidx at line 187, col 1 is given type
  {n_: nat | n_ > last_idx_in_box(ctxt_`box)} from its value expression.


 LET/WHERE variable ctxt_ at line 213, col 13 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable cres at line 222, col 13 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable ctxt_ at line 285, col 13 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable evalop at line 286, col 10 is given type
  {result: Maybe[[nat, (correct_cache?(ctxt_`box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2)
             AND car(val(result)`2)`1 = op(bexpr)
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, ctxt_`cache)
             AND val(result)`1 >= ctxt_`nextid
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable opi at line 288, col 18 is given type
  Interval from its value expression.


 LET/WHERE variable res_eval at line 290, col 24 is given type
  ProperInterval from its value expression.


 LET/WHERE variable ctxt__ at line 314, col 13 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable evalop1 at line 315, col 10 is given type
  {result: Maybe[[nat, (correct_cache?(ctxt__`box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2)
             AND car(val(result)`2)`1 = op1(bexpr)
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, ctxt__`cache)
             AND val(result)`1 >= ctxt__`nextid
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable evalop2 at line 317, col 18 is given type
  {result: Maybe[[nat, (correct_cache?(ctxt__`box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2)
             AND car(val(result)`2)`1 = op2(bexpr)
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, val(evalop1)`2)
             AND val(result)`1 >= val(evalop1)`1
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.


 LET/WHERE variable op1_ at line 319, col 16 is given type
  AffineCombination from its value expression.


 LET/WHERE variable op2_ at line 320, col 17 is given type
  AffineCombination from its value expression.


 LET/WHERE variable ctxt_ at line 355, col 11 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable eval_blet at line 356, col 8 is given type
  {result: Maybe[[nat, (correct_cache?(ctxt_`box))]] |
           some?(result) IMPLIES
                 NOT null?(val(result)`2)
             AND car(val(result)`2)`1 = rexpr
             AND EXISTS (l: list[CacheData]):
                   val(result)`2 = append(l, ctxt_`cache)
             AND val(result)`1 >= ctxt_`nextid
             AND idxs_bounded(val(result)`1)
                             (val(result)`2)} from its value expression.
;;; GC:;;; Finished GC


 LET/WHERE variable ctxt1_ at line 406, col 13 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable ctxt2_ at line 407, col 10 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable ctxt_ at line 527, col 9 is given type
  [# box: Box,
     nextid: {n_: nat | n_ > last_idx_in_box(box)},
     cache: {c_: (correct_cache?(box)) | idxs_bounded(nextid)(c_)},
     nxtlcl: above(last_idx_in_box(box)),
     result: Maybe[bool] #] from its value expression.


 LET/WHERE variable box at line 528, col 8 is given type
  Box from a preceding variable declaration.


 LET/WHERE variable cache at line 529, col 7 is given type
  {c_: (correct_cache?(ctxt_`box)) |
           idxs_bounded(ctxt_`nextid)(c_)} from its value expression.


 LET/WHERE variable nxtidx at line 530, col 7 is given type
  {n_: nat | n_ > last_idx_in_box(ctxt_`box)} from its value expression.

Parsing affine_expr_Eval_fnd_props
affine_expr_Eval_fnd_props parsed in 0.02 seconds
Typechecking affine_expr_Eval_fnd_props

 LET/WHERE variable N_ at line 21, col 10 is given type
  {N_: Noise |
           (null_ol?(N) IMPLIES
             (null_ol?(N_) OR car_ol(N_)`1 = length(box)))
            AND
            (NOT null_ol?(N) IMPLIES
              null_ol?(N_) OR
               ((length(box) < car_ol(N)`1 AND
                  car_ol(N_)`1 = length(box))
                 OR
                 (length(box) > car_ol(N)`1 AND
                   car_ol(N_)`1 = car_ol(N)`1)
                  OR
                  car_ol(N_)`1 >=
                   min(car_ol(N)`1,
                       length(box))))} from its value expression.


 In declaration cp_box_vs_cache_expansion:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In declaration cp_box_vs_cache_expansion:
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 LET/WHERE variable I at line 41, col 6 is given type
  ProperInterval from its value expression.


 LET/WHERE variable x at line 42, col 6 is given type
  BaseType from its value expression.

affine_expr_Eval_fnd_props typechecked in 0.25s: 9 TCCs, 0 proved, 3 subsumed, 6 unproved; 2 conversions; 3 msgs

 LET/WHERE variable BEBox at line 780, col 8 is given type
  CDBB(bexpr, box,
       first_noise_idx_available_box(bexpr,
                                     box)) from its value expression.

Parsing boolexpr_lfcmrs
boolexpr_lfcmrs parsed in 0.08 seconds
Typechecking boolexpr_lfcmrs

 LET/WHERE variable bexpr at line 167, col 8 is given type
  (bconst?) from its value expression.


 LET/WHERE variable f_ at line 168, col 8 is given type
  [bcon: (bconst?), c0: f_Ctxt ->
     (f_post(bcon, c0))] from its value expression.


 LET/WHERE variable g_ at line 169, col 8 is given type
  [bcon: (bconst?), c0: g_Ctxt ->
     (g_post(bcon, c0))] from its value expression.


 LET/WHERE variable bexpr at line 177, col 8 is given type
  (bnot?) from its value expression.


 LET/WHERE variable f_ at line 178, col 8 is given type
  [bnot: (bnot?), c0: f_Ctxt ->
     [c1: (f_post(bop(bnot), c0)) ->
        (f_post(bnot, c0))]] from its value expression.


 LET/WHERE variable g_ at line 179, col 8 is given type
  [bnot: (bnot?), c0: g_Ctxt ->
     [c1: (g_post(bop(bnot), c0)) ->
        (g_post(bnot, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 189, col 8 is given type
  (band?) from its value expression.


 LET/WHERE variable f_ at line 190, col 8 is given type
  [band: (band?), c0: f_Ctxt ->
     [[c1: (f_post(bop1(band), c0)), (f_post(bop2(band), c1))] ->
        (f_post(band, c0))]] from its value expression.


 LET/WHERE variable g_ at line 191, col 8 is given type
  [band: (band?), c0: g_Ctxt ->
     [[c1: (g_post(bop1(band), c0)), (g_post(bop2(band), c1))] ->
        (g_post(band, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 199, col 8 is given type
  (bincludes?) from its value expression.


 LET/WHERE variable f_ at line 200, col 8 is given type
  [binc: (bincludes?), c0: f_Ctxt ->
     (f_post(binc, c0))] from its value expression.


 LET/WHERE variable g_ at line 201, col 8 is given type
  [binc: (bincludes?), c0: g_Ctxt ->
     (g_post(binc, c0))] from its value expression.


 LET/WHERE variable bexpr at line 208, col 8 is given type
  (brel?) from its value expression.


 LET/WHERE variable f_ at line 209, col 8 is given type
  [brel: (brel?), c0: f_Ctxt ->
     (f_post(brel, c0))] from its value expression.


 LET/WHERE variable g_ at line 210, col 8 is given type
  [brel: (brel?), c0: g_Ctxt ->
     (g_post(brel, c0))] from its value expression.


 LET/WHERE variable bexpr at line 217, col 8 is given type
  (bletin?) from its value expression.


 LET/WHERE variable f_ at line 218, col 8 is given type
  [bli: {b_: (bletin?) | realexpr?(blet(b_))}, c0: f_Ctxt ->
     [(f_post(bin(bli), f_BLETIN_RealExpr_ini(blet(bli), c0))) ->
        (f_post(bli, c0))]] from its value expression.


 LET/WHERE variable g_ at line 219, col 8 is given type
  [bli: {b_: (bletin?) | realexpr?(blet(b_))}, c0: g_Ctxt ->
     [(g_post(bin(bli), g_BLETIN_RealExpr_ini(blet(bli), c0))) ->
        (g_post(bli, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 239, col 8 is given type
  (bletin?) from its value expression.


 LET/WHERE variable f_ at line 240, col 8 is given type
  [bli: {b_: (bletin?) | boolexpr?(blet(b_))}, c0: f_Ctxt ->
     [[c1: (f_post(blet(bli), c0)),
       (f_post(bin(bli), f_BLETIN_BoolExpr_merge1(c0, c1)))] ->
        (f_post(bli, c0))]] from its value expression.


 LET/WHERE variable g_ at line 241, col 8 is given type
  [bli: {b_: (bletin?) | boolexpr?(blet(b_))}, c0: g_Ctxt ->
     [[c1: (g_post(blet(bli), c0)),
       (g_post(bin(bli), g_BLETIN_BoolExpr_merge1(c0, c1)))] ->
        (g_post(bli, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 263, col 8 is given type
  (bite?) from its value expression.


 LET/WHERE variable f_ at line 264, col 8 is given type
  [bite: (bite?), c0: f_Ctxt ->
     [[c1: (f_post(bif(bite), c0)),
       c2: (f_post(bthen(bite), f_BITE_merge1(c0, c1))),
       (f_post(belse(bite), f_BITE_merge2(c0, c1, c2)))] ->
        (f_post(bite, c0))]] from its value expression.


 LET/WHERE variable g_ at line 265, col 8 is given type
  [bite: (bite?), c0: g_Ctxt ->
     [[c1: (g_post(bif(bite), c0)),
       c2: (g_post(bthen(bite), g_BITE_merge1(c0, c1))),
       (g_post(belse(bite), g_BITE_merge2(c0, c1, c2)))] ->
        (g_post(bite, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 293, col 8 is given type
  (bor?) from its value expression.


 LET/WHERE variable f_ at line 294, col 8 is given type
  [bor: (bor?), c0: f_Ctxt ->
     [[c1: (f_post(bop1(bor), c0)), (f_post(bop2(bor), c1))] ->
        (f_post(bor, c0))]] from its value expression.


 LET/WHERE variable g_ at line 295, col 8 is given type
  [bor: (bor?), c0: g_Ctxt ->
     [[c1: (g_post(bop1(bor), c0)), (g_post(bop2(bor), c1))] ->
        (g_post(bor, c0))]] from its value expression.


 LET/WHERE variable bexpr at line 304, col 8 is given type
  (bimplies?) from its value expression.


 LET/WHERE variable f_ at line 305, col 8 is given type
  [bimp: (bimplies?), c0: f_Ctxt ->
     [[c1: (f_post(bop1(bimp), c0)), (f_post(bop2(bimp), c1))] ->
        (f_post(bimp, c0))]] from its value expression.


 LET/WHERE variable g_ at line 306, col 8 is given type
  [bimp: (bimplies?), c0: g_Ctxt ->
     [[c1: (g_post(bop1(bimp), c0)), (g_post(bop2(bimp), c1))] ->
        (g_post(bimp, c0))]] from its value expression.

boolexpr_lfcmrs typechecked in 0.66s: 36 TCCs, 0 proved, 4 subsumed, 32 unproved; 30 msgs

 LET/WHERE variable be1 at line 788, col 10 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable be2 at line 789, col 9 is given type
  bool from its value expression.


 LET/WHERE variable be at line 795, col 8 is given type
  Maybe[Maybe[bool]] from its value expression.

affine_boolexpr typechecked in 201.07s: 191 TCCs, 0 proved, 63 subsumed, 128 unproved; 31 msgs
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/structures/pvsbin/array2list.bin in 0.07s (load part took 0.02s)

 LET/WHERE variable bev at line 22, col 8 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable err at line 23, col 5 is given type
  boolean from its value expression.


 LET/WHERE variable bet at line 24, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 26, col 21 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 26, col 21 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 25, col 8 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable vs at line 48, col 14 is given type
  [nat -> real] from its value expression.


 In declaration sound?:
  added conversion val2some[boolean]
             
  to beval__(expr, vs, length(box)), converting
     bool
  to Maybe[boolean]


 In declaration sound?:
  added conversion val2some[boolean]
             
  to beval__(expr, vs, length(box)), converting
     bool
  to Maybe[boolean]

affine_bandb_boolexpr typechecked in 203.94s: 1 TCC, 0 proved, 0 subsumed, 1 unproved; 2 conversions; 7 msgs
Parsing affine_bandb_numerical
affine_bandb_numerical parsed in 0.05 seconds
Typechecking affine_bandb_numerical
Restored theory from /Users/cmunoz/local/PVS-6.0/nasalib/interval_arith/pvsbin/safe_arith.bin in 0.06s (load part took 0.02s)

 LET/WHERE variable X at line 38, col 13 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable Lb at line 39, col 13 is given type
  ProperBox from its value expression.


 LET/WHERE variable Ub at line 40, col 13 is given type
  ProperBox from its value expression.


 LET/WHERE variable P1 at line 41, col 10 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable P2 at line 42, col 13 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable lb_max at line 43, col 7 is given type
  real from its value expression.


 LET/WHERE variable lb_box at line 43, col 14 is given type
  ProperBox from its value expression.


 LET/WHERE variable ub_min at line 46, col 14 is given type
  real from its value expression.


 LET/WHERE variable ub_box at line 46, col 21 is given type
  ProperBox from its value expression.


 LET/WHERE variable M_lb at line 62, col 8 is given type
  [# lb_box: ProperBox,
     lb_max: real,
     mm: ProperInterval,
     ub_box: ProperBox,
     ub_min: real #] from its value expression.


 LET/WHERE variable M_ub at line 63, col 8 is given type
  [# lb_box: ProperBox,
     lb_max: real,
     mm: ProperInterval,
     ub_box: ProperBox,
     ub_min: real #] from its value expression.


 LET/WHERE variable lb at line 80, col 21 is given type
  real from its value expression.


 LET/WHERE variable ub at line 82, col 21 is given type
  real from its value expression.


 The generated TCCs for judgement split_Proper
might be easier to prove using a RECURSIVE judgement.
(for backward compatibility, this is not generated by default).


 Judgement affine_bandb_numerical.split_Proper (line 90) is not needed;
it is subsumed by interval_expr.split_Proper (line 291)


 LET/WHERE variable X at line 99, col 8 is given type
  Interval from its value expression.


 LET/WHERE variable lbub at line 100, col 5 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable lb_eval at line 103, col 13 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable ub_eval at line 104, col 10 is given type
  Maybe[AffineCombination] from its value expression.


 LET/WHERE variable lb at line 111, col 13 is given type
  naturalnumber from its value expression.


 LET/WHERE variable ub at line 112, col 10 is given type
  naturalnumber from its value expression.


 LET/WHERE variable vs1_val at line 120, col 11 is given type
  [# lb: real,
     lbub: Interval,
     thisvar: nat,
     ub: real #] from its value expression.


 LET/WHERE variable vs2_val at line 120, col 31 is given type
  [# lb: real,
     lbub: Interval,
     thisvar: nat,
     ub: real #] from its value expression.


 LET/WHERE variable Mb at line 131, col 10 is given type
  listn[Interval](length(box)) from its value expression.


 LET/WHERE variable vs at line 132, col 10 is given type
  VarSel from its value expression.


 LET/WHERE variable vs_v at line 133, col 28 is given type
  [# lb: real,
     lbub: Interval,
     thisvar: nat,
     ub: real #] from its value expression.


 LET/WHERE variable dir at line 141, col 9 is given type
  bool from its value expression.


 LET/WHERE variable v at line 141, col 13 is given type
  nat from its value expression.


 LET/WHERE variable dir at line 145, col 9 is given type
  bool from its value expression.


 LET/WHERE variable v at line 145, col 13 is given type
  nat from its value expression.


 LET/WHERE variable v at line 149, col 8 is given type
  nat from a preceding variable declaration.


 LET/WHERE variable mm at line 155, col 13 is given type
  real from its value expression.


 LET/WHERE variable M at line 197, col 25 is given type
  [# lb_box: ProperBox,
     lb_max: real,
     mm: ProperInterval,
     ub_box: ProperBox,
     ub_min: real #] from its value expression.

affine_bandb_numerical typechecked in 0.88s: 43 TCCs, 0 proved, 15 subsumed, 28 unproved; 2 warnings; 31 msgs
Parsing strategies
strategies parsed in 0.00 seconds
Typechecking strategies
strategies typechecked in 0.08s: No TCCs generated
top typechecked in 211.07s: No TCCs generated
Saving bin file for theory boolexpr_lfcmrs
Saving boolexpr_lfcmrs
Saving bin file for theory strategies
Saving strategies
Saving bin file for theory affine_expr
Saving affine_expr
Saving bin file for theory boolexpr_lfcs
Saving boolexpr_lfcs
Saving bin file for theory affine_expr_Eval
Saving affine_expr_Eval
Saving bin file for theory affine
Saving affine
Saving bin file for theory top
Saving top
Saving bin file for theory affine_bandb_numerical
Saving affine_bandb_numerical
Saving bin file for theory affine_pow
Saving affine_pow
Saving bin file for theory affine_box
Saving affine_box
Saving bin file for theory affine_boolexpr
Saving affine_boolexpr
Saving bin file for theory affine_expr_Eval_fnd
Saving affine_expr_Eval_fnd
Saving bin file for theory affine_bandb_boolexpr
Saving affine_bandb_boolexpr
Saving bin file for theory affine_expr_Eval_fnd_props
Saving affine_expr_Eval_fnd_props
Context file /Users/cmunoz/local/PVS-6.0/nasalib/affine_arith/.pvscontext written
Defining interval-eq__. 
Defining interval-eq__$. 
Defining vars-sharp__. 
Defining vars-sharp__$. 
Defining vars-in-box__. 
Defining vars-in-box__$. 
Defining gbandb_interval__. 
Defining gbandb_interval__$. 
Defining gbandb_numerical__. 
Defining gbandb_numerical__$. 
Defining decimalize. 
Defining decimalize$. 
Defining decimalize-expr. 
Defining decimalize-expr$. 
Defining simple-numerical. 
Defining simple-numerical$. 
Defining interval. 
Defining interval$. 
Defining numerical. 
Defining numerical$. 
Defining sqrt-rew. 
Defining sqrt-rew$. 
Defining sqrt-rew-off. 
Defining sqrt-rew-off$. 
; Loading
;    /Users/cmunoz/local/PVS-6.0/nasalib/affine_arith/pvs-strategies

Defining simple-affine. 
Defining simple-affine$. 
Defining aa-numerical. 
Defining aa-numerical$. 
Defining affine. 
Defining affine$. 
Defining aa-interval. 
Defining expand_ol. 
Defining expand_ol$. 
Defining abstract-and-then. 
Defining abstract-and-then$. 
Proving theory top
Proving theory affine
Rerunning proof of affine.ErrorTerms_TCC1
affine.ErrorTerms_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.null_is_ErrorTerms
affine.null_is_ErrorTerms proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.idxs_pd_TCC1
affine.idxs_pd_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.idxs_pd_append

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 39, column 52) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 40, column 10) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.idxs_pd_append proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine.add_ET_TCC1
affine.add_ET_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.add_ET_TCC2
affine.add_ET_TCC2 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.add_ET_TCC3
affine.add_ET_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.add_ET_TCC4
affine.add_ET_TCC4 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.last_idx_append

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 51, column 30) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 52, column 11) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.last_idx_append proved in 0.79 real, 0.79 cpu seconds
Rerunning proof of affine.last_error_TCC1
affine.last_error_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.ac_proj_cv
affine.ac_proj_cv proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.ac_proj_pd
affine.ac_proj_pd proved in 0.00 real, 0.00 cpu seconds
Rerunning proof of affine.last_idx_acs_TCC1
affine.last_idx_acs_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.search_error_term_by_idx_TCC1
affine.search_error_term_by_idx_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.search_error_term_by_idx_TCC2
affine.search_error_term_by_idx_TCC2 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.setbi_nnull_member

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.setbi_nnull_member proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.next_idx_TCC1
affine.next_idx_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.beyond_last_idx_notmember

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.beyond_last_idx_notmember proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine.Noise_TCC1
affine.Noise_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.null_is_noise
affine.null_is_noise proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.idxs_noise_TCC1
affine.idxs_noise_TCC1 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine.empty_noise_is_ol
affine.empty_noise_is_ol proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.add_N_TCC1
affine.add_N_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.add_N_TCC2
affine.add_N_TCC2 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.add_N_TCC3
affine.add_N_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.add_N_TCC4
affine.add_N_TCC4 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.extend_N_prop1
affine.extend_N_prop1 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine.get_noise_by_idx_TCC1
affine.get_noise_by_idx_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.upd_noise_TCC1
affine.upd_noise_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.upd_noise_TCC2
affine.upd_noise_TCC2 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.upd_noise_TCC3
affine.upd_noise_TCC3 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine.upd_noise_TCC4
affine.upd_noise_TCC4 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine.upd_noise_TCC5
affine.upd_noise_TCC5 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.upd_noise_TCC6
affine.upd_noise_TCC6 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.upd_noise_TCC7

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 21) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.upd_noise_TCC7 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine.upd_noise_TCC8

 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.upd_noise_TCC8 proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine.upd_noise_TCC9
affine.upd_noise_TCC9 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.upd_noise_range_TCC1
affine.upd_noise_range_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.upd_noise_range_TCC2
affine.upd_noise_range_TCC2 proved in 0.00 real, 0.00 cpu seconds
Rerunning proof of affine.upd_noise_burst__TCC1
affine.upd_noise_burst__TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.gnbi_upd

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.gnbi_upd proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine.gnbi_upd_2

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.gnbi_upd_2 proved in 0.54 real, 0.54 cpu seconds
Rerunning proof of affine.gnbi_updr_TCC1
affine.gnbi_updr_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.gnbi_updr
affine.gnbi_updr proved in 0.20 real, 0.20 cpu seconds
Rerunning proof of affine.gnbi_updr_2
affine.gnbi_updr_2 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine.gnbi_updb__TCC1
affine.gnbi_updb__TCC1 proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine.gnbi_updb_

 Assuming TCCs not generated  for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 231, column 25) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated  for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 231, column 25) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 231, column 25) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine.gnbi_updb_ proved in 0.59 real, 0.59 cpu seconds
Rerunning proof of affine.gnbi_updb
affine.gnbi_updb proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine.gnbi_updb_2_
affine.gnbi_updb_2_ proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.gnbi_updb_2
affine.gnbi_updb_2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.restrict_by_idxs_TCC1
affine.restrict_by_idxs_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.restrict_by_idxs_TCC2

 Assuming TCCs not generated (at line 1, column 2) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 21) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 In input "every[[nat, nzEpsilon]]
    (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
    (cdr[[nat, nzEpsilon]](N))":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]

affine.restrict_by_idxs_TCC2 proved in 0.32 real, 0.32 cpu seconds
Rerunning proof of affine.restrict_by_idxs_TCC3
affine.restrict_by_idxs_TCC3 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.restrict_by_idxs_TCC4

 Assuming TCCs not generated (at line 1, column 2) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 In input "every[[nat, nzEpsilon]]
    (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
    (cdr[[nat, nzEpsilon]](N))":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]

affine.restrict_by_idxs_TCC4 proved in 0.34 real, 0.34 cpu seconds
Rerunning proof of affine.eval_pd_noise_TCC1

 Assuming TCCs not generated (at line 1, column 26) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  cdr_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.eval_pd_noise_TCC1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.eval_pd_noise_TCC2
affine.eval_pd_noise_TCC2 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.eval_pd_noise_TCC3

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_TCC3 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.epn_pds_monotony
affine.epn_pds_monotony proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.epn_noise_monotony
affine.epn_noise_monotony proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.eval_pd_noise_rec_pds_def

 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 300, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 39) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 32) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 47) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subproofs (2) than subgoals (3)

 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 55) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 71) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_rec_pds_def proved in 0.94 real, 0.94 cpu seconds
Rerunning proof of affine.eval_pd_noise_rec_N_def

 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 305, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 306, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 307, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 45) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 30) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "every[[nat, nzEpsilon]]
    (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)(N)":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 32) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_rec_N_def proved in 1.32 real, 1.32 cpu seconds
Rerunning proof of affine.appendable_Noises_1
affine.appendable_Noises_1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.eval_pd_noise_noise_append_2

 Assuming TCCs not generated (at line 317, column 3) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 318, column 28) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 64) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 77) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 53) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 2, column 70) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 86) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_noise_append_2 proved in 1.73 real, 1.73 cpu seconds
Rerunning proof of affine.eval_pd_noise_noise_append

 Assuming TCCs not generated (at line 322, column 28) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_noise_append proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.eval_pd_noise_append

 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 326, column 2) for
  appendable_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 327, column 24) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.eval_pd_noise_append proved in 0.53 real, 0.53 cpu seconds
Rerunning proof of affine.eval_ac_partial_ext

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.eval_ac_partial_ext proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine.eval_upd_no_idxs_ac

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.eval_upd_no_idxs_ac proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine.eval_updb_no_idxs_
affine.eval_updb_no_idxs_ proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine.eval_updb_no_idxs
affine.eval_updb_no_idxs proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.mergeable?_TCC1
affine.mergeable?_TCC1 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.mergeable?_TCC2
affine.mergeable?_TCC2 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.mergeable?_TCC3
affine.mergeable?_TCC3 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.mergeable_wrt_pd?_TCC1
affine.mergeable_wrt_pd?_TCC1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.mergeable_wrt_pd?_nonrec_def

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mergeable_wrt_pd?_nonrec_def proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine.merge_TCC1
affine.merge_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.merge_TCC2
affine.merge_TCC2 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.merge_TCC3
affine.merge_TCC3 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.merge_TCC4

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 22) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.merge_TCC4 proved in 0.36 real, 0.36 cpu seconds
Rerunning proof of affine.merge_TCC5
affine.merge_TCC5 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.merge_TCC6
affine.merge_TCC6 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.merge_TCC7

 Assuming TCCs not generated (at line 1, column 2) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 22) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.merge_TCC7 proved in 0.23 real, 0.23 cpu seconds
Rerunning proof of affine.merge_TCC8
affine.merge_TCC8 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.merge_TCC9

 In input "(every[[nat, nzEpsilon]]
     (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
     (cdr[[nat, nzEpsilon]](N1))
  AND
  every[[nat, nzEpsilon]]
      (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
      (cdr[[nat, nzEpsilon]](N2)))":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]


 In input "(every[[nat, nzEpsilon]]
     (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
     (cdr[[nat, nzEpsilon]](N1))
  AND
  every[[nat, nzEpsilon]]
      (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
      (cdr[[nat, nzEpsilon]](N2)))":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]

affine.merge_TCC9 proved in 0.44 real, 0.44 cpu seconds
Rerunning proof of affine.merge_TCC10

 Assuming TCCs not generated (at line 1, column 2) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 14) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 22) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 22) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.merge_TCC10 proved in 0.54 real, 0.54 cpu seconds
Rerunning proof of affine.merge_TCC11
affine.merge_TCC11 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.merge_prop1

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 7) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.merge_prop1 proved in 2.11 real, 2.11 cpu seconds
Rerunning proof of affine.mergeable_wrt_null_all_idxs_zero

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mergeable_wrt_null_all_idxs_zero proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine.mergeable_wrt_null_eval_zero

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mergeable_wrt_null_eval_zero proved in 0.58 real, 0.58 cpu seconds
Rerunning proof of affine.mergeable_noises_respect_eval

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 In input "every[[nat, nzEpsilon]]
    (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)(N2)":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
;;; GC:;;; Finished GC


 Assuming TCCs not generated (at line 1, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

Proving affine.mergeable_noises_respect_eval.
affine.mergeable_noises_respect_eval proved in 1.08 real, 1.08 cpu seconds
Rerunning proof of affine.mergeable_suff_conditions

 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 369, column 35) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mergeable_suff_conditions proved in 0.43 real, 0.43 cpu seconds
Rerunning proof of affine.merge_commutativity

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.merge_commutativity proved in 2.37 real, 2.37 cpu seconds
Rerunning proof of affine.map_error_TCC1
affine.map_error_TCC1 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine.map_error_TCC2
affine.map_error_TCC2 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.map_error_TCC3
affine.map_error_TCC3 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.map_error_TCC4
affine.map_error_TCC4 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.map_error_TCC5
affine.map_error_TCC5 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.nol_mp_1

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.nol_mp_1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.me_ordered_1

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 463, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 464, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 464, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 465, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (2) than subproofs (4)
affine.me_ordered_1 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine.me_ordered_1b

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 468, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 39) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 59) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 470, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.me_ordered_1b proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine.me_ordered_2

 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 473, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 474, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 475, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 15) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 80) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 476, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 48) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 41) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 65) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 48) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 41) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 65) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 49) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 42) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 73) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 49) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 42) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 73) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 67) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.me_ordered_2.

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 67) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 20) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 43) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.me_ordered_2 proved in 3.92 real, 3.92 cpu seconds
Rerunning proof of affine.me_ordered_3

 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 479, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 480, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 481, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 25) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 482, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 45) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 483, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.me_ordered_3 proved in 1.86 real, 1.86 cpu seconds
Rerunning proof of affine.me_ordered_4

 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 486, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 487, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 2) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 488, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 489, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 11) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 490, column 28) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 13) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.me_ordered_4 proved in 1.71 real, 1.71 cpu seconds
Rerunning proof of affine.epn_me_null_1

 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 36) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 446, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 301, column 56) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 446, column 16) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_me_null_1 proved in 0.75 real, 0.75 cpu seconds
Rerunning proof of affine.next_idx_const_ac
affine.next_idx_const_ac proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.var_ac_TCC1
affine.var_ac_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.eval_var_ac
affine.eval_var_ac proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine.eval_pd_i_TCC1
affine.eval_pd_i_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.eval_pd_i_TCC2
affine.eval_pd_i_TCC2 proved in 0.29 real, 0.29 cpu seconds
Rerunning proof of affine.ebi_var_ac
affine.ebi_var_ac proved in 0.43 real, 0.43 cpu seconds
Rerunning proof of affine.idxs_ac_var_ac
affine.idxs_ac_var_ac proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine.updated_noise_on_varac1
affine.updated_noise_on_varac1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.updated_noise_on_varac2_TCC1
affine.updated_noise_on_varac2_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.updated_noise_on_varac2
affine.updated_noise_on_varac2 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine.updated_noise_range_on_v1
affine.updated_noise_range_on_v1 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine.updated_noise_range_on_v2_TCC1
affine.updated_noise_range_on_v2_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.updated_noise_range_on_v2
affine.updated_noise_range_on_v2 proved in 0.27 real, 0.27 cpu seconds
Rerunning proof of affine.containment_var

 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (2) than subproofs (4)

 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 513, column 42) for
  cons_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (2) than subproofs (4)
affine.containment_var proved in 0.92 real, 0.92 cpu seconds
Rerunning proof of affine.containment_var_single_interval
affine.containment_var_single_interval proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.containment_var_simple
affine.containment_var_simple proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.containment_cnt
affine.containment_cnt proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.containment_pd_interval

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.containment_pd_interval proved in 0.53 real, 0.53 cpu seconds
Rerunning proof of affine.containment_interval
affine.containment_interval proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.ean_in_ebi
affine.ean_in_ebi proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.epn_app

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 44) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 6) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 39) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 51) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 35) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 51) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 3, column 38) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 3, column 52) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.epn_app.

 Assuming TCCs not generated (at line 1, column 14) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 38) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 44) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_app proved in 3.71 real, 3.71 cpu seconds
Rerunning proof of affine.containment_add
affine.containment_add proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.next_idx_add_ac_ac
#<defstep-entry @ #x1013d3ad02>


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.next_idx_add_ac_ac.

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(null, cdr(pds2), (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(cdr(pds1), null, (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_ol(map_error(null, cdr(pds2), (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_ol(map_error(cdr(pds1), null, (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(null, cdr(pds2), (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(cdr(pds1), null, (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(cdr(pds1), pds2, (+)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 7) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(cdr(pds1), pds2, (+)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.next_idx_add_ac_ac..

 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_idx(map_error(pds1, cdr(pds2), (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(pds1, cdr(pds2), (+)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_idx(map_error(pds1, cdr(pds2), (+)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (+), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.next_idx_add_ac_ac proved in 6.75 real, 6.75 cpu seconds
Rerunning proof of affine.idxs_ac_add_ac_ac
affine.idxs_ac_add_ac_ac proved in 2.36 real, 2.36 cpu seconds
Rerunning proof of affine.epn_spp

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 56) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 6) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 62) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 442, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 469, column 39) for
  null_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 47) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 63) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 4, column 27) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 4, column 48) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 6, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 6, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 8, column 27) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 8, column 48) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 49) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 65) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 3, column 52) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 3, column 66) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.epn_spp.

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 14) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 14) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 5, column 14) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 6, column 25) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 6, column 46) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 31) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 34) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 60) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_spp proved in 3.84 real, 3.84 cpu seconds
Rerunning proof of affine.containment_sub
affine.containment_sub proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.next_idx_sub_ac_ac
#<defstep-entry @ #x1012631522>


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(null, cdr(pds2), (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]

Proving affine.next_idx_sub_ac_ac.

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(cdr(pds1), null, (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_ol(map_error(null, cdr(pds2), (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_ol(map_error(cdr(pds1), null, (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(null, cdr(pds2), (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "last_idx(map_error(cdr(pds1), null, (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 58) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(cdr(pds1), pds2, (-)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(cdr(pds1), pds2, (-)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 47) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_idx(map_error(pds1, cdr(pds2), (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.next_idx_sub_ac_ac..

 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_ol(map_error(pds1, cdr(pds2), (-)))`1":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 2, column 47) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 In input "1 + last_idx(map_error(pds1, cdr(pds2), (-)))":
  added conversion restrict
                       [[numfield, numfield], [BaseType, BaseType],
                        numfield]
             
  to (-), converting
     [[numfield, numfield] -> numfield]
  to [[BaseType, BaseType] -> numfield]


 Assuming TCCs not generated (at line 47, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.next_idx_sub_ac_ac proved in 6.14 real, 6.14 cpu seconds
Rerunning proof of affine.idxs_ac_sub_ac_ac
affine.idxs_ac_sub_ac_ac proved in 2.36 real, 2.36 cpu seconds
Rerunning proof of affine.car_mul_s_ac_TCC1
affine.car_mul_s_ac_TCC1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.car_mul_s_ac_TCC2
affine.car_mul_s_ac_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.car_mul_s_ac

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 667, column 18) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
;;; GC:;;; Finished GC

affine.car_mul_s_ac proved in -0.47 real, -0.47 cpu seconds
Rerunning proof of affine.containment_mul_s

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.containment_mul_s proved in 0.94 real, 0.94 cpu seconds
Rerunning proof of affine.containment_add_s
affine.containment_add_s proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.neg_pd_TCC1
affine.neg_pd_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.neg_pd_TCC2
affine.neg_pd_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.neg_pd_TCC3
affine.neg_pd_TCC3 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.neg_pd_TCC4
affine.neg_pd_TCC4 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine.neg_pd_TCC5
affine.neg_pd_TCC5 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine.containment_neg

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.containment_neg proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine.next_idx_neg_ac

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.next_idx_neg_ac proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine.idxs_ac_neg_ac

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.idxs_ac_neg_ac proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine.mult_pd_pd_TCC1
affine.mult_pd_pd_TCC1 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine.mult_pd_pd_TCC2
affine.mult_pd_pd_TCC2 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.mult_pd_pd_TCC3
affine.mult_pd_pd_TCC3 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.mult_pd_pd_TCC4
affine.mult_pd_pd_TCC4 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.mult_pd_pd_TCC5
affine.mult_pd_pd_TCC5 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_1_TCC1
affine.mult_pd_pd_preserves_order_1_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_1

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 736, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 737, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 737, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 738, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 739, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (3) than subproofs (5)
affine.mult_pd_pd_preserves_order_1 proved in 0.39 real, 0.39 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_2_TCC1
affine.mult_pd_pd_preserves_order_2_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_2

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 742, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 743, column 46) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 743, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 744, column 10) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 745, column 42) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (3) than subproofs (5)
affine.mult_pd_pd_preserves_order_2 proved in 0.40 real, 0.40 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_3_TCC1
affine.mult_pd_pd_preserves_order_3_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.mult_pd_pd_preserves_order_3

 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 6) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 749, column 29) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 40) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 54) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 750, column 10) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 14) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 751, column 30) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 36) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 752, column 50) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.mult_pd_pd_preserves_order_3.

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mult_pd_pd_preserves_order_3 proved in 4.77 real, 4.77 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__null_nnull_TCC1
affine.mult_pd_pd_last_bound__null_nnull_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__null_nnull_TCC2
affine.mult_pd_pd_last_bound__null_nnull_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__null_nnull

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 758, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 759, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mult_pd_pd_last_bound__null_nnull proved in 0.45 real, 0.45 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__nnull_null_TCC1
affine.mult_pd_pd_last_bound__nnull_null_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__nnull_null_TCC2
affine.mult_pd_pd_last_bound__nnull_null_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound__nnull_null

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 52) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mult_pd_pd_last_bound__nnull_null proved in 0.45 real, 0.45 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound_TCC1
affine.mult_pd_pd_last_bound_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound_TCC2
affine.mult_pd_pd_last_bound_TCC2 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound_TCC3
affine.mult_pd_pd_last_bound_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.mult_pd_pd_last_bound

 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 33) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 54) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 38) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 54) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 764, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 765, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 771, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 54) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 54) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 57) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 57) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 57) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 44) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 18) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 56) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.mult_pd_pd_last_bound.

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 51) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 59) for
  last_ol[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mult_pd_pd_last_bound proved in 3.50 real, 3.50 cpu seconds
Rerunning proof of affine.search_ET_on_add_ET_TCC1
affine.search_ET_on_add_ET_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.search_ET_on_add_ET
affine.search_ET_on_add_ET proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.search_ET_car
affine.search_ET_car proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.search_ET_not_car_TCC1
affine.search_ET_not_car_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.search_ET_not_car
affine.search_ET_not_car proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine.search_ET_in_mult_pd_pd

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 33) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 86) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 49) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 57) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.search_ET_in_mult_pd_pd proved in 2.61 real, 2.61 cpu seconds
Rerunning proof of affine.sum_of_modules_TCC1
affine.sum_of_modules_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.sum_of_modules_nnreal

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.sum_of_modules_nnreal proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.sum_of_modules_append
affine.sum_of_modules_append proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.first_noises_TCC1
affine.first_noises_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.first_noises_upd

 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.first_noises_upd proved in 0.38 real, 0.38 cpu seconds
Rerunning proof of affine.first_ET_TCC1
affine.first_ET_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.last_first_ET
affine.last_first_ET proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine.last_first_noises

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 822, column 10) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.last_first_noises proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine.gnbi_lt_first_idem

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.gnbi_lt_first_idem proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine.first_noises_zero_prop
affine.first_noises_zero_prop proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.first_error_terms_recursive_def_TCC1
affine.first_error_terms_recursive_def_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.first_error_terms_recursive_def_TCC2
affine.first_error_terms_recursive_def_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.first_error_terms_recursive_def_TCC3
affine.first_error_terms_recursive_def_TCC3 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.first_error_terms_recursive_def_TCC4

 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.first_error_terms_recursive_def_TCC4 proved in 0.28 real, 0.28 cpu seconds
Rerunning proof of affine.first_error_terms_recursive_def

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 835, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 832, column 23) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 4, column 84) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 69) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 7, column 79) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 9, column 84) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 7, column 69) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.first_error_terms_recursive_def proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine.first_noises_recursive_def_TCC1
affine.first_noises_recursive_def_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.first_noises_recursive_def_TCC2
affine.first_noises_recursive_def_TCC2 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.first_noises_recursive_def_TCC3
affine.first_noises_recursive_def_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.first_noises_recursive_def_TCC4

 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.first_noises_recursive_def_TCC4 proved in 0.29 real, 0.29 cpu seconds
Rerunning proof of affine.first_noises_recursive_def

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 839, column 25) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 4, column 84) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 2, column 69) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 7, column 79) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 9, column 84) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 7, column 69) for
  append_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 20) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 1) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 In input "(ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
     (cdr[[nat, nzEpsilon]](N_))
  AND
  every[[nat, nzEpsilon]]
      (LAMBDA (t: [nat, real]): (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0)
      (first[nzEpsilon](cdr[[nat, nzEpsilon]](N_), n))
   AND
   ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
       (first[nzEpsilon](cdr[[nat, nzEpsilon]](N_), n))
    AND
    (null?[[nat, nzEpsilon]]
         (first[nzEpsilon](cdr[[nat, nzEpsilon]](N_), n))
      OR
      lt_idx[nzEpsilon]
          (car[[nat, nzEpsilon]](N_),
           car[[nat, nzEpsilon]]
               (first[nzEpsilon](cdr[[nat, nzEpsilon]](N_), n)))))":
  added conversion restrict[[nat, real], [nat, nzEpsilon], boolean]
             
  to LAMBDA (t: [nat, real]):
       (-1 <= t`2 AND t`2 <= 1) AND t`2 /= 0, converting
     [[nat, real] -> boolean]
  to [[nat, nzEpsilon] -> boolean]


 Assuming TCCs not generated (at line 8, column 3) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 2, column 6) for
  cons_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  ordered_list?[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol[[nat, nzEpsilon], lt_idx[nzEpsilon]]
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.first_noises_recursive_def proved in 1.68 real, 1.68 cpu seconds
Rerunning proof of affine.eval_pd_noise_incremental

 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.eval_pd_noise_incremental proved in 1.00 real, 1.00 cpu seconds
Rerunning proof of affine.partial_eval_pd_noise_upper_bound
***Warning: Fewer subgoals (1) than subproofs (2)

 Assuming TCCs not generated (at line 835, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 835, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 835, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

***Warning: Fewer subgoals (2) than subproofs (3)
affine.partial_eval_pd_noise_upper_bound proved in 1.72 real, 1.72 cpu seconds
Rerunning proof of affine.mult_ac_ac_TCC1

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.mult_ac_ac_TCC1 proved in 0.33 real, 0.33 cpu seconds
Rerunning proof of affine.mul_noise_value_TCC1
affine.mul_noise_value_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.som_inc

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.som_inc proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine.eval_pd_noise_inc_TCC1
affine.eval_pd_noise_inc_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.eval_pd_noise_inc
affine.eval_pd_noise_inc proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine.eval_ac_noise_inc
affine.eval_ac_noise_inc proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine.eval_ac_noise_mult_inc
affine.eval_ac_noise_mult_inc proved in 0.40 real, 0.40 cpu seconds
Rerunning proof of affine.sum_of_modules_decomp
affine.sum_of_modules_decomp proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine.mul_ac_ac_noise_incremental_bound
Proving affine.mul_ac_ac_noise_incremental_bound.
Proving affine.mul_ac_ac_noise_incremental_bound..
Proving affine.mul_ac_ac_noise_incremental_bound...
affine.mul_ac_ac_noise_incremental_bound proved in 10.26 real, 10.26 cpu seconds
Rerunning proof of affine.mul_noise_value_is_Epsilon
Proving affine.mul_noise_value_is_Epsilon.
affine.mul_noise_value_is_Epsilon proved in 3.61 real, 3.61 cpu seconds
Rerunning proof of affine.som_zero

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 915, column 34) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.som_zero proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.epn_aET__nnull_pds_TCC1
affine.epn_aET__nnull_pds_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.epn_aET__nnull_pds

 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_aET__nnull_pds proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine.epn_mpp_null_pds1
***Warning: Fewer subgoals (1) than subproofs (2)
***Warning: Fewer subgoals (1) than subproofs (2)
***Warning: Fewer subgoals (1) than subproofs (2)

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_mpp_null_pds1 proved in 0.99 real, 0.99 cpu seconds
Rerunning proof of affine.epn_mpp_null_pds2
***Warning: Fewer subgoals (1) than subproofs (2)
***Warning: Fewer subgoals (1) than subproofs (2)
***Warning: Fewer subgoals (1) than subproofs (2)

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_mpp_null_pds2 proved in 1.00 real, 1.00 cpu seconds
Rerunning proof of affine.epn_over_last_is_zero_TCC1
affine.epn_over_last_is_zero_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine.epn_over_last_is_zero

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 932, column 29) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.epn_over_last_is_zero proved in 0.28 real, 0.28 cpu seconds
Rerunning proof of affine.epn_up_to_last_idx_pd_is_zero_TCC1
affine.epn_up_to_last_idx_pd_is_zero_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine.epn_up_to_last_idx_pd_is_zero

 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_up_to_last_idx_pd_is_zero proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine.epn_trim_noise

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 842, column 10) for
  cons_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]


 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.epn_trim_noise proved in 0.57 real, 0.57 cpu seconds
Rerunning proof of affine.epn_mult_first

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 720, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 19, column 27) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.epn_mult_first.

 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine.epn_mult_first..

 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 19) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 723, column 39) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 46, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 17) for
  car_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 726, column 37) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 47, column 33) for
  cons_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  structures@ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.epn_mult_first proved in 8.22 real, 8.22 cpu seconds
Rerunning proof of affine.mpp_first_N
affine.mpp_first_N proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine.containment_mul

 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 772, column 16) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.containment_mul proved in 1.73 real, 1.73 cpu seconds
Rerunning proof of affine.next_idx_mult_ac_ac_TCC1
affine.next_idx_mult_ac_ac_TCC1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine.next_idx_mult_ac_ac

 Assuming TCCs not generated (at line 1, column 9) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 23) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 23) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 23) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 23) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 4) for
  last_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 9) for
  append_ol
as they are subsumed by the TCCs generated (at line 23, column 22) for
  ordered_list[[nat, nzBaseType], lt_idx[nzBaseType]]

affine.next_idx_mult_ac_ac proved in 0.69 real, 0.69 cpu seconds
Rerunning proof of affine.idxs_ac_mult_ac_ac
#<defstep-entry @ #x1015f77c82>

#<defstep-entry @ #x10139adbe2>

affine.idxs_ac_mult_ac_ac proved in 2.31 real, 2.31 cpu seconds
Rerunning proof of affine.null_ol?_empty_noise
affine.null_ol?_empty_noise proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.var_ac_noise_unf3_TCC1
affine.var_ac_noise_unf3_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine.var_ac_noise_unf3

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.var_ac_noise_unf3 proved in 0.83 real, 0.83 cpu seconds
Rerunning proof of affine.gnbi_extend_N_unf

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.gnbi_extend_N_unf proved in 0.26 real, 0.26 cpu seconds
Rerunning proof of affine.gnbi_extend_N_trivial
affine.gnbi_extend_N_trivial proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine.first__extend_N_TCC1
affine.first__extend_N_TCC1 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine.first__extend_N

 Assuming TCCs not generated (at line 1, column 0) for
  null_ol?
as they are subsumed by the TCCs generated (at line 120, column 16) for
  ordered_list[[nat, nzEpsilon], lt_idx[nzEpsilon]]

affine.first__extend_N proved in 0.43 real, 0.43 cpu seconds
Rerunning proof of affine.Half_pd_TCC1
affine.Half_pd_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine.Half_pd_TCC2
affine.Half_pd_TCC2 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine.Half_pd_TCC3
affine.Half_pd_TCC3 proved in 0.05 real, 0.05 cpu seconds
Proving theory affine_bandb_boolexpr
Rerunning proof of affine_bandb_boolexpr.evaluate_TCC1
affine_bandb_boolexpr.evaluate_TCC1 proved in 0.59 real, 0.59 cpu seconds
Rerunning proof of affine_bandb_boolexpr.bandb_boolexpr_soundness
Using instance
  structures@branch_and_bound
      [BoolExpr, IntervalOutput, ProperBox, nat].b_and_b_id_sound

 LET/WHERE variable bev at line 1, col 5 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable err at line 2, col 5 is given type
  boolean from its value expression.


 LET/WHERE variable bet at line 3, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 6, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 6, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 4, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable err at line 2, col 7 is given type
  boolean from its value expression.


 LET/WHERE variable bet at line 3, col 7 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 6, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 6, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 4, col 7 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable err at line 1, col 5 is given type
  boolean from its value expression.


 LET/WHERE variable bet at line 2, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 5, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 5, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 3, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bet at line 2, col 7 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 5, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 5, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 3, col 7 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bet at line 1, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 4, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 4, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 2, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 4, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 4, col 20 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 2, col 7 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 3, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 3, col 18 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bef at line 1, col 5 is given type
  Maybe[bool] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 2, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.


 LET/WHERE variable bm at line 10, col 11 is given type
  Maybe[Maybe[bool]] from its value expression.

Using instance
  structures@array2list[real].list2array_sound
Using instance
  structures@array2list[real].list2array_sound
Using instance
  structures@array2list[real].list2array_sound
Proving affine_bandb_boolexpr.bandb_boolexpr_soundness.
affine_bandb_boolexpr.bandb_boolexpr_soundness proved in 3.56 real, 3.56 cpu seconds
Proving theory affine_boolexpr
Rerunning proof of affine_boolexpr.beval_vs_BCONST_TCC1
affine_boolexpr.beval_vs_BCONST_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BNOT_TCC1
affine_boolexpr.beval_vs_BNOT_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BAND_TCC1
affine_boolexpr.beval_vs_BAND_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BOR_TCC1
affine_boolexpr.beval_vs_BOR_TCC1 proved in 0.71 real, 0.71 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BIMPLIES_TCC1
affine_boolexpr.beval_vs_BIMPLIES_TCC1 proved in 0.70 real, 0.70 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BINCLUDES_TCC1
affine_boolexpr.beval_vs_BINCLUDES_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BREL_TCC1
affine_boolexpr.beval_vs_BREL_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BLETIN_RealExpr_ini_TCC1
affine_boolexpr.beval_vs_BLETIN_RealExpr_ini_TCC1 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BLETIN_RealExpr_TCC1;;; GC:;;; Finished GC

affine_boolexpr.beval_vs_BLETIN_RealExpr_TCC1 proved in 7.56 real, 7.56 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BLETIN_BoolExpr_TCC1
affine_boolexpr.beval_vs_BLETIN_BoolExpr_TCC1 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BITE_TCC1
affine_boolexpr.beval_vs_BITE_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BITE_TCC2
affine_boolexpr.beval_vs_BITE_TCC2 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_boolexpr.beval_vs_BITE_TCC3
affine_boolexpr.beval_vs_BITE_TCC3 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_boolexpr.first_noise_idx_available_box_TCC1
affine_boolexpr.first_noise_idx_available_box_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.mk_CDBB_TCC1
affine_boolexpr.mk_CDBB_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.mk_CDBB_TCC2
affine_boolexpr.mk_CDBB_TCC2 proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BCONST_TCC1
affine_boolexpr.BEval_Box_BCONST_TCC1 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BCONST_TCC2
affine_boolexpr.BEval_Box_BCONST_TCC2 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BNOT_TCC1
affine_boolexpr.BEval_Box_BNOT_TCC1 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BNOT_TCC2
affine_boolexpr.BEval_Box_BNOT_TCC2 proved in 0.20 real, 0.20 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BNOT_TCC3
affine_boolexpr.BEval_Box_BNOT_TCC3 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.mk_result_TCC1
affine_boolexpr.mk_result_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC1
affine_boolexpr.BEval_Box_BAND_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC2
affine_boolexpr.BEval_Box_BAND_TCC2 proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC3
affine_boolexpr.BEval_Box_BAND_TCC3 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC4
affine_boolexpr.BEval_Box_BAND_TCC4 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC5
affine_boolexpr.BEval_Box_BAND_TCC5 proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC6
affine_boolexpr.BEval_Box_BAND_TCC6 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC7
affine_boolexpr.BEval_Box_BAND_TCC7 proved in 0.21 real, 0.21 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_TCC8
affine_boolexpr.BEval_Box_BAND_TCC8 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC1
affine_boolexpr.BEval_Box_BOR_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC2
affine_boolexpr.BEval_Box_BOR_TCC2 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC3
affine_boolexpr.BEval_Box_BOR_TCC3 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC4
affine_boolexpr.BEval_Box_BOR_TCC4 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC5
affine_boolexpr.BEval_Box_BOR_TCC5 proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC6
affine_boolexpr.BEval_Box_BOR_TCC6 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_TCC7
affine_boolexpr.BEval_Box_BOR_TCC7 proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC1
affine_boolexpr.BEval_Box_BIMPLIES_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC2
affine_boolexpr.BEval_Box_BIMPLIES_TCC2 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC3
affine_boolexpr.BEval_Box_BIMPLIES_TCC3 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC4
affine_boolexpr.BEval_Box_BIMPLIES_TCC4 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC5
affine_boolexpr.BEval_Box_BIMPLIES_TCC5 proved in 0.26 real, 0.26 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC6
affine_boolexpr.BEval_Box_BIMPLIES_TCC6 proved in 0.22 real, 0.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_TCC7
affine_boolexpr.BEval_Box_BIMPLIES_TCC7 proved in 0.23 real, 0.23 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC1
affine_boolexpr.BEval_Box_BINCLUDES_TCC1 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC2
affine_boolexpr.BEval_Box_BINCLUDES_TCC2 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC3
affine_boolexpr.BEval_Box_BINCLUDES_TCC3 proved in 1.13 real, 1.13 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC4
affine_boolexpr.BEval_Box_BINCLUDES_TCC4 proved in 0.59 real, 0.59 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC5
affine_boolexpr.BEval_Box_BINCLUDES_TCC5 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC6
affine_boolexpr.BEval_Box_BINCLUDES_TCC6 proved in 1.47 real, 1.47 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC7
affine_boolexpr.BEval_Box_BINCLUDES_TCC7 proved in 0.60 real, 0.60 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC8
affine_boolexpr.BEval_Box_BINCLUDES_TCC8 proved in 0.51 real, 0.51 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC9
affine_boolexpr.BEval_Box_BINCLUDES_TCC9 proved in 1.26 real, 1.26 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC10
affine_boolexpr.BEval_Box_BINCLUDES_TCC10 proved in 0.59 real, 0.59 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC11
affine_boolexpr.BEval_Box_BINCLUDES_TCC11 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC12
affine_boolexpr.BEval_Box_BINCLUDES_TCC12 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BINCLUDES_TCC13
affine_boolexpr.BEval_Box_BINCLUDES_TCC13 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC1
affine_boolexpr.BEval_Box_BREL_TCC1 proved in 0.51 real, 0.51 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC2
affine_boolexpr.BEval_Box_BREL_TCC2 proved in 0.95 real, 0.95 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC3
affine_boolexpr.BEval_Box_BREL_TCC3 proved in 0.99 real, 0.99 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC4
affine_boolexpr.BEval_Box_BREL_TCC4 proved in 1.42 real, 1.42 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC5
affine_boolexpr.BEval_Box_BREL_TCC5 proved in 1.04 real, 1.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC6
affine_boolexpr.BEval_Box_BREL_TCC6 proved in 2.12 real, 2.12 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC7
affine_boolexpr.BEval_Box_BREL_TCC7 proved in 1.32 real, 1.32 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC8
affine_boolexpr.BEval_Box_BREL_TCC8 proved in 1.04 real, 1.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC9
affine_boolexpr.BEval_Box_BREL_TCC9 proved in 2.19 real, 2.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC10
affine_boolexpr.BEval_Box_BREL_TCC10 proved in 1.18 real, 1.18 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC11
affine_boolexpr.BEval_Box_BREL_TCC11 proved in 1.04 real, 1.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC12
affine_boolexpr.BEval_Box_BREL_TCC12 proved in 1.01 real, 1.01 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC13
affine_boolexpr.BEval_Box_BREL_TCC13 proved in 1.24 real, 1.24 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC14
affine_boolexpr.BEval_Box_BREL_TCC14 proved in 1.05 real, 1.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC15
affine_boolexpr.BEval_Box_BREL_TCC15 proved in 1.01 real, 1.01 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC16
affine_boolexpr.BEval_Box_BREL_TCC16 proved in 1.18 real, 1.18 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC17
affine_boolexpr.BEval_Box_BREL_TCC17 proved in 1.05 real, 1.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC18
affine_boolexpr.BEval_Box_BREL_TCC18 proved in 2.19 real, 2.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC19
affine_boolexpr.BEval_Box_BREL_TCC19 proved in 1.19 real, 1.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC20
affine_boolexpr.BEval_Box_BREL_TCC20 proved in 1.05 real, 1.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC21
affine_boolexpr.BEval_Box_BREL_TCC21 proved in 2.19 real, 2.19 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC22
affine_boolexpr.BEval_Box_BREL_TCC22 proved in 1.22 real, 1.22 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC23
affine_boolexpr.BEval_Box_BREL_TCC23 proved in 0.20 real, 0.20 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC24
affine_boolexpr.BEval_Box_BREL_TCC24 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BREL_TCC25
affine_boolexpr.BEval_Box_BREL_TCC25 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC1
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC1 proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC2
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC2 proved in 0.62 real, 0.62 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC3
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC3 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC4
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC4 proved in 0.91 real, 0.91 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC5
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC5 proved in 0.59 real, 0.59 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC6
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC6 proved in 0.58 real, 0.58 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC7
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC7 proved in 0.47 real, 0.47 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC8
affine_boolexpr.BEval_Box_BLETIN_RealExpr_ini_TCC8 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_RealExpr_TCC1
affine_boolexpr.BEval_Box_BLETIN_RealExpr_TCC1 proved in 1.08 real, 1.08 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC1
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC1 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC2
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC2 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC3
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC3 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC4
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC4 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC5
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC5 proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC6
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_merge1_TCC6 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC1
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC1 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC2
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC2 proved in 0.27 real, 0.27 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC3
affine_boolexpr.BEval_Box_BLETIN_BoolExpr_TCC3 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_merge2_TCC1
affine_boolexpr.BEval_Box_BITE_merge2_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_merge2_TCC2
affine_boolexpr.BEval_Box_BITE_merge2_TCC2 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_merge2_TCC3
affine_boolexpr.BEval_Box_BITE_merge2_TCC3 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_merge2_TCC4
affine_boolexpr.BEval_Box_BITE_merge2_TCC4 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_TCC1
affine_boolexpr.BEval_Box_BITE_TCC1 proved in 0.49 real, 0.49 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_TCC2
affine_boolexpr.BEval_Box_BITE_TCC2 proved in 0.46 real, 0.46 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_TCC3
affine_boolexpr.BEval_Box_BITE_TCC3 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_TCC4
affine_boolexpr.BEval_Box_BITE_TCC4 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BITE_TCC5
affine_boolexpr.BEval_Box_BITE_TCC5 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_TCC1
affine_boolexpr.BEval_Box_TCC1 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_TCC2
affine_boolexpr.BEval_Box_TCC2 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_TCC3
affine_boolexpr.BEval_Box_TCC3 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_boolexpr.p_inclusion_pre_TCC1
affine_boolexpr.p_inclusion_pre_TCC1 proved in 0.38 real, 0.38 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_preservation_TCC1
affine_boolexpr.BEval_Box_BAND_preservation_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BAND_preservation
affine_boolexpr.BEval_Box_BAND_preservation proved in 1.78 real, 1.78 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BOR_preservation
Proving affine_boolexpr.BEval_Box_BOR_preservation.
affine_boolexpr.BEval_Box_BOR_preservation proved in 6.92 real, 6.92 cpu seconds
Rerunning proof of affine_boolexpr.BEval_Box_BIMPLIES_preservation
affine_boolexpr.BEval_Box_BIMPLIES_preservation proved in 1.79 real, 1.79 cpu seconds
Rerunning proof of affine_boolexpr.BINCLUDES_pre_preservation_TCC1
affine_boolexpr.BINCLUDES_pre_preservation_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BINCLUDES_pre_preservation_TCC2
affine_boolexpr.BINCLUDES_pre_preservation_TCC2 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BINCLUDES_pre_preservation_TCC3
affine_boolexpr.BINCLUDES_pre_preservation_TCC3 proved in 2.04 real, 2.04 cpu seconds
Rerunning proof of affine_boolexpr.BINCLUDES_pre_preservation
Proving affine_boolexpr.BINCLUDES_pre_preservation.
Proving affine_boolexpr.BINCLUDES_pre_preservation..
affine_boolexpr.BINCLUDES_pre_preservation proved in 32.45 real, 32.45 cpu seconds
Rerunning proof of affine_boolexpr.BREL_pre_preservation;;; GC:;;; Finished GC

Proving affine_boolexpr.BREL_pre_preservation.
Proving affine_boolexpr.BREL_pre_preservation..
affine_boolexpr.BREL_pre_preservation proved in 24.08 real, 24.08 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation_TCC1
affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation_TCC1 proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation

 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]


 In input "val(fct0)`vs WITH [(val(fct0)`n) := eval(blet, val(fct0)`vs, val(fct0)`n)]
    (i)
 = eval(blet, val(fct0)`vs, val(fct0)`n)":
  added conversion val2some[ContextData_beval_vs]
             
  to fct0, converting
     ContextData_beval_vs
  to Maybe[ContextData_beval_vs]

Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation.
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation..
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation...
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation....
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation.....
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation......
Proving affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation.......
affine_boolexpr.BLETIN_RealExpr_ini_pre_preservation proved in 48.49 real, 48.49 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_RealExpr_pre_preservation_TCC1
affine_boolexpr.BLETIN_RealExpr_pre_preservation_TCC1 proved in 0.76 real, 0.76 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_RealExpr_pre_preservation
affine_boolexpr.BLETIN_RealExpr_pre_preservation proved in 2.16 real, 2.16 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC1
affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC1 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC2
affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC2 proved in 0.41 real, 0.41 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC3
affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC3 proved in 0.76 real, 0.76 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC4
affine_boolexpr.BLETIN_BoolExpr_pre_preservation_TCC4 proved in 1.26 real, 1.26 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_pre_preservation
affine_boolexpr.BLETIN_BoolExpr_pre_preservation proved in 0.71 real, 0.71 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation_TCC1
affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation_TCC1 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation_TCC2
affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation_TCC2 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation
Proving affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation.
affine_boolexpr.BLETIN_BoolExpr_merge1_pre_preservation proved in 3.63 real, 3.63 cpu seconds
Rerunning proof of affine_boolexpr.BITE_preservation_TCC1
affine_boolexpr.BITE_preservation_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_boolexpr.BITE_preservation
affine_boolexpr.BITE_preservation proved in 1.22 real, 1.22 cpu seconds
Rerunning proof of affine_boolexpr.beval___TCC1
affine_boolexpr.beval___TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_boolexpr.BEval__TCC1
affine_boolexpr.BEval__TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_boolexpr.BEval_inclusion____
Proving affine_boolexpr.BEval_inclusion____.
Proving affine_boolexpr.BEval_inclusion____..
affine_boolexpr.BEval_inclusion____ proved in 23.08 real, 23.08 cpu seconds
Rerunning proof of affine_boolexpr.BEval_inclusion_Proper____
affine_boolexpr.BEval_inclusion_Proper____ proved in 0.04 real, 0.04 cpu seconds
Proving theory affine_expr_Eval
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC1
affine_expr_Eval.Eval_wCache_TCC1 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC2
affine_expr_Eval.Eval_wCache_TCC2 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC3
affine_expr_Eval.Eval_wCache_TCC3 proved in 0.52 real, 0.52 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC4
affine_expr_Eval.Eval_wCache_TCC4 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC5
affine_expr_Eval.Eval_wCache_TCC5 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC6
affine_expr_Eval.Eval_wCache_TCC6 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC7
affine_expr_Eval.Eval_wCache_TCC7 proved in 0.55 real, 0.55 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC8
affine_expr_Eval.Eval_wCache_TCC8 proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC9
affine_expr_Eval.Eval_wCache_TCC9 proved in 0.50 real, 0.50 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC10
affine_expr_Eval.Eval_wCache_TCC10 proved in 0.14 real, 0.14 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC11
affine_expr_Eval.Eval_wCache_TCC11 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC12
affine_expr_Eval.Eval_wCache_TCC12 proved in 0.56 real, 0.56 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC13
affine_expr_Eval.Eval_wCache_TCC13 proved in 0.33 real, 0.33 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC14
affine_expr_Eval.Eval_wCache_TCC14 proved in 0.56 real, 0.56 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC15
affine_expr_Eval.Eval_wCache_TCC15 proved in 0.66 real, 0.66 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC16
affine_expr_Eval.Eval_wCache_TCC16 proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC17
affine_expr_Eval.Eval_wCache_TCC17 proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC18
affine_expr_Eval.Eval_wCache_TCC18 proved in 0.47 real, 0.47 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC19
affine_expr_Eval.Eval_wCache_TCC19 proved in 0.73 real, 0.73 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC20
affine_expr_Eval.Eval_wCache_TCC20 proved in 0.64 real, 0.64 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC21
affine_expr_Eval.Eval_wCache_TCC21 proved in 1.11 real, 1.11 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC22
affine_expr_Eval.Eval_wCache_TCC22 proved in 1.20 real, 1.20 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC23
affine_expr_Eval.Eval_wCache_TCC23 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC24
affine_expr_Eval.Eval_wCache_TCC24 proved in 1.66 real, 1.66 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC25
#<defstep-entry @ #x1016715df2>

#<defstep-entry @ #x101694d932>

affine_expr_Eval.Eval_wCache_TCC25 proved in 1.61 real, 1.61 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC26
affine_expr_Eval.Eval_wCache_TCC26 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC27
affine_expr_Eval.Eval_wCache_TCC27 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC28
affine_expr_Eval.Eval_wCache_TCC28 proved in 0.56 real, 0.56 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC29
affine_expr_Eval.Eval_wCache_TCC29 proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC30
affine_expr_Eval.Eval_wCache_TCC30 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC31
affine_expr_Eval.Eval_wCache_TCC31 proved in 0.56 real, 0.56 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC32
affine_expr_Eval.Eval_wCache_TCC32 proved in 0.69 real, 0.69 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC33
affine_expr_Eval.Eval_wCache_TCC33 proved in 0.76 real, 0.76 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC34
affine_expr_Eval.Eval_wCache_TCC34 proved in 0.77 real, 0.77 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC35
affine_expr_Eval.Eval_wCache_TCC35 proved in 0.51 real, 0.51 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC36
affine_expr_Eval.Eval_wCache_TCC36 proved in 0.75 real, 0.75 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC37
affine_expr_Eval.Eval_wCache_TCC37 proved in 0.63 real, 0.63 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC38
affine_expr_Eval.Eval_wCache_TCC38 proved in 1.15 real, 1.15 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC39
affine_expr_Eval.Eval_wCache_TCC39 proved in 1.22 real, 1.22 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC40
affine_expr_Eval.Eval_wCache_TCC40 proved in 1.32 real, 1.32 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC41
affine_expr_Eval.Eval_wCache_TCC41 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC42
affine_expr_Eval.Eval_wCache_TCC42 proved in 2.67 real, 2.67 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC43
#<defstep-entry @ #x1013a5b332>

#<defstep-entry @ #x1013c92c32>

affine_expr_Eval.Eval_wCache_TCC43 proved in 1.84 real, 1.84 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC44
affine_expr_Eval.Eval_wCache_TCC44 proved in 0.48 real, 0.48 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC45
affine_expr_Eval.Eval_wCache_TCC45 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC46
affine_expr_Eval.Eval_wCache_TCC46 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC47
affine_expr_Eval.Eval_wCache_TCC47 proved in 0.34 real, 0.34 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC48
affine_expr_Eval.Eval_wCache_TCC48 proved in 0.21 real, 0.21 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC49
affine_expr_Eval.Eval_wCache_TCC49 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC50
affine_expr_Eval.Eval_wCache_TCC50 proved in 2.72 real, 2.72 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC51
affine_expr_Eval.Eval_wCache_TCC51 proved in 0.89 real, 0.89 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC52
affine_expr_Eval.Eval_wCache_TCC52 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC53
affine_expr_Eval.Eval_wCache_TCC53 proved in 1.56 real, 1.56 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC54;;; GC:;;; Finished GC

Proving affine_expr_Eval.Eval_wCache_TCC54.
affine_expr_Eval.Eval_wCache_TCC54 proved in 15.59 real, 15.59 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC55
affine_expr_Eval.Eval_wCache_TCC55 proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC56
affine_expr_Eval.Eval_wCache_TCC56 proved in 4.22 real, 4.22 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC57
affine_expr_Eval.Eval_wCache_TCC57 proved in 6.96 real, 6.96 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC58
affine_expr_Eval.Eval_wCache_TCC58 proved in 0.71 real, 0.71 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC59

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]

affine_expr_Eval.Eval_wCache_TCC59 proved in 1.81 real, 1.81 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC60
affine_expr_Eval.Eval_wCache_TCC60 proved in 0.41 real, 0.41 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC61
affine_expr_Eval.Eval_wCache_TCC61 proved in 0.48 real, 0.48 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC62
affine_expr_Eval.Eval_wCache_TCC62 proved in 0.27 real, 0.27 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC63
affine_expr_Eval.Eval_wCache_TCC63 proved in 0.23 real, 0.23 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC64

 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]

Proving affine_expr_Eval.Eval_wCache_TCC64.

 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "take_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]

Proving affine_expr_Eval.Eval_wCache_TCC64..
affine_expr_Eval.Eval_wCache_TCC64 proved in 7.52 real, 7.52 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC65

 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "take_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]

Proving affine_expr_Eval.Eval_wCache_TCC65.
Proving affine_expr_Eval.Eval_wCache_TCC65..
affine_expr_Eval.Eval_wCache_TCC65 proved in 8.17 real, 8.17 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC66
Proving affine_expr_Eval.Eval_wCache_TCC66.
Proving affine_expr_Eval.Eval_wCache_TCC66..
affine_expr_Eval.Eval_wCache_TCC66 proved in 8.95 real, 8.95 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC67
affine_expr_Eval.Eval_wCache_TCC67 proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC68
affine_expr_Eval.Eval_wCache_TCC68 proved in 1.79 real, 1.79 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC69
affine_expr_Eval.Eval_wCache_TCC69 proved in 1.90 real, 1.90 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC70
affine_expr_Eval.Eval_wCache_TCC70 proved in 1.94 real, 1.94 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC71
affine_expr_Eval.Eval_wCache_TCC71 proved in 1.58 real, 1.58 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC72
affine_expr_Eval.Eval_wCache_TCC72 proved in 0.48 real, 0.48 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC73
affine_expr_Eval.Eval_wCache_TCC73 proved in 0.53 real, 0.53 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC74
affine_expr_Eval.Eval_wCache_TCC74 proved in 0.63 real, 0.63 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC75
affine_expr_Eval.Eval_wCache_TCC75 proved in 0.70 real, 0.70 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC76
affine_expr_Eval.Eval_wCache_TCC76 proved in 0.45 real, 0.45 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC77
affine_expr_Eval.Eval_wCache_TCC77 proved in 0.46 real, 0.46 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC78
affine_expr_Eval.Eval_wCache_TCC78 proved in 0.69 real, 0.69 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC79
affine_expr_Eval.Eval_wCache_TCC79 proved in 0.60 real, 0.60 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC80
affine_expr_Eval.Eval_wCache_TCC80 proved in 1.05 real, 1.05 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC81
affine_expr_Eval.Eval_wCache_TCC81 proved in 1.14 real, 1.14 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC82
#<defstep-entry @ #x10145d9d92>

#<defstep-entry @ #x10148114e2>

affine_expr_Eval.Eval_wCache_TCC82 proved in 0.72 real, 0.72 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC83
#<defstep-entry @ #x101472eaf2>

#<defstep-entry @ #x10149662d2>

affine_expr_Eval.Eval_wCache_TCC83 proved in 1.71 real, 1.71 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC84
#<defstep-entry @ #x101323d9f2>

#<defstep-entry @ #x10134751d2>

affine_expr_Eval.Eval_wCache_TCC84 proved in 1.55 real, 1.55 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC85
affine_expr_Eval.Eval_wCache_TCC85 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC86
affine_expr_Eval.Eval_wCache_TCC86 proved in 0.53 real, 0.53 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC87
affine_expr_Eval.Eval_wCache_TCC87 proved in 0.62 real, 0.62 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC88
affine_expr_Eval.Eval_wCache_TCC88 proved in 0.69 real, 0.69 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC89
#<defstep-entry @ #x10167affb2>

affine_expr_Eval.Eval_wCache_TCC89 proved in 0.47 real, 0.47 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC90
#<defstep-entry @ #x10143dba62>

affine_expr_Eval.Eval_wCache_TCC90 proved in 1.18 real, 1.18 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC91
#<defstep-entry @ #x1015e09442>

affine_expr_Eval.Eval_wCache_TCC91 proved in 1.11 real, 1.11 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC92
affine_expr_Eval.Eval_wCache_TCC92 proved in 0.11 real, 0.11 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_wCache_TCC93
affine_expr_Eval.Eval_wCache_TCC93 proved in 0.45 real, 0.45 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_TCC1
affine_expr_Eval.Eval_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_TCC2
affine_expr_Eval.Eval_TCC2 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval.Eval_TCC3
affine_expr_Eval.Eval_TCC3 proved in 0.47 real, 0.47 cpu seconds
Rerunning proof of affine_expr_Eval.RE2AC_EvalwCache_eq
#<defstep-entry @ #x101425f372>
;;; GC:;;; Finished GC

Proving affine_expr_Eval.RE2AC_EvalwCache_eq.
Proving affine_expr_Eval.RE2AC_EvalwCache_eq..
Proving affine_expr_Eval.RE2AC_EvalwCache_eq...
Proving affine_expr_Eval.RE2AC_EvalwCache_eq....
Proving affine_expr_Eval.RE2AC_EvalwCache_eq.....
Proving affine_expr_Eval.RE2AC_EvalwCache_eq......
Proving affine_expr_Eval.RE2AC_EvalwCache_eq.......
Proving affine_expr_Eval.RE2AC_EvalwCache_eq........
Proving affine_expr_Eval.RE2AC_EvalwCache_eq.........
Proving affine_expr_Eval.RE2AC_EvalwCache_eq..........
Proving affine_expr_Eval.RE2AC_EvalwCache_eq...........
Proving affine_expr_Eval.RE2AC_EvalwCache_eq............
Proving affine_expr_Eval.RE2AC_EvalwCache_eq.............
affine_expr_Eval.RE2AC_EvalwCache_eq proved in 67.43 real, 67.43 cpu seconds
Rerunning proof of affine_expr_Eval.EvalwCache_inclusion__TCC1
affine_expr_Eval.EvalwCache_inclusion__TCC1 proved in 0.51 real, 0.51 cpu seconds
Rerunning proof of affine_expr_Eval.EvalwCache_inclusion_
affine_expr_Eval.EvalwCache_inclusion_ proved in 0.45 real, 0.45 cpu seconds
Rerunning proof of affine_expr_Eval.EvalwCache_inclusion
Proving affine_expr_Eval.EvalwCache_inclusion.
affine_expr_Eval.EvalwCache_inclusion proved in 4.58 real, 4.58 cpu seconds
Proving theory affine_expr_Eval_fnd
Rerunning proof of affine_expr_Eval_fnd.CacheData_TCC1
affine_expr_Eval_fnd.CacheData_TCC1 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.CacheData_correct?_TCC1
affine_expr_Eval_fnd.CacheData_correct?_TCC1 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.CacheData_correct?_TCC2
affine_expr_Eval_fnd.CacheData_correct?_TCC2 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.CacheData_correct?_TCC3
affine_expr_Eval_fnd.CacheData_correct?_TCC3 proved in 0.41 real, 0.41 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.CacheData_correct?_inclusion
affine_expr_Eval_fnd.CacheData_correct?_inclusion proved in 0.21 real, 0.21 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.correct_cache?_TCC1
affine_expr_Eval_fnd.correct_cache?_TCC1 proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.correct_cache?_alt_def
affine_expr_Eval_fnd.correct_cache?_alt_def proved in 0.73 real, 0.73 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_powvar_correct
affine_expr_Eval_fnd.cache_powvar_correct proved in 0.72 real, 0.72 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.compatible_pairs_on?_TCC1
affine_expr_Eval_fnd.compatible_pairs_on?_TCC1 proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.compatible_pairs_on?_TCC2
affine_expr_Eval_fnd.compatible_pairs_on?_TCC2 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.compatible_pairs_on?_TCC3
affine_expr_Eval_fnd.compatible_pairs_on?_TCC3 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_TCC1
affine_expr_Eval_fnd.cache_get_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_TCC2
affine_expr_Eval_fnd.cache_get_TCC2 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_TCC3
affine_expr_Eval_fnd.cache_get_TCC3 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_TCC4
affine_expr_Eval_fnd.cache_get_TCC4 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC1
affine_expr_Eval_fnd.cache_get_powvar_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC2
affine_expr_Eval_fnd.cache_get_powvar_TCC2 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC3
affine_expr_Eval_fnd.cache_get_powvar_TCC3 proved in 0.24 real, 0.24 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC4
affine_expr_Eval_fnd.cache_get_powvar_TCC4 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC5
affine_expr_Eval_fnd.cache_get_powvar_TCC5 proved in 0.25 real, 0.25 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC6
affine_expr_Eval_fnd.cache_get_powvar_TCC6 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC7
affine_expr_Eval_fnd.cache_get_powvar_TCC7 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC8;;; GC:;;; Finished GC

affine_expr_Eval_fnd.cache_get_powvar_TCC8 proved in -0.80 real, -0.80 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC9
affine_expr_Eval_fnd.cache_get_powvar_TCC9 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC10
affine_expr_Eval_fnd.cache_get_powvar_TCC10 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC11
affine_expr_Eval_fnd.cache_get_powvar_TCC11 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC12
affine_expr_Eval_fnd.cache_get_powvar_TCC12 proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_get_powvar_TCC13
affine_expr_Eval_fnd.cache_get_powvar_TCC13 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cache_powvar_correct_result
affine_expr_Eval_fnd.cache_powvar_correct_result proved in 0.85 real, 0.85 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC1
affine_expr_Eval_fnd.RE2AC_TCC1 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC2
affine_expr_Eval_fnd.RE2AC_TCC2 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC3
affine_expr_Eval_fnd.RE2AC_TCC3 proved in 0.46 real, 0.46 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC4
affine_expr_Eval_fnd.RE2AC_TCC4 proved in 0.75 real, 0.75 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC5
affine_expr_Eval_fnd.RE2AC_TCC5 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC6
affine_expr_Eval_fnd.RE2AC_TCC6 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC7
affine_expr_Eval_fnd.RE2AC_TCC7 proved in 0.70 real, 0.70 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC8
affine_expr_Eval_fnd.RE2AC_TCC8 proved in 0.57 real, 0.57 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC9
affine_expr_Eval_fnd.RE2AC_TCC9 proved in 2.15 real, 2.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC10
affine_expr_Eval_fnd.RE2AC_TCC10 proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC11
affine_expr_Eval_fnd.RE2AC_TCC11 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC12
affine_expr_Eval_fnd.RE2AC_TCC12 proved in 0.67 real, 0.67 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC13
affine_expr_Eval_fnd.RE2AC_TCC13 proved in 0.56 real, 0.56 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC14
affine_expr_Eval_fnd.RE2AC_TCC14 proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC15
affine_expr_Eval_fnd.RE2AC_TCC15 proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC16
affine_expr_Eval_fnd.RE2AC_TCC16 proved in 0.32 real, 0.32 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC17
affine_expr_Eval_fnd.RE2AC_TCC17 proved in 0.84 real, 0.84 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC18
affine_expr_Eval_fnd.RE2AC_TCC18 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC19
#<defstep-entry @ #x10140c76b2>

#<defstep-entry @ #x10142fdba2>

affine_expr_Eval_fnd.RE2AC_TCC19 proved in 0.49 real, 0.49 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC20
affine_expr_Eval_fnd.RE2AC_TCC20 proved in 2.30 real, 2.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC21
affine_expr_Eval_fnd.RE2AC_TCC21 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC22
affine_expr_Eval_fnd.RE2AC_TCC22 proved in 1.15 real, 1.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC23
affine_expr_Eval_fnd.RE2AC_TCC23 proved in 0.20 real, 0.20 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC24
affine_expr_Eval_fnd.RE2AC_TCC24 proved in 1.39 real, 1.39 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC25
#<defstep-entry @ #x1015ff81a2>

#<defstep-entry @ #x101622ee52>

affine_expr_Eval_fnd.RE2AC_TCC25 proved in 2.80 real, 2.80 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC26
affine_expr_Eval_fnd.RE2AC_TCC26 proved in 0.30 real, 0.30 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC27
affine_expr_Eval_fnd.RE2AC_TCC27 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC28
affine_expr_Eval_fnd.RE2AC_TCC28 proved in 0.66 real, 0.66 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC29
affine_expr_Eval_fnd.RE2AC_TCC29 proved in 0.64 real, 0.64 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC30
affine_expr_Eval_fnd.RE2AC_TCC30 proved in 0.33 real, 0.33 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC31
affine_expr_Eval_fnd.RE2AC_TCC31 proved in 0.32 real, 0.32 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC32
affine_expr_Eval_fnd.RE2AC_TCC32 proved in 0.69 real, 0.69 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC33
affine_expr_Eval_fnd.RE2AC_TCC33 proved in 0.72 real, 0.72 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC34
affine_expr_Eval_fnd.RE2AC_TCC34 proved in 0.72 real, 0.72 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC35
affine_expr_Eval_fnd.RE2AC_TCC35 proved in 0.36 real, 0.36 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC36
affine_expr_Eval_fnd.RE2AC_TCC36 proved in 0.75 real, 0.75 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC37
affine_expr_Eval_fnd.RE2AC_TCC37 proved in 0.44 real, 0.44 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC38
affine_expr_Eval_fnd.RE2AC_TCC38 proved in 0.37 real, 0.37 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC39
affine_expr_Eval_fnd.RE2AC_TCC39 proved in 1.19 real, 1.19 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC40
affine_expr_Eval_fnd.RE2AC_TCC40 proved in 0.93 real, 0.93 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC41
affine_expr_Eval_fnd.RE2AC_TCC41 proved in 0.44 real, 0.44 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC42
affine_expr_Eval_fnd.RE2AC_TCC42 proved in 2.35 real, 2.35 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC43
#<defstep-entry @ #x101697a252>

#<defstep-entry @ #x1016bb0b92>

Proving affine_expr_Eval_fnd.RE2AC_TCC43.
Proving affine_expr_Eval_fnd.RE2AC_TCC43..
Proving affine_expr_Eval_fnd.RE2AC_TCC43...
Proving affine_expr_Eval_fnd.RE2AC_TCC43....

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_expr_Eval_fnd.RE2AC_TCC43 proved in 13.78 real, 13.78 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC44
affine_expr_Eval_fnd.RE2AC_TCC44 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC45
affine_expr_Eval_fnd.RE2AC_TCC45 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC46
affine_expr_Eval_fnd.RE2AC_TCC46 proved in 1.62 real, 1.62 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC47
affine_expr_Eval_fnd.RE2AC_TCC47 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC48
affine_expr_Eval_fnd.RE2AC_TCC48 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC49
affine_expr_Eval_fnd.RE2AC_TCC49 proved in 1.45 real, 1.45 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC50
Proving affine_expr_Eval_fnd.RE2AC_TCC50.
Proving affine_expr_Eval_fnd.RE2AC_TCC50..
Proving affine_expr_Eval_fnd.RE2AC_TCC50...
Proving affine_expr_Eval_fnd.RE2AC_TCC50....
Proving affine_expr_Eval_fnd.RE2AC_TCC50.....
Proving affine_expr_Eval_fnd.RE2AC_TCC50......
Proving affine_expr_Eval_fnd.RE2AC_TCC50.......
Proving affine_expr_Eval_fnd.RE2AC_TCC50........
Proving affine_expr_Eval_fnd.RE2AC_TCC50.........
Proving affine_expr_Eval_fnd.RE2AC_TCC50..........
Proving affine_expr_Eval_fnd.RE2AC_TCC50...........
Proving affine_expr_Eval_fnd.RE2AC_TCC50............
affine_expr_Eval_fnd.RE2AC_TCC50 proved in 44.58 real, 44.58 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC51
affine_expr_Eval_fnd.RE2AC_TCC51 proved in 0.23 real, 0.23 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC52
affine_expr_Eval_fnd.RE2AC_TCC52 proved in 1.57 real, 1.57 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC53
Proving affine_expr_Eval_fnd.RE2AC_TCC53.;;; GC:;;; Finished GC

affine_expr_Eval_fnd.RE2AC_TCC53 proved in 5.81 real, 5.81 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC54
affine_expr_Eval_fnd.RE2AC_TCC54 proved in 0.74 real, 0.74 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC55
affine_expr_Eval_fnd.RE2AC_TCC55 proved in 4.24 real, 4.24 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC56
Proving affine_expr_Eval_fnd.RE2AC_TCC56.
affine_expr_Eval_fnd.RE2AC_TCC56 proved in 5.54 real, 5.54 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC57
affine_expr_Eval_fnd.RE2AC_TCC57 proved in 1.70 real, 1.70 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC58
Proving affine_expr_Eval_fnd.RE2AC_TCC58.
Proving affine_expr_Eval_fnd.RE2AC_TCC58..

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_expr_Eval_fnd.RE2AC_TCC58 proved in 6.61 real, 6.61 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC59
affine_expr_Eval_fnd.RE2AC_TCC59 proved in 0.55 real, 0.55 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC60
affine_expr_Eval_fnd.RE2AC_TCC60 proved in 0.31 real, 0.31 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC61
affine_expr_Eval_fnd.RE2AC_TCC61 proved in 0.28 real, 0.28 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC62
affine_expr_Eval_fnd.RE2AC_TCC62 proved in 0.15 real, 0.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC63

 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  append_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  first_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC63.

 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 63, column 27) for
  first_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 87, column 2) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "take_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC63..
affine_expr_Eval_fnd.RE2AC_TCC63 proved in 8.56 real, 8.56 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC64

 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "append_ol[nat, <]
    (take[nat](pownoises, opn(val(cached)`1) - 2 + 1),
     nats(nextfreeidx, newoff - 1))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  append_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "last_ol[nat, <](take[nat](pownoises, opn(val[CacheData](cached)`1) - 1)) =
 nth(pownoises, opn(val[CacheData](cached)`1) - 2)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "first_ol[nat, <](nats(nextfreeidx, newoff - 1)) = nextfreeidx":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  first_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC64.

 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 63, column 27) for
  first_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 87, column 2) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 1, column 0) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 63, column 27) for
  first_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 63, column 12) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 87, column 2) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "take_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC64..
Proving affine_expr_Eval_fnd.RE2AC_TCC64...
Proving affine_expr_Eval_fnd.RE2AC_TCC64....
Proving affine_expr_Eval_fnd.RE2AC_TCC64.....
Proving affine_expr_Eval_fnd.RE2AC_TCC64......
affine_expr_Eval_fnd.RE2AC_TCC64 proved in 29.07 real, 29.07 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC65
Proving affine_expr_Eval_fnd.RE2AC_TCC65.
Proving affine_expr_Eval_fnd.RE2AC_TCC65..

 In input "take_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC65...
Proving affine_expr_Eval_fnd.RE2AC_TCC65....

 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 143, column 29) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 87, column 2) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 143, column 29) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC65.....
Proving affine_expr_Eval_fnd.RE2AC_TCC65......

 In input "last_take_nth[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 143, column 29) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 87, column 2) for
  last_ol
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 143, column 29) for
  last_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC65.......

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.RE2AC_TCC65........
Proving affine_expr_Eval_fnd.RE2AC_TCC65.........
Proving affine_expr_Eval_fnd.RE2AC_TCC65..........
Proving affine_expr_Eval_fnd.RE2AC_TCC65...........

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC65............
Proving affine_expr_Eval_fnd.RE2AC_TCC65.............
Proving affine_expr_Eval_fnd.RE2AC_TCC65..............
affine_expr_Eval_fnd.RE2AC_TCC65 proved in 67.51 real, 67.51 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC66
affine_expr_Eval_fnd.RE2AC_TCC66 proved in 0.52 real, 0.52 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC67
affine_expr_Eval_fnd.RE2AC_TCC67 proved in 0.18 real, 0.18 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC68
affine_expr_Eval_fnd.RE2AC_TCC68 proved in 0.27 real, 0.27 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC69
affine_expr_Eval_fnd.RE2AC_TCC69 proved in 1.98 real, 1.98 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC70

 Assuming TCCs not generated (at line 44, column 18) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 44, column 44) for
  null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 45, column 24) for
  car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 44, column 18) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 44, column 44) for
  null_ol?[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 45, column 24) for
  car_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

Proving affine_expr_Eval_fnd.RE2AC_TCC70.
Proving affine_expr_Eval_fnd.RE2AC_TCC70..
Proving affine_expr_Eval_fnd.RE2AC_TCC70...
Proving affine_expr_Eval_fnd.RE2AC_TCC70....
Proving affine_expr_Eval_fnd.RE2AC_TCC70.....

 In input "nth_ol[nat,<]":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 16, column 7) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_expr_Eval_fnd.RE2AC_TCC70 proved in 22.67 real, 22.67 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC71
affine_expr_Eval_fnd.RE2AC_TCC71 proved in 1.48 real, 1.48 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC72
affine_expr_Eval_fnd.RE2AC_TCC72 proved in 1.52 real, 1.52 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC73
affine_expr_Eval_fnd.RE2AC_TCC73 proved in 0.55 real, 0.55 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC74
affine_expr_Eval_fnd.RE2AC_TCC74 proved in 0.68 real, 0.68 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC75
affine_expr_Eval_fnd.RE2AC_TCC75 proved in 0.32 real, 0.32 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC76
affine_expr_Eval_fnd.RE2AC_TCC76 proved in 0.35 real, 0.35 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC77
affine_expr_Eval_fnd.RE2AC_TCC77 proved in 0.72 real, 0.72 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC78
affine_expr_Eval_fnd.RE2AC_TCC78 proved in 1.62 real, 1.62 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC79
affine_expr_Eval_fnd.RE2AC_TCC79 proved in 0.79 real, 0.79 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC80
affine_expr_Eval_fnd.RE2AC_TCC80 proved in 1.15 real, 1.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC81
affine_expr_Eval_fnd.RE2AC_TCC81 proved in 0.19 real, 0.19 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC82
#<defstep-entry @ #x101717a6d2>

#<defstep-entry @ #x10173b1782>

affine_expr_Eval_fnd.RE2AC_TCC82 proved in 1.41 real, 1.41 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC83
#<defstep-entry @ #x1017dde502>

#<defstep-entry @ #x1013ece582>

Proving affine_expr_Eval_fnd.RE2AC_TCC83.
affine_expr_Eval_fnd.RE2AC_TCC83 proved in 2.85 real, 2.85 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC84
affine_expr_Eval_fnd.RE2AC_TCC84 proved in 0.29 real, 0.29 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC85
affine_expr_Eval_fnd.RE2AC_TCC85 proved in 1.53 real, 1.53 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC86
affine_expr_Eval_fnd.RE2AC_TCC86 proved in 0.53 real, 0.53 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC87
affine_expr_Eval_fnd.RE2AC_TCC87 proved in 0.81 real, 0.81 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC88
affine_expr_Eval_fnd.RE2AC_TCC88 proved in 0.29 real, 0.29 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC89
#<defstep-entry @ #x1014e42602>

affine_expr_Eval_fnd.RE2AC_TCC89 proved in 1.06 real, 1.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC90
#<defstep-entry @ #x1014f67ba2>

affine_expr_Eval_fnd.RE2AC_TCC90 proved in 2.15 real, 2.15 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC91
affine_expr_Eval_fnd.RE2AC_TCC91 proved in 0.28 real, 0.28 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_TCC92
affine_expr_Eval_fnd.RE2AC_TCC92 proved in 2.17 real, 2.17 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_RE2AC_preservation_TCC1
affine_expr_Eval_fnd.iacniig_RE2AC_preservation_TCC1 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_RE2AC_preservation_TCC2
affine_expr_Eval_fnd.iacniig_RE2AC_preservation_TCC2 proved in 0.20 real, 0.20 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_RE2AC_preservation
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation.;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation..
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation...
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation....
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation.....
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation......
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation.......
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation........
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation.........
Proving affine_expr_Eval_fnd.iacniig_RE2AC_preservation..........
affine_expr_Eval_fnd.iacniig_RE2AC_preservation proved in 37.76 real, 37.76 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_box_growing_preservation_TCC1
affine_expr_Eval_fnd.iacniig_box_growing_preservation_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_box_growing_preservation_TCC2
affine_expr_Eval_fnd.iacniig_box_growing_preservation_TCC2 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.iacniig_box_growing_preservation
affine_expr_Eval_fnd.iacniig_box_growing_preservation proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.nicniig_RE2AC_preservation
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation.
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation..
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation...
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation....
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation.....;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation......
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation.......
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation........
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation.........
Proving affine_expr_Eval_fnd.nicniig_RE2AC_preservation..........
affine_expr_Eval_fnd.nicniig_RE2AC_preservation proved in 44.92 real, 44.92 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.nicniig_box_growing_preservation_TCC1
affine_expr_Eval_fnd.nicniig_box_growing_preservation_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.nicniig_box_growing_preservation
affine_expr_Eval_fnd.nicniig_box_growing_preservation proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.vrcib_RE2AC_preservation
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation.
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation..
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation...
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation....
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation.....
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation......;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation.......
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation........
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation.........
Proving affine_expr_Eval_fnd.vrcib_RE2AC_preservation..........
affine_expr_Eval_fnd.vrcib_RE2AC_preservation proved in 57.02 real, 57.02 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.vrcib_box_growing_preservation
affine_expr_Eval_fnd.vrcib_box_growing_preservation proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_box_vs_expansion_TCC1
affine_expr_Eval_fnd.RE2AC_box_vs_expansion_TCC1 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_box_vs_expansion_TCC2
affine_expr_Eval_fnd.RE2AC_box_vs_expansion_TCC2 proved in 3.38 real, 3.38 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.RE2AC_box_vs_expansion
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion.
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion..
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion...;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion....
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion.....
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion......
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion.......
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion........;;; GC:;;; Finished GC

Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion.........
Proving affine_expr_Eval_fnd.RE2AC_box_vs_expansion..........
affine_expr_Eval_fnd.RE2AC_box_vs_expansion proved in 131.74 real, 131.74 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cp_box_vs_expansion_TCC1
affine_expr_Eval_fnd.cp_box_vs_expansion_TCC1 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cp_box_vs_expansion_TCC2
affine_expr_Eval_fnd.cp_box_vs_expansion_TCC2 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_expr_Eval_fnd.cp_box_vs_expansion
Proving affine_expr_Eval_fnd.cp_box_vs_expansion.
Proving affine_expr_Eval_fnd.cp_box_vs_expansion..
affine_expr_Eval_fnd.cp_box_vs_expansion proved in 6.48 real, 6.48 cpu seconds
Proving theory affine_expr
Rerunning proof of affine_expr.powvar?_TCC1
affine_expr.powvar?_TCC1 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_expr.varidx_powvar_TCC1
affine_expr.varidx_powvar_TCC1 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_expr.varidx_powvar_TCC2
affine_expr.varidx_powvar_TCC2 proved in 0.06 real, 0.06 cpu seconds
Proving theory affine_box
Rerunning proof of affine_box.last_idx_in_box_TCC1
affine_box.last_idx_in_box_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_box.last_idx_box
affine_box.last_idx_box proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_box.uptol_TCC1
affine_box.uptol_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_box.uptol_TCC2
affine_box.uptol_TCC2 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_box.uptol_TCC3
affine_box.uptol_TCC3 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_box.uptol_decl_def;;; GC:;;; Finished GC

affine_box.uptol_decl_def proved in -0.82 real, -0.82 cpu seconds
Rerunning proof of affine_box.uptol_decl_def_rl
affine_box.uptol_decl_def_rl proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_box.idxs_box_membership
affine_box.idxs_box_membership proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_box.idxs_box_nth
affine_box.idxs_box_nth proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_box.restrict_box_preserves_eval
affine_box.restrict_box_preserves_eval proved in 0.38 real, 0.38 cpu seconds
Rerunning proof of affine_box.restrict_box_alt_def
affine_box.restrict_box_alt_def proved in 1.17 real, 1.17 cpu seconds
Rerunning proof of affine_box.restrict_box_preserves_compbox
affine_box.restrict_box_preserves_compbox proved in 1.18 real, 1.18 cpu seconds
Rerunning proof of affine_box.compatibles_box_noises
affine_box.compatibles_box_noises proved in 0.43 real, 0.43 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC1
affine_box.vars_in_box_noise_rec_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC2
affine_box.vars_in_box_noise_rec_TCC2 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC3
affine_box.vars_in_box_noise_rec_TCC3 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC4
affine_box.vars_in_box_noise_rec_TCC4 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC5
affine_box.vars_in_box_noise_rec_TCC5 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise_rec_TCC6
Proving affine_box.vars_in_box_noise_rec_TCC6.
affine_box.vars_in_box_noise_rec_TCC6 proved in 3.75 real, 3.75 cpu seconds
Rerunning proof of affine_box.vars_in_box_noise
affine_box.vars_in_box_noise proved in 0.34 real, 0.34 cpu seconds
Rerunning proof of affine_box.vib_vibnoise
Proving affine_box.vib_vibnoise.
affine_box.vib_vibnoise proved in 3.84 real, 3.84 cpu seconds
Rerunning proof of affine_box.Inclusion?_TCC1
affine_box.Inclusion?_TCC1 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_box.Inclusion_trans
affine_box.Inclusion_trans proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_box.Lbbox_Inclusion
affine_box.Lbbox_Inclusion proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_box.Ubbox_Inclusion
affine_box.Ubbox_Inclusion proved in 0.06 real, 0.06 cpu seconds
Proving theory affine_pow
Rerunning proof of affine_pow.power_Epsilon_is_Epsilon_TCC1
affine_pow.power_Epsilon_is_Epsilon_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.power_Epsilon_is_Epsilon
affine_pow.power_Epsilon_is_Epsilon proved in 1.07 real, 1.07 cpu seconds
Rerunning proof of affine_pow.power_Epsilon_judg
affine_pow.power_Epsilon_judg proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC1
affine_pow.pow_var_pd_TCC1 proved in 0.13 real, 0.13 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC2
affine_pow.pow_var_pd_TCC2 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC3
affine_pow.pow_var_pd_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC4
affine_pow.pow_var_pd_TCC4 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC5
affine_pow.pow_var_pd_TCC5 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC6
affine_pow.pow_var_pd_TCC6 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC7
affine_pow.pow_var_pd_TCC7 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC8
affine_pow.pow_var_pd_TCC8 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC9
affine_pow.pow_var_pd_TCC9 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC10
affine_pow.pow_var_pd_TCC10 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC11
affine_pow.pow_var_pd_TCC11 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC12
affine_pow.pow_var_pd_TCC12 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC13
affine_pow.pow_var_pd_TCC13 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC14
affine_pow.pow_var_pd_TCC14 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC15
affine_pow.pow_var_pd_TCC15 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC16
affine_pow.pow_var_pd_TCC16 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC17
affine_pow.pow_var_pd_TCC17 proved in 0.16 real, 0.16 cpu seconds
Rerunning proof of affine_pow.pow_var_pd_TCC18
affine_pow.pow_var_pd_TCC18 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC1
affine_pow.pow_var_ac_TCC1 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC2
affine_pow.pow_var_ac_TCC2 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC3
affine_pow.pow_var_ac_TCC3 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC4
affine_pow.pow_var_ac_TCC4 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC5
affine_pow.pow_var_ac_TCC5 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC6
affine_pow.pow_var_ac_TCC6 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC7
affine_pow.pow_var_ac_TCC7 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC8
affine_pow.pow_var_ac_TCC8 proved in 0.10 real, 0.10 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC9
affine_pow.pow_var_ac_TCC9 proved in 0.03 real, 0.03 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC10
affine_pow.pow_var_ac_TCC10 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC11
affine_pow.pow_var_ac_TCC11 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC12
affine_pow.pow_var_ac_TCC12 proved in 0.29 real, 0.29 cpu seconds
Rerunning proof of affine_pow.pow_var_ac_TCC13
affine_pow.pow_var_ac_TCC13 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.nats_TCC1
affine_pow.nats_TCC1 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.nats_TCC2
affine_pow.nats_TCC2 proved in 0.12 real, 0.12 cpu seconds
Rerunning proof of affine_pow.nats_TCC3
affine_pow.nats_TCC3 proved in 0.05 real, 0.05 cpu seconds
Rerunning proof of affine_pow.nats_TCC4
affine_pow.nats_TCC4 proved in 0.01 real, 0.01 cpu seconds
Rerunning proof of affine_pow.nats_TCC5
affine_pow.nats_TCC5 proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_pow.nats_TCC6
affine_pow.nats_TCC6 proved in 0.17 real, 0.17 cpu seconds
Rerunning proof of affine_pow.member_nats
affine_pow.member_nats proved in 0.09 real, 0.09 cpu seconds
Rerunning proof of affine_pow.take_nats_TCC1
affine_pow.take_nats_TCC1 proved in 0.07 real, 0.07 cpu seconds
Rerunning proof of affine_pow.take_nats
affine_pow.take_nats proved in 1.97 real, 1.97 cpu seconds
Rerunning proof of affine_pow.next_idx_pow_var_ac_TCC1
affine_pow.next_idx_pow_var_ac_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_pow.next_idx_pow_var_ac

 Assuming TCCs not generated (at line 39, column 17) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 35) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 39, column 17) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 35) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 39, column 17) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 2, column 35) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 39, column 17) for
  cons_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]

Proving affine_pow.next_idx_pow_var_ac.
affine_pow.next_idx_pow_var_ac proved in 3.37 real, 3.37 cpu seconds
Rerunning proof of affine_pow.idxs_ac_pow_var_ac_TCC1
affine_pow.idxs_ac_pow_var_ac_TCC1 proved in 0.08 real, 0.08 cpu seconds
Rerunning proof of affine_pow.idxs_ac_pow_var_ac

 Assuming TCCs not generated (at line 2, column 71) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 2, column 71) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 2, column 71) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_pow.idxs_ac_pow_var_ac proved in 1.87 real, 1.87 cpu seconds
Rerunning proof of affine_pow.idxs_ac_pow_var_ac_2_TCC1
affine_pow.idxs_ac_pow_var_ac_2_TCC1 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_pow.idxs_ac_pow_var_ac_2

 In input "FORALL (step: nat):
  FORALL (idxs: ordered_list[nat, <])(k: subrange(2, power)):
    power - k = step AND
     length(idxs) > power - k AND
      car(idxs) >= next_idx(pd(Xa)) AND
       k <= power AND member(i, take[nat](idxs, power - k + 1))
     IMPLIES
     length(pd(Xa)) = 0 OR
      null?(idxs) OR
       cv(Xa) = 0 OR
        i = nth(pd(Xa), 0)`1 OR
         member(i,
                idxs_pd(pow_var_pd(cv(Xa), nth(pd(Xa), 0)`2, power, k,
                                   idxs)))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "FORALL (step: nat):
  FORALL (idxs: ordered_list[nat, <])(k: subrange(2, power)):
    power - k = step AND
     length(idxs) > power - k AND
      car(idxs) >= next_idx(pd(Xa)) AND
       k <= power AND member(i, take[nat](idxs, power - k + 1))
     IMPLIES
     length(pd(Xa)) = 0 OR
      null?(idxs) OR
       cv(Xa) = 0 OR
        i = nth(pd(Xa), 0)`1 OR
         member(i,
                idxs_pd(pow_var_pd(cv(Xa), nth(pd(Xa), 0)`2, power, k,
                                   idxs)))":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 23) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated (at line 1, column 23) for
  ordered_list[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 In input "cdr_ol[nat, <](idxs!1)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 In input "cdr_ol[nat, <](idxs!1)":
  added conversion restrict[[real, real], [nat, nat], boolean]
             
  to <, converting
     [[real, real] -> bool]
  to [[nat, nat] -> bool]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol[nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]


 Assuming TCCs not generated  for
  structures@ordered_list
      [nat, restrict[[real, real], [nat, nat], boolean](<)]
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[nat, restrict[[real, real], [nat, nat], boolean](<)]

affine_pow.idxs_ac_pow_var_ac_2 proved in 2.22 real, 2.22 cpu seconds
Rerunning proof of affine_pow.pow_var_compatible?_TCC1
affine_pow.pow_var_compatible?_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_pow.pow_var_compatible?_TCC2
affine_pow.pow_var_compatible?_TCC2 proved in 0.04 real, 0.04 cpu seconds
Rerunning proof of affine_pow.pow_var_compatible?_TCC3
affine_pow.pow_var_compatible?_TCC3 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_pow.containment_pow_var_ac_TCC1
affine_pow.containment_pow_var_ac_TCC1 proved in 0.06 real, 0.06 cpu seconds
Rerunning proof of affine_pow.containment_pow_var_ac_TCC2
affine_pow.containment_pow_var_ac_TCC2 proved in 0.02 real, 0.02 cpu seconds
Rerunning proof of affine_pow.containment_pow_var_ac

 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 302, column 31) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated (at line 1, column 0) for
  cdr_ol
as they are subsumed by the TCCs generated (at line 22, column 19) for
  ordered_list?[[nat, nzBaseType], lt_idx[nzBaseType]]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]


 Assuming TCCs not generated  for
  sigma
as they are subsumed by the TCCs generated (at line 25, column 12) for
  reals@sigma[nat]

Proving affine_pow.containment_pow_var_ac.