util: THEORY
BEGIN


    IMPORTING reals@abs_lems, reals@prelude_aux,
              vectors@vectors_3D, vectors@vectors_2D, vectors@vect_3D_2D,
              trig@to2pi, track_3D

    nnreal_lt_pi   : NONEMPTY_TYPE = {x:nnreal  | x < pi}   CONTAINING 0
    posreal_lt_pi  : NONEMPTY_TYPE = {x:posreal | x < pi}   CONTAINING pi/2
    nnreal_lt_pi2  : NONEMPTY_TYPE = {x:nnreal  | x < pi/2} CONTAINING 0
    posreal_lt_pi2 : NONEMPTY_TYPE = {x:posreal | x < pi/2} CONTAINING pi/4

    nnreal_le_pi   : NONEMPTY_TYPE = {x:nnreal  | x <= pi}   CONTAINING 0
    posreal_le_pi  : NONEMPTY_TYPE = {x:posreal | x <= pi}   CONTAINING pi
    nnreal_le_pi2  : NONEMPTY_TYPE = {x:nnreal  | x <= pi/2} CONTAINING 0
    posreal_le_pi2 : NONEMPTY_TYPE = {x:posreal | x <= pi/2} CONTAINING pi/2

    nnreal_le_2pi  : NONEMPTY_TYPE = {x:nnreal  | x <= 2*pi} CONTAINING 0
    nnreal_lt_2pi  : NONEMPTY_TYPE = {x:nnreal  | x < 2*pi} CONTAINING 0

 
     %% --- constants

    NaN: posreal	%% not a number
    INF: posreal	%% infinity
    gn : posreal	%% gravitational constant
    TURN_RIGHT: boolean = TRUE

    %% --- variables

    bank, speed: VAR posreal
    sbank, alpha, beta: VAR real
    k: VAR int

    %% --- to2pi functions

    to2pi_near_sep : LEMMA
      alpha < beta AND beta < alpha + 2*pi AND 
      alpha < 2*pi*floor(beta/(2*pi))
        IMPLIES 
      to2pi(beta)-to2pi(alpha) = (beta-alpha) - 2*pi

    to2pi_near_same : LEMMA
      alpha < beta AND beta < alpha + 2*pi AND
      2*pi*floor(beta/(2*pi)) <= alpha
        IMPLIES 
      to2pi(beta)-to2pi(alpha) = beta - alpha

    compassAngle(v: nzhVect3): nnreal_lt_2pi =
      to2pi(track(v))

    atan2_scal_lt2pi: LEMMA
      FORALL (k: posreal, a: nnreal_lt_2pi):
      atan2(k*cos(a), k*sin(a)) = a

    atan2_scal: LEMMA
      FORALL (k: posreal):
      atan2(k*cos(alpha), k*sin(alpha)) = to2pi(alpha)

    %% --- horizontal turns

    util_clockwise(alpha: real, beta: real): bool =
      LET a = to2pi(alpha) IN
      LET b = to2pi(beta) IN
      IF (abs(a-b) <= pi) THEN (b>=a)
      ELSE (a>b)
      ENDIF

    util_turnDelta(alpha: real, beta: real): nnreal_le_pi =
      LET a = to2pi(alpha) IN
      LET b = to2pi(beta) IN
      LET delta = abs(a-b) IN
      IF (delta<=pi) THEN delta 
      ELSE 2*pi-delta
      ENDIF

    cos_util_turnDelta: LEMMA
      cos(util_turnDelta(alpha,beta)) = cos(alpha-beta)

    sin_util_turnDelta: LEMMA
      LET V:Vect2 = (sin(alpha),cos(alpha)),
      	  W:Vect2 = (sin(beta),cos(beta)) IN
      sin(util_turnDelta(alpha,beta)) = abs(det(V,W))

    util_turnDelta(alpha: real, beta: real, turnRight: bool): nnreal_le_2pi =
      LET a  = to2pi(alpha) IN
      LET b  = to2pi(beta) IN
      LET td = util_turnDelta(alpha, beta) IN
      LET clkwise = util_clockwise(alpha, beta) IN
      IF (alpha=beta) THEN 0
      ELSIF (turnRight=clkwise) THEN td
      ELSE 2*pi - td
      ENDIF

    %% --- linear projections

   svpair : TYPE = [# pos : Vect3, vel : Vect3 #]

   nzh_svpair : TYPE = [# pos: Vect3, vel: nzhVect3 #]

 
   linear_pos(s: Vect3, v: Vect3, t: real): Vect3 =
      (# x:=s`x + v`x*t,
         y:=s`y + v`y*t,
         z:=s`z + v`z*t #)

    linear_pos(p: svpair, t: real): Vect3 = 
      (# x:=p`pos`x + p`vel`x*t,
         y:=p`pos`y + p`vel`y*t,
         z:=p`pos`z + p`vel`z*t #)

    mkAlt(s:Vect3,z:real): {vv:Vect3 | vect2(vv)=vect2(s) AND vv`z=z} =
      s WITH [z:=z]

    mkVs(v:Vect3,z:real): {vv:Vect3 | vect2(vv)=vect2(v) AND vv`z=z} =
      v WITH [z:=z]

    Vect3(w:Vect2,z:real): {vv:Vect3 | vect2(vv)=w AND vv`z=z} =
      (# x:= w`x,y:=w`y,z:=z #)

    Vect2(x,y:real): {vv:Vect2 | vv`x=x AND vv`y=y} =
      (# x:=x,y:=y #)

    % The ^() function in PVS requires a nonzero vector, while the hat
    % function in J does not. So to make this consistent the following hat
    % function is defined.

    Hat(w:Vect2): {v:Vect2 | (v=zero IFF w=zero) AND
    		  (w/=zero IFF (norm(v)=1 AND v=(1/norm(w))*w))} =
		  LET n = norm(w) IN
		  IF (n=0) THEN
		     zero
		  ELSE Vect2(w`x/n,w`y/n) ENDIF

    turnDelta(alpha: real, beta: real): nnreal_le_pi =
      LET a = to2pi(alpha),
          b = to2pi(beta),
          delta = abs(a-b) 
      IN
        IF (delta<=pi) THEN delta 
        ELSE 2*pi-delta
        ENDIF

    cos_turnDelta: LEMMA FORALL (alpha: real, beta: real): 
      cos(turnDelta(alpha,beta)) = cos(alpha-beta)

    sin_turnDelta: LEMMA FORALL (alpha: real, beta: real): 
      LET V:Vect2 = (sin(alpha),cos(alpha)),
      	  W:Vect2 = (sin(beta),cos(beta)) IN
      sin(turnDelta(alpha,beta)) = abs(det(V,W))

    topi(rad: real): real =
      LET r=to2pi(rad)
      IN
        IF (r > pi) THEN r - 2*pi
	ELSE r
	ENDIF

    topi2cont(rad: real): real =
      LET r=topi(rad)
      IN
        IF (r < -pi / 2) THEN -pi - r
	ELSIF (r < pi / 2) THEN r
	ELSE pi - r
	ENDIF

   asin_safe(x: real): real = 
     asin(max(-1.0,min(x,1.0)))

   acos_safe(x: real): real = 
     acos(max(-1.0,min(x,1.0)))

   atan2_safe(y: real, x: real): real =    
    IF (y = 0 AND x = 0) THEN 0.0
    ELSE atan2(x, y)                      %% PVS atan2 is (x,y) 
    ENDIF
  
   sqrt_safe(x: real): real  =
    sqrt(max(x, 0))

 
END util
