Velocity: THEORY
BEGIN

    IMPORTING vectors@vect_3D_2D,
	      trig@to2pi,
	      track

    Velocity: TYPE = Vect3

    toPi(r: nnreal_lt_2pi): {x:real | -pi <= x AND x <= pi} = 
	  IF r > pi THEN
             r-2*pi
	  ELSE 
	     r
	  ENDIF

    to_pi(x: real): {x:real | -pi <= x AND x <= pi} = 
   	  LET r = to2pi(x) IN 
            toPi(r)


    trk(v: Velocity): {x:real | -pi <= x AND x <= pi} =
        IF v`x = 0 AND v`y = 0 THEN 0 
        ELSE
          toPi(track(v))
        ENDIF

    gs(v: Velocity): nnreal = norm(vect2(v))

    vs(v: Velocity): real = v`z


    trk_is_pi2: LEMMA FORALL (v: Velocity, xx: posreal): 
       v`x = xx AND v`y = 0 IMPLIES trk(v) = pi/2

    trk_track: LEMMA FORALL (v: Velocity): vect2(v) /= vectors_2D.zero IMPLIES
       trk(v) = toPi(track(v))

    mkTrk(v:Velocity, trk:real): Velocity = 
      LET v1 = trkgs2vect(trk, gs(v)) IN
      (#x:= v1`x, 
        y:= v1`y,
        z:= v`z#)

END Velocity


