KinematicPlan: THEORY
BEGIN

   IMPORTING vectors@vectors_4D, structures@fseqs, NavPoint,
             finite_sets@finite_sets_minmax, finite_sets@finite_sets_below,
	     kinematics_turn,kinematics_gs_accel,
	     kinematics_vs_accel

 
   prePlan: TYPE = fseq[NavPoint]

   Plan: TYPE = {p: prePlan | FORALL (i,j: below[p`length]): i < j IMPLIES p(i)`t < p(j)`t}

   linear?(p: Plan): bool = FORALL (i: below[p`length]): p(i)`tcp = NONE

   plan_lin_ex1: (linear?) = (# length:=4,
     seq:=(LAMBDA (i:nat): IF i=0 THEN np_lin_ex1
     		  	   ELSIF i=1 THEN np_lin_ex2
			   ELSIF i=2 THEN np_lin_ex3
			   ELSIF i=3 THEN np_lin_ex4
			   ELSE default[NavPoint] ENDIF) #)

   getFirstTime(p:Plan): nnreal =
     IF p`length = 0 THEN 
       0 %empty plan
     ELSE
       p(0)`t
     ENDIF

   getLastTime(p:Plan): nnreal = 
     IF p`length = 0 THEN 
       0 %empty plan
     ELSE
       p(p`length-1)`t
     ENDIF

   % recursive definition
   % note the indexing variable n is 1 greater than what it is referring to (so 0 is "failure")
   % initial call should use n = p`length+1

   getSegment(p:Plan, t: real, n:below(p`length)): RECURSIVE {i:int |
     LET lastn = p`length-1, isvalidt = (lastn>=0 AND p(0)`t<=t AND t<=p(p`length-1)`t) IN
       ((NOT isvalidt) IMPLIES i=-1) AND
       (isvalidt IMPLIES (0<=i AND i<=n AND p(i)`t<=t AND
       		 	 FORALL (j:below(p`length)): (i<j AND j<=n)
			 	IMPLIES t<p(j)`t))} =
       IF NOT (p(0)`t<=t AND t<=p(p`length-1)`t) THEN -1
       ELSIF p`length<=0 THEN -1
       ELSIF p(n)`t<=t THEN n
       ELSE getSegment(p,t,n-1) ENDIF MEASURE n

   getSegment_test: LEMMA
     getSegment(plan_lin_ex1,126.8,plan_lin_ex1`length-1) = 2

   getSegment(p:Plan,t:real): int = IF p`length-1<0 THEN -1
   			      	    ELSE getSegment(p,t,p`length-1) ENDIF
         
   getSegment_def_found: LEMMA
     FORALL (p:Plan, t:real):
     LET n=p`length-1,i = getSegment(p, t) IN
            (i >= 0 IFF 
              (n>=0 AND 
	        EXISTS (j:below(length(p))):(j=n AND t=p(n)`t) OR (j<n AND p(j)`t<=t AND t<p(j+1)`t))) AND
	    (i >= 0 IMPLIES n>=0 AND ((i=n AND t=p(n)`t) OR (i<n AND p(i)`t<=t AND t<p(i+1)`t)))

   getSegment_at_tcp: LEMMA
     FORALL (p:Plan,i:below(length(p))): getSegment(p,p(i)`t) = i



   % Previous and next tcps of a given type

   eqOneTCPType?(tcp:TCPType)(ty1,ty2:TCPType): bool=
     tcp = ty1 OR tcp = ty2

   prevTCPType(p: Plan, current: int, ty1,ty2: TCPType): TYPE =
     {i: int | IF (i = -1) THEN 
     	          FORALL (k: int): 0 <= k AND k <= current AND current<p`length 
		  	     	   IMPLIES (NOT eqOneTCPType?(p(k)`tcp)(ty1,ty2))
               ELSE 0 <= i AND i<=current AND current<p`length 
	         AND eqOneTCPType?(p(i)`tcp)(ty1,ty2) AND 
                    FORALL (k: int): i < k AND k <= current IMPLIES 
		      NOT eqOneTCPType?(p(k)`tcp)(ty1,ty2) ENDIF}

   nextTCPType(p: Plan, current: int, ty1,ty2: TCPType): TYPE =
     {i: int | IF (i = -1) THEN 
     	          FORALL (k: int): 0<=current AND current <= k AND k <= p`length-1
		  	     	   IMPLIES (NOT eqOneTCPType?(p(k)`tcp)(ty1,ty2))
               ELSE current <= i AND i<=p`length-1 AND current>=0 
	         AND eqOneTCPType?(p(i)`tcp)(ty1,ty2) AND 
                    FORALL (k: int): current <= k AND k<i IMPLIES 
		      NOT eqOneTCPType?(p(k)`tcp)(ty1,ty2) ENDIF}

   prevTCP(p: Plan, current: int, ty1,ty2: TCPType): 
     RECURSIVE prevTCPType(p,current,ty1,ty2) =
          IF current<0 OR current>=p`length THEN -1
      	  ELSIF eqOneTCPType?(p(current)`tcp)(ty1,ty2) THEN current
	  ELSIF current=0 THEN -1
      	  ELSE prevTCP(p,current-1,ty1,ty2) ENDIF
	MEASURE max(current,0)

   nextTCP(p: Plan, current: int, ty1,ty2: TCPType): 
     RECURSIVE nextTCPType(p,current,ty1,ty2) =
          IF current<0 OR current>=p`length THEN -1
      	  ELSIF eqOneTCPType?(p(current)`tcp)(ty1,ty2) THEN current
	  ELSIF current=p`length-1 THEN -1
      	  ELSE nextTCP(p,current+1,ty1,ty2) ENDIF
	MEASURE max(p`length-1-current,0)

   prevTCP_test: LEMMA prevTCP(plan_lin_ex1,2,NONE,NONE) = 2

   nextTCP_test: LEMMA nextTCP(plan_lin_ex1,2,NONE,NONE) = 2

   nextVSCEnd(p:Plan,current:int):
     nextTCPType(p,current,EVSC,EVSC) =
     nextTCP(p,current,EVSC,EVSC)

   nextGSCEnd(p:Plan,current:int):
     nextTCPType(p,current,EGSC,EGSC) =
     nextTCP(p,current,EGSC,EGSC)

   prevBOT(p:Plan,current:int):
     prevTCPType(p,current,BOT,BOT) =
     prevTCP(p,current,BOT,BOT)

   prevBOTt(p:Plan,tt:real):
     prevTCPType(p,getSegment(p,tt),BOT,BOT) 
     = prevBOT(p,getSegment(p,tt))

   nextEOT(p:Plan,current:int):
     nextTCPType(p,current,EOT,EOT) =
     nextTCP(p,current,EOT,EOT)

   prevVSCBegin(p:Plan,current:int):
     prevTCPType(p,current,BVSC,BVSC) =
     prevTCP(p,current,BVSC,BVSC)

   prevVSCBegint(p:Plan,t:real):
     prevTCPType(p,getSegment(p,t),BVSC,BVSC) =
     prevTCP(p,getSegment(p,t),BVSC,BVSC)

   prevGSCBegin(p:Plan,current:int):
     prevTCPType(p,current,BGSC,BGSC) =
     prevTCP(p,current,BGSC,BGSC)

   % Can't overload these things with reals since ints are reals
   % and pvs won't know what we are talking about

   prevGSCBegint(p:Plan,t:real):
     prevTCPType(p,getSegment(p,t),BGSC,BGSC) =
     prevTCP(p,getSegment(p,t),BGSC,BGSC)

   % Well Formed Plan %

   isWellFormed(p:Plan): bool =
     FORALL (i:below(p`length)): LET np = p`seq(i) IN
       IF (isGSCBegin(np) AND nextGSCEnd(p,i)<0) THEN FALSE
       ELSIF (isGSCEnd(np) AND prevGSCBegin(p,i)<0) THEN FALSE
       ELSIF (isVSCBegin(np) AND nextVSCEnd(p,i)<0) THEN FALSE
       ELSIF (isVSCEnd(np) AND prevVSCBegin(p,i)<0) THEN FALSE
       ELSIF (isTurnBegin(np) AND nextEOT(p,i)<0) THEN FALSE
       ELSIF (isTurnEnd(np) AND prevBOT(p,i)<0) THEN FALSE
       ELSIF isGSC(np) THEN
          LET j = nextTCP(p,i,BOT,EOT) IN
	  IF (0<=j AND j<=nextGSCEnd(p,i)) THEN FALSE
	  ELSE TRUE ENDIF
       ELSE TRUE ENDIF

    inTurn(p:Plan,tt: real): bool =
      LET current = getSegment(p,tt),
      	  lastj   = prevTCP(p,current,BOT,EOT)
      IN IF (lastj<0 OR isTurnEnd(p(lastj))) THEN FALSE
      	 ELSE TRUE ENDIF

    turnRadius(p:Plan,t: real): real =
      IF inTurn(p,t) THEN
        LET bot = prevBOTt(p,t) IN
	turnRadius(p(bot))
      ELSE -1.0 ENDIF

    inGroundSpeedChange(p:Plan,t:real): bool =
      LET current = getSegment(p,t),
      	  lastj   = prevTCP(p,current,BGSC,EGSC)
      IN IF (lastj<0 OR isGSCEnd(p(lastj))) THEN FALSE
      	 ELSE TRUE ENDIF

    inVerticalSpeedChange(p:Plan,t:real): bool =
      LET current = getSegment(p,t),
      	  lastj = prevTCP(p,current,BVSC,EVSC)
      IN IF (lastj<0 OR isVSCEnd(p(lastj))) THEN FALSE
        ELSE TRUE ENDIF

    omega(np: TCP_NavPoint): real

    inTurnPrevBOT: LEMMA FORALL (p: Plan, i: below[p`length]):  inTurn(p,p(i)`t) IMPLIES prevBOT(p,i) >= 0

    gsAccel(p:Plan,t:real): real =
      IF inGroundSpeedChange(p,t) THEN
      	 LET b = prevGSCBegint(p,t) IN
	 p(b)`accel
      ELSE 0.0 ENDIF

    vsAccel(p:Plan,t:real): real =
      IF inVerticalSpeedChange(p,t) THEN
        LET b = prevVSCBegint(p,t) IN
	p(b)`accel
      ELSE 0.0 ENDIF

    % Find the horizontal (curved) distance between points i and i+1
    pathDistance(p: Plan, i: below[p`length]): nnreal = 
       IF p`length < 2 OR i+1 >= p`length  THEN 0
       ELSIF inTurn(p,p(i)`t) THEN
           LET
             BOT = prevBOT(p,i),
             R = turnRadius(p,p(i)`t),
             dt = p(i+1)`t - p(i)`t,
             alpha = omega(p(BOT))*dt
           IN 
               abs(alpha*R)          
       ELSE
            distanceH(p(i)`position,p(i+1)`position)
       ENDIF

   positionRel(p: Plan, i: below[p`length], d: real): Vect3
   
   emptyv3: Vect3 % Hold an empty value for an initialized Vect3
   	   	  % that hasn't been assigned a value yet

   emptynp: NavPoint % Hold an empty value for an initialized NavPoint

   emptybool: bool % Hold empty value for bool

   emptyint: int % Hold empty value for int

   ValidTime?(p:Plan)(t1:real): bool = p`length>0 AND p`seq(0)`t <= t1 AND t1 <= p`seq(p`length - 1)`t

   accelZone(p: Plan,v:Vect3,(t1:(ValidTime?(p))|getSegment(p,t1)<p`length-1),t2: real): [Vect3,Vect3] =
     LET 
       seg = getSegment(p,t1),
       np1 = p(seg),
       np2 = p(seg+1),
       pp:Vect3  = linear_pos(np1`position,initialVelocity(np1)(np2),t1-np1`t),
       so: Vect3 = emptyv3, % start initializations %
       vo: Vect3 = emptyv3,
       prevBOT: int = emptyint,
       n1:NavPoint = emptynp,
       turnRight:bool = emptybool,
       prevGsb:int = emptyint,
       prevVsb:int = emptyint,
       p2     :Vect3 = emptyv3,
       pv:[Vect3,Vect3] = (emptyv3,emptyv3),
       vs: real = v`z,
       v2 : Vect3 = emptyv3,
       v : Vect3 = emptyv3, % end initializations %
     % Start inTurn(p,t1) Block
       n1 = IF inTurn(p,t1) THEN p(prevBOTt(p,t1)) ELSE n1 ENDIF,
       so = IF inTurn(p,t1) THEN n1`position ELSE so ENDIF,
       vo = IF inTurn(p,t1) THEN velocityIn(n1) ELSE vo ENDIF,
       pv = IF inTurn(p,t1) THEN turnOmega(so,vo,t2-n1`t,n1`accel) ELSE pv ENDIF,
       pp = IF inTurn(p,t1) THEN mkAlt(pv`1,pp`z) ELSE pp ENDIF,
       v  = IF inTurn(p,t1) THEN mkVs(pv`2,vs) ELSE v ENDIF,
     % Start inGroundSpeedChange(p,t1) Block
       n1 = IF inGroundSpeedChange(p,t1) THEN p(prevGSCBegint(p,t1)) ELSE n1 ENDIF,
       so = IF inGroundSpeedChange(p,t1) THEN n1`position ELSE so ENDIF,
       vo = IF inGroundSpeedChange(p,t1) THEN velocityIn(n1) ELSE vo ENDIF,
       pv = IF inGroundSpeedChange(p,t1) THEN gsAccel(so,vo,t2-n1`t,n1`accel) ELSE pv ENDIF,
       pp = IF inGroundSpeedChange(p,t1) THEN mkAlt(pv`1,pp`z) ELSE pp ENDIF,
       v  = IF inGroundSpeedChange(p,t1) THEN mkVs(pv`2,vs) ELSE v ENDIF,
     % Start inVerticalSpeedChange(p,t1) Block
       n1 = IF inVerticalSpeedChange(p,t1) THEN p(prevVSCBegint(p,t1)) ELSE n1 ENDIF,
       so = IF inVerticalSpeedChange(p,t1) THEN n1`position ELSE so ENDIF,
       vo = IF inVerticalSpeedChange(p,t1) THEN velocityIn(n1) ELSE vo ENDIF,
       pv = IF inVerticalSpeedChange(p,t1) THEN vsAccel(so,vo,t2-n1`t,n1`accel) ELSE pv ENDIF,
       v2 = IF inVerticalSpeedChange(p,t1) THEN pv`2 ELSE v2 ENDIF,
       pp = IF inVerticalSpeedChange(p,t1) THEN mkAlt(pp,pv`1`z) ELSE pp ENDIF,
       v  = IF inVerticalSpeedChange(p,t1) THEN mkVs(v,v2`z) ELSE v ENDIF
    IN (pp,v)




       

END KinematicPlan
