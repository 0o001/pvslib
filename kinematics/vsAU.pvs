vsAU  : THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  IMPORTING util, 
	 interface_analysis, 
	% integral_split_fun, 
	 reals@real_fun_ops[real], 
         vectors@vectors_3D, 
	 vectors@vectors_2D, 
	 vectors@vect_3D_2D

vsAccelUntil_acc(a:real, t1:real)(t:real): 
  real = 
  IF t<t1 THEN a
  ELSE 0 
  ENDIF

vsAccelUntil_vel(voz:real, a:real, t1:real)(t:real):
  real = 
  IF t<t1 THEN voz+a*t
  ELSE voz+a*t1
  ENDIF

vsAccelUntil_pos(soz:real, voz:real, a:real, t1:real)(t:real):
  real = 
  IF t<t1 THEN soz+voz*t+(a/2)*t^2
  ELSE soz + voz*t+(a*t1)*(t-t1/2)
  ENDIF 

vsAccelUntil_acc3d(a:real, t1:real)(t:real):
  Vect3 = 
  (# x:=0, 
     y:=0, 
     z:= vsAccelUntil_acc(a, t1)(t) #)

vsAccelUntil_vel3d(vo:Vect3, a:real, t1:real)(t:real):
  Vect3 = 
  (# x:=vo`x, 
     y:=vo`y, 
     z:=vsAccelUntil_vel(vo`z,a,t1)(t) #)

vsAccelUntil_pos3d(so:Vect3, vo:Vect3, a:real, t1:real)(t:real):
  Vect3 = 
  (# x:=so`x+vo`x*t, 
     y:=so`y+vo`y*t, 
     z:=vsAccelUntil_pos(so`z, vo`z, a, t1)(t) #)

vsAccelUntil_param(voz:real, goalVs:real, accel:posreal):
  [real, real] = 
  LET (sgn:int) = IF goalVs>=voz THEN 1 ELSE -1 ENDIF IN
  (sgn*accel, goalVs-voz/(sgn*accel))

%Functions as in Kinematics

vsAccelTime(voz:real, goalVs:real, accel:posreal): 
  real = 
  vsAccelUntil_param(voz, goalVs, accel)`2

vsAccelGoal(so:Vect3, vo:Vect3, goalVs:real, accel:posreal):
  [Vect3, Vect3, real] = 
  LET vsParam = vsAccelUntil_param(vo`z, goalVs, accel) IN
  ( vsAccelUntil_pos3d(so, vo, vsParam`1, vsParam`2)(vsParam`2), 
    vsAccelUntil_vel3d(vo, vsParam`1, vsParam`2)(vsParam`2), 
    vsParam`2 ) 

vsAccelUntil(so:Vect3, vo:Vect3, t:nnreal, goalVs:real, accel:posreal):
  [Vect3, Vect3] = 
  LET vsParam = vsAccelUntil_param(vo`z, goalVs, accel) IN
  ( vsAccelUntil_pos3d(so, vo, vsParam`1, vsParam`2)(t), 
    vsAccelUntil_vel3d(vo, vsParam`1, vsParam`2)(t) ) 


  

  END vsAU
