(vsAprops
 (vsAccel_vel_fnd_TCC1 0
  (vsAccel_vel_fnd_TCC1-1 nil 3625421215
   ("" (skeep)
    (("" (lemma "Integral_const_fun[real]")
      (("1" (inst -1 "a" "0" "t")
        (("1" (case-replace "vsAccel_acc(a) = const_fun[real](a)")
          (("1" (ground) nil nil)
           ("2" (decompose-equality 1)
            (("2" (expand "vsAccel_acc")
              (("2" (expand "const_fun") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsAccel_acc const-decl "real" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/"))
   nil))
 (vsAccel_vel_fnd_TCC2 0
  (vsAccel_vel_fnd_TCC2-1 nil 3625421215 ("" (assuming-tcc) nil nil)
   ((connected? const-decl "bool" deriv_domain_def "analysis_ax/"))
   nil))
 (vsAccel_vel_fnd_TCC3 0
  (vsAccel_vel_fnd_TCC3-1 nil 3625421215
   ("" (expand "not_one_element?")
    (("" (skeep) (("" (inst 1 "x+1") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/"))
   nil))
 (vsAccel_vel_equal 0
  (vsAccel_vel_equal-1 nil 3625421757
   ("" (skeep)
    (("" (expand "vsAccel_vel_fnd")
      (("" (expand "vsAccel_vel")
        (("" (lemma "Integral_const_fun[real]")
          (("1" (inst -1 "a" "0" "t")
            (("1" (ground)
              (("1"
                (case-replace "vsAccel_acc(a) = const_fun[real](a)")
                (("1" (ground) nil nil)
                 ("2" (decompose-equality 1)
                  (("2" (expand "const_fun")
                    (("2" (expand "vsAccel_acc")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((vsAccel_vel_fnd const-decl "real" vsAprops nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsAccel_acc const-decl "real" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (vsAccel_vel const-decl "real" vsA nil))
   shostak))
 (vsAccel_pos_fnd_TCC1 0
  (vsAccel_pos_fnd_TCC1-1 nil 3625421215
   ("" (skeep)
    (("" (lemma "integral_linear[real]")
      (("1" (inst -1 "0" "t" "a" "voz")
        (("1" (ground)
          (("1"
            (case-replace
             "vsAccel_vel(voz, a) = LAMBDA (x: real): a * x + voz")
            (("1" (ground) nil nil)
             ("2" (decompose-equality 1)
              (("2" (expand "vsAccel_vel") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (integral_linear formula-decl nil table_of_integrals
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsAccel_vel const-decl "real" vsA nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (vsAccel_pos_equal 0
  (vsAccel_pos_equal-1 nil 3625421877
   ("" (skeep)
    (("" (expand "vsAccel_pos_fnd")
      (("" (lemma "integral_linear[real]")
        (("1" (inst -1 "0" " t" "a" "voz")
          (("1" (ground)
            (("1"
              (case-replace
               "vsAccel_vel(voz, a) = LAMBDA (x: real): a * x + voz")
              (("1" (ground)
                (("1" (expand "vsAccel_pos")
                  (("1" (replace -3)
                    (("1" (ground) (("1" (grind) nil nil)) nil)) nil))
                  nil))
                nil)
               ("2" (decompose-equality 1)
                (("2" (expand "vsAccel_vel") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((vsAccel_pos_fnd const-decl "real" vsAprops nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vsAccel_vel const-decl "real" vsA nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vsAccel_pos const-decl "real" vsA nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (integral_linear formula-decl nil table_of_integrals
     "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (vsAccel_vel3d_fnd_TCC1 0
  (vsAccel_vel3d_fnd_TCC1-1 nil 3625422566
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`x) = const_fun[real](0)")
      (("1" (lemma "Integral_const_fun[real]")
        (("1" (inst?) (("1" (ground) nil nil)) nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (expand "const_fun")
        (("2" (expand "vsAccel_acc3d") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_acc3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/"))
   nil))
 (vsAccel_vel3d_fnd_TCC2 0
  (vsAccel_vel3d_fnd_TCC2-1 nil 3625422566
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`y) = const_fun[real](0)")
      (("1" (lemma "Integral_const_fun[real]")
        (("1" (inst?) (("1" (ground) nil nil)) nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (expand "const_fun")
        (("2" (expand "vsAccel_acc3d") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_acc3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/"))
   nil))
 (vsAccel_vel3d_fnd_TCC3 0
  (vsAccel_vel3d_fnd_TCC3-1 nil 3625422566
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`z) = const_fun[real](a)")
      (("1" (lemma "Integral_const_fun[real]")
        (("1" (inst?) (("1" (ground) nil nil)) nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (expand "const_fun")
        (("2" (expand "vsAccel_acc3d")
          (("2" (expand "vsAccel_acc") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_acc3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (vsAccel_acc const-decl "real" vsA nil))
   nil))
 (vsAccel_vel3d_equal 0
  (vsAccel_vel3d_equal-1 nil 3625423022
   ("" (skeep)
    (("" (decompose-equality)
      (("1" (expand "vsAccel_vel3d_fnd")
        (("1"
          (case-replace
           "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`x) = const_fun[real](0)")
          (("1" (lemma "Integral_const_fun[real]")
            (("1" (inst?)
              (("1" (ground)
                (("1" (expand "vsAccel_vel3d") (("1" (ground) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (expand "const_fun")
            (("2" (expand "vsAccel_acc3d") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vsAccel_vel3d_fnd")
        (("2"
          (case-replace
           "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`y) = const_fun[real](0)")
          (("1" (lemma "Integral_const_fun[real]")
            (("1" (inst?)
              (("1" (ground)
                (("1" (expand "vsAccel_vel3d") (("1" (ground) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (expand "const_fun")
            (("2" (expand "vsAccel_acc3d") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "vsAccel_vel3d_fnd")
        (("3"
          (case-replace
           "(LAMBDA (s: real): vsAccel_acc3d(a)(s)`z) = vsAccel_acc(a)")
          (("1" (expand "vsAccel_vel3d")
            (("1" (rewrite "vsAccel_vel_equal")
              (("1" (ground)
                (("1" (expand "vsAccel_vel_fnd")
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (expand "vsAccel_acc3d")
            (("2" (ground) (("2" (decompose-equality 1) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (vsAccel_vel3d const-decl "Vect3" vsA nil)
    (vsAccel_vel3d_fnd const-decl "Vect3" vsAprops nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsAccel_acc3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (vsAccel_acc const-decl "real" vsA nil)
    (vsAccel_vel_equal formula-decl nil vsAprops nil)
    (vsAccel_vel_fnd const-decl "real" vsAprops nil))
   shostak))
 (vsAccel_pos3d_fnd_TCC1 0
  (vsAccel_pos3d_fnd_TCC1-1 nil 3625423586
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_vel3d(vo, a)(s)`x) = const_fun[real](vo`x)")
      (("1" (lemma "Integral_const_fun[real]")
        (("1" (ground) (("1" (inst?) (("1" (ground) nil nil)) nil))
          nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (decompose-equality 1)
        (("2" (expand "vsAccel_vel3d")
          (("2" (expand "const_fun") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_vel3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (real_times_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/"))
   nil))
 (vsAccel_pos3d_fnd_TCC2 0
  (vsAccel_pos3d_fnd_TCC2-1 nil 3625423586
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_vel3d(vo, a)(s)`y) = const_fun[real](vo`y)")
      (("1" (lemma "Integral_const_fun[real]")
        (("1" (inst?) (("1" (ground) nil nil)) nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (decompose-equality 1)
        (("2" (expand "const_fun")
          (("2" (expand "vsAccel_vel3d") (("2" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_vel3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/"))
   nil))
 (vsAccel_pos3d_fnd_TCC3 0
  (vsAccel_pos3d_fnd_TCC3-1 nil 3625423586
   ("" (skeep)
    ((""
      (case-replace
       "(LAMBDA (s: real): vsAccel_vel3d(vo, a)(s)`z) = LAMBDA(s:real): vo`z +a*s")
      (("1" (lemma "integral_linear[real]")
        (("1" (inst -1 "0" "t" "a" "vo`z")
          (("1" (ground) (("1" (flatten) nil nil)) nil)) nil)
         ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
        nil)
       ("2" (expand "vsAccel_vel3d")
        (("2" (expand "vsAccel_vel") (("2" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (vsAccel_vel3d const-decl "Vect3" vsA nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (integral_linear formula-decl nil table_of_integrals
     "analysis_ax/")
    (vsAccel_vel const-decl "real" vsA nil))
   nil))
 (vsAccel_pos3d_equal 0
  (vsAccel_pos3d_equal-1 nil 3625476240
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (expand "vsAccel_pos3d_fnd")
        (("1"
          (case-replace
           "( LAMBDA (s: real): vsAccel_vel3d(vo, a)(s)`x) = const_fun[real](vo`x)")
          (("1" (lemma "Integral_const_fun[real]")
            (("1" (inst?)
              (("1" (expand "vsAccel_pos3d") (("1" (ground) nil nil))
                nil))
              nil)
             ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (decompose-equality 1)
            (("2" (expand "vsAccel_vel3d")
              (("2" (expand "const_fun") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "vsAccel_pos3d_fnd")
        (("2"
          (case-replace
           "( LAMBDA (s: real): vsAccel_vel3d(vo, a)(s)`y) = const_fun[real](vo`y)")
          (("1" (lemma "Integral_const_fun[real]")
            (("1" (inst?)
              (("1" (ground)
                (("1" (expand "vsAccel_pos3d") (("1" (ground) nil nil))
                  nil))
                nil))
              nil)
             ("2" (expand "connected?") (("2" (propax) nil nil)) nil))
            nil)
           ("2" (decompose-equality 1)
            (("2" (expand "const_fun")
              (("2" (expand "vsAccel_vel3d") (("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (expand "vsAccel_pos3d_fnd")
        (("3" (lemma "vsAccel_pos_equal")
          (("3" (expand "vsAccel_pos3d")
            (("3" (inst?)
              (("3" (expand "vsAccel_pos_fnd")
                (("3" (ground)
                  (("3" (expand "vsAccel_vel3d")
                    (("3" (ground)
                      (("3"
                        (case "vsAccel_vel(vo`z, a) = LAMBDA (s: real): vsAccel_vel(vo`z, a)(s)")
                        (("1" (replaces -1 -2) nil nil)
                         ("2" (decompose-equality 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (vsAccel_pos3d const-decl "Vect3" vsA nil)
    (vsAccel_pos3d_fnd const-decl "Vect3" vsAprops nil)
    (Vect3 type-eq-decl nil vectors_3D_def "vectors/")
    (real nonempty-type-from-decl nil reals nil)
    (derivable_const application-judgement "deriv_fun[T]"
     derivatives_lam "analysis_ax/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vsAccel_vel3d const-decl "Vect3" vsA nil)
    (const_fun const-decl "[T -> real]" real_fun_ops "reals/")
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def
     "analysis_ax/")
    (connected? const-decl "bool" deriv_domain_def "analysis_ax/")
    (Integral_const_fun formula-decl nil integral "analysis_ax/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (vsAccel_pos_equal formula-decl nil vsAprops nil)
    (vsAccel_vel const-decl "real" vsA nil)
    (vsAccel_pos_fnd const-decl "real" vsAprops nil))
   shostak)))

