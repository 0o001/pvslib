vsAUWR  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  
  IMPORTING util, 
	 interface_analysis, 
	% integral_split_fun, 
	 reals@real_fun_ops[real], 
         vectors@vectors_3D, 
	 vectors@vectors_2D, 
	 vectors@vect_3D_2D

vsAccelUntilWR_acc(a:real, t1:real, t2:real, rt:posreal)(t:real): 
  real = 
  IF t<t1 THEN a/rt*t
  ELSIF t<t2 THEN a/rt*t1
  ELSE 0 
  ENDIF

vsAccelUntilWR_vel(voz:real, a:real, t1:real, t2:real, rt:posreal)(t:real):
  real = 
  IF t<t1 THEN voz+0.5*a/rt*t*t
  ELSIF t<t2 THEN voz+0.5*a/rt*t1*t1 + (a/rt*t1)*(t-t1)
  ELSE voz+0.5*a/rt*t1*t1 + (a/rt*t1)*(t2-t1)
  ENDIF

vsAccelUntilWR_pos(soz:real, voz:real, a:real, t1:real, t2:real, rt:posreal)(t:real):
  real = 
  IF t<t1 THEN soz+voz*t+(a/(6*rt))*t*t*t
  ELSIF t<t2 THEN  soz + voz*t+ (0.5*a*t1/rt)*(-t1^2/3-t1*t *t^2)
  ELSE soz +voz*t+ (0.5*a*t1/rt)*(-t1^2/3-t1*t2 *t2^2) + (0.5*a/rt*t1*t1 + (a/rt*t1)*(t2-t1))*(t-t2)
  ENDIF 

vsAccelUntilWR_acc3d(a:real, t1:real, t2:real, rt:posreal)(t:real):
  Vect3 = 
  (# x:=0, 
     y:=0, 
     z:= vsAccelUntilWR_acc(a, t1, t2, rt)(t) #)

vsAccelUntilWR_vel3d(vo:Vect3, a:real, t1:real, t2:real, rt:posreal)(t:real):
  Vect3 = 
  (# x:=vo`x, 
     y:=vo`y, 
     z:=vsAccelUntilWR_vel(vo`z,a,t1,t2,rt)(t) #)

vsAccelUntilWR_pos3d(so:Vect3, vo:Vect3, a:real, t1:real, t2:real, rt:posreal)(t:real):
  Vect3 = 
  (# x:=so`x+vo`x*t, 
     y:=so`y+vo`y*t, 
     z:=vsAccelUntilWR_pos(so`z, vo`z, a, t1, t2, rt)(t) #)

vsAccelUntilWR_param(voz:real, goalVs:real, accel:posreal, rt:posreal):
  [real, real, real] = 
  LET (sgn:int) = IF goalVs>=voz THEN 1 ELSE -1 ENDIF, 
      (deltaV:nnreal) = abs(goalVs-voz) IN
  IF deltaV<= 0.5*accel*rt THEN
     (sgn*accel, sqrt(2*rt*deltaV/accel), sqrt(2*rt*deltaV/accel)) 
  ELSE 
     (sgn*accel, rt, (deltaV + 0.5*accel*rt)/accel)  
  ENDIF

%Function as in Kinematics

vsAccelUntilWithRampUp(so:Vect3, vo:Vect3, t:nnreal, goalVs:real, accel:posreal, rt:posreal):
  [Vect3, Vect3] = 
  LET vsWRParam = vsAccelUntilWR_param(vo`z, goalVs, accel, rt) IN
  ( vsAccelUntilWR_pos3d(so, vo, vsWRParam`1, vsWRParam`2, vsWRParam`3, rt)(t), 
    vsAccelUntilWR_vel3d(vo, vsWRParam`1, vsWRParam`2, vsWRParam`3, rt)(t) ) 


  

  END vsAUWR
