vsAprops  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  IMPORTING vsA

vsAccel_vel_fnd(voz:real, a:real)(t:real): 
  real = voz + Integral(0,t, vsAccel_acc(a))

vsAccel_vel_equal: LEMMA FORALL (voz:real, a:real, t:real):
  vsAccel_vel(voz, a)(t) = 
  vsAccel_vel_fnd(voz, a)(t)

vsAccel_pos_fnd(soz:real, voz:real, a:real)(t:real):
  real = soz + Integral(0,t, vsAccel_vel(voz, a))
  
vsAccel_pos_equal: LEMMA FORALL (soz:real, voz:real, a:real, t:real):
  vsAccel_pos(soz, voz, a)(t) = 
  vsAccel_pos_fnd(soz, voz, a)(t)

vsAccel_vel3d_fnd(vo:Vect3, a:real)(t:real):
  Vect3 = 
  (# x:=vo`x+Integral(0,t, LAMBDA(s:real): vsAccel_acc3d(a)(s)`x), 
     y:=vo`y+Integral(0,t, LAMBDA(s:real): vsAccel_acc3d(a)(s)`y), 
     z:=vo`z+Integral(0,t, LAMBDA(s:real): vsAccel_acc3d(a)(s)`z) #)

vsAccel_vel3d_equal: LEMMA FORALL (vo:Vect3, a:real, t:real):
  vsAccel_vel3d(vo, a)(t) = 
  vsAccel_vel3d_fnd(vo, a)(t)

vsAccel_pos3d_fnd(so:Vect3, vo:Vect3, a:real)(t:real):
  Vect3 = 
  (# x:=so`x+Integral(0,t, LAMBDA(s:real): vsAccel_vel3d(vo,a)(s)`x), 
     y:=so`y+Integral(0,t, LAMBDA(s:real): vsAccel_vel3d(vo,a)(s)`y), 
     z:=so`z+Integral(0,t, LAMBDA(s:real): vsAccel_vel3d(vo,a)(s)`z) #)

vsAccel_pos3d_equal: LEMMA FORALL (so:Vect3, vo:Vect3, a:real, t:real):
  vsAccel_pos3d(so,vo,a)(t) = 
  vsAccel_pos3d_fnd(so,vo,a)(t)

  END vsAprops
