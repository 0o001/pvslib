turn_derivation[T: TYPE+ FROM real]: THEORY
%------------------------------------------------------------------------------
%
%   Integration results for the kinematics library
%
%    Provides: the connection between the calculation of the position
%              during a turn and the integration of speed values
%
%    Authors: Radu Siminiceanu    National Institute of Aerospace
%             Rick Butler         NASA Langley
%
%------------------------------------------------------------------------------
BEGIN

   ASSUMING
      IMPORTING interface_analysis

      connected_domain : ASSUMPTION connected?[T]

      not_one_element : ASSUMPTION not_one_element?[T]

      T_pred0         : ASSUMPTION T_pred[T](0)

   ENDASSUMING

   IMPORTING motion, 
             interface_trig
  
   %% --- connection between integration results and acceleration/speed profile templates

   turn_vx_prep: LEMMA FORALL (f: Rate_fun[T], v: real):
     differentiable?[T]((LAMBDA (t: T): v * sin(f(t))));

   turn_vy_prep: LEMMA FORALL (f: Rate_fun[T], v: real):
     differentiable?[T]((LAMBDA (t: T): v * cos(f(t))));

   alpha, theta, k, a, b, v: VAR real
   w : VAR nzreal


   turn_vx(f: Rate_fun[T], v: real) : Rate_fun[T] = (LAMBDA(t: T): v*sin(f(t)))
   turn_vy(f: Rate_fun[T], v: real) : Rate_fun[T] = (LAMBDA(t: T): v*cos(f(t)))

   % turn angle as a function of initial angle theta, turnrate w and time t
   linear_angular(theta, w): Rate_fun[T] = (LAMBDA(t: T): theta + w*t)

   % components of velocity in a turn 
   turn_vx_angular(v, theta, w) : Rate_fun[T] = turn_vx(linear_angular(theta, w), v)
   turn_vy_angular(v, theta, w) : Rate_fun[T] = turn_vy(linear_angular(theta, w), v)

   turn_position_x: LEMMA 
     position(turn_vx_angular(v, theta, w), 0) = 
       LAMBDA(t:T): -(v/w)*(cos(theta + w*t) - cos(theta))
  
   turn_position_y: LEMMA
     position(turn_vy_angular(v, theta, w), 0) = 
       LAMBDA(t:T): (v/w)*(sin(theta + w*t) - sin(theta))


END turn_derivation


