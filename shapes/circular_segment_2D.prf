(circular_segment_2D
 (radius_TCC1 0
  (radius_TCC1-1 nil 3814550592
   ("" (skeep)
    (("" (typepred "arc(CS)")
      (("" (flatten)
        (("" (replaces (-2 -3 -4) :dir rl)
          (("" (lemma "norm_eq_0")
            (("" (inst?)
              (("" (assert) (("" (rewrite "sub_eq_zero") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc adt-accessor-decl "[CircularSegment_2D -> Arc]"
     circular_segment_2D nil)
    (Arc type-eq-decl nil circular_segment_2D nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CircularSegment_2D type-decl nil circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors))
   nil
   (radius subtype
    "vectors_2D.norm((vectors_2D.-)(circular_segment_2D.A, circular_segment_2D.C))"
    "posreal")))
 (def_points_in_circular_segment 0
  (def_points_in_circular_segment-1 nil 3814552042
   ("" (skeep)
    (("" (typepred "arc(CS)")
      (("" (skoletin 1)
        (("" (expand "point_in?")
          (("" (replaces (-1 -2 -3) :dir rl)
            (("" (assert) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((arc adt-accessor-decl "[CircularSegment_2D -> Arc]"
     circular_segment_2D nil)
    (Arc type-eq-decl nil circular_segment_2D nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CircularSegment_2D type-decl nil circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (det_eq_0 formula-decl nil det_2D vectors)
    (comp_zero_x formula-decl nil vectors_2D vectors)
    (comp_zero_y formula-decl nil vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (center_in_circular_segment_TCC1 0
  (center_in_circular_segment_TCC1-1 nil 3814550592
   ("" (subtype-tcc) nil nil) ((/= const-decl "boolean" notequal nil))
   nil
   (center_in_circular_segment subtype
    "(circular_segment_2D.A, circular_segment_2D.C, circular_segment_2D.B)"
    "Angle_2D")))
 (center_in_circular_segment 0
  (center_in_circular_segment-1 nil 3814552042
   ("" (skeep)
    (("" (skoletin 1)
      (("" (typepred "arc(CS)")
        (("" (expand "point_in?")
          (("" (replaces (-4 -5 -6) :dir rl)
            (("" (assert)
              (("" (flatten)
                (("" (hide -1)
                  ((""
                    (case-replace
                     "collinear?(A,B,C) IFF (det(C - (A), (B) - (A)) = 0)")
                    (("1" (hide -1) (("1" (grind) nil nil)) nil)
                     ("2" (hide-all-but 1) (("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CircularSegment_2D type-decl nil circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Arc type-eq-decl nil circular_segment_2D nil)
    (arc adt-accessor-decl "[CircularSegment_2D -> Arc]"
     circular_segment_2D nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (reflex? const-decl "bool" angle_2D nil)
    (collinear? const-decl "bool" angle_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (det const-decl "real" det_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (def_points_not_strictly_in_circular_segment 0
  (def_points_not_strictly_in_circular_segment-1 nil 3814552043
   ("" (skeep)
    (("" (typepred "arc(CS)")
      (("" (skoletin)
        (("" (expand "point_strictly_in?")
          (("" (replaces (-1 -2 -3) :dir rl) (("" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((arc adt-accessor-decl "[CircularSegment_2D -> Arc]"
     circular_segment_2D nil)
    (Arc type-eq-decl nil circular_segment_2D nil)
    (- const-decl "Vector" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (CircularSegment_2D type-decl nil circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil))
   shostak))
 (center_strictly_in_circular_segment 0
  (center_strictly_in_circular_segment-1 nil 3814552044
   ("" (skeep)
    (("" (skoletin 1)
      (("" (typepred "arc(CS)")
        (("" (expand "point_strictly_in?")
          (("" (replaces (-4 -5 -6) :dir rl)
            (("" (assert)
              (("" (case-replace "0 < sqv((A) - (C))")
                (("1" (hide (-1 -4))
                  (("1" (flatten)
                    (("1"
                      (case-replace
                       "non_collinear?(A,B,C) IFF (det(C - (A), (B) - (A)) /= 0)")
                      (("1" (hide -1) (("1" (grind) nil nil)) nil)
                       ("2" (hide-all-but 1) (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide-all-but (-1 1))
                  (("2" (flatten)
                    (("2" (lemma "sqv_eq_0")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (CircularSegment_2D type-decl nil circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Arc type-eq-decl nil circular_segment_2D nil)
    (arc adt-accessor-decl "[CircularSegment_2D -> Arc]"
     circular_segment_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (anti_reflex? const-decl "bool" angle_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (sqv_zero formula-decl nil vectors_2D vectors)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (test_circular_segment_cw_TCC1 0
  (test_circular_segment_cw_TCC1-1 nil 3814550592
   ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (test_circular_segment_cw subtype
    "(circular_segment_2D.A, circular_segment_2D.C, circular_segment_2D.B)"
    "Arc")))
 (test_Q_in_CS_cw 0
  (test_Q_in_CS_cw-1 nil 3814552046 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (test_circular_segment_cw const-decl "CircularSegment_2D"
     circular_segment_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_Q_not_in_CS_cw 0
  (test_Q_not_in_CS_cw-1 nil 3814552047 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (test_circular_segment_cw const-decl "CircularSegment_2D"
     circular_segment_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_circular_segment_ccw_TCC1 0
  (test_circular_segment_ccw_TCC1-1 nil 3814550592
   ("" (subtype-tcc) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (test_circular_segment_ccw subtype
    "(circular_segment_2D.A, circular_segment_2D.C, circular_segment_2D.B)"
    "Arc")))
 (test_Q_in_CS_ccw 0
  (test_Q_in_CS_ccw-1 nil 3814552048 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (/= const-decl "boolean" notequal nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (test_circular_segment_ccw const-decl "CircularSegment_2D"
     circular_segment_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

