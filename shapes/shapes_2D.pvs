shapes_2D : THEORY
BEGIN

  IMPORTING Shape2D

  shapes_2D : TYPE = list[Shape2D]

  % Function returns true if point P is inside shapes ss (including borders) 
  point_in?(ss:shapes_2D)(P:Vect2) : RECURSIVE bool =
    IF null?(ss) THEN FALSE
    ELSE 
      LET shape = car(ss) IN
        CASES shape OF
          Triangle(t) : point_in?(t)(P),
          Circle(c) : point_in_circle?(c)(P),
          CircularSegment(s) : point_in?(s,FALSE)(P),
          Parallelogram(p) : point_in?(p)(P),
          Rectangle(r) : point_in_rectangle?(r)(P)
        ENDCASES
        OR 
        point_in?(cdr(ss))(P)
    ENDIF
  MEASURE ss BY <<

  % Function returns true if point P is inside shapes ss (excluding borders) 
  point_strictly_in?(ss:shapes_2D)(P:Vect2) : RECURSIVE bool =
    IF null?(ss) THEN FALSE
    ELSE 
      LET shape = car(ss) IN
        CASES shape OF
          Triangle(t) : point_strictly_in?(t)(P),
          Circle(c) : point_strictly_in_circle?(c)(P),
          CircularSegment(s) : point_strictly_in?(s,FALSE)(P),
          Parallelogram(p): point_strictly_in?(p)(P),
          Rectangle(r) : point_strictly_in_rectangle?(r)(P)
        ENDCASES
        OR 
        point_strictly_in?(cdr(ss))(P)
    ENDIF
  MEASURE ss BY <<

END shapes_2D
