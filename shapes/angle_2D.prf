(angle_2D
 (ACA_is_zero_TCC1 0
  (ACA_is_zero_TCC1-1 nil 3814535017 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (ACA_is_zero subtype "(angle_2D.A, angle_2D.C, angle_2D.A)"
    "Angle_2D")))
 (ACA_is_zero 0
  (ACA_is_zero-1 nil 3814536951
   ("" (skeep)
    (("" (expand "zero?")
      (("" (split)
        (("1" (grind) nil nil)
         ("2" (rewrite "sqv" :dir rl)
          (("2" (lemma "sqv_eq_0")
            (("2" (inst?)
              (("2" (assert) (("2" (rewrite "sub_eq_zero") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero? const-decl "bool" angle_2D nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sqv_eq_0 formula-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (complement_TCC1 0
  (complement_TCC1-1 nil 3814535017 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (complement subtype "(angle_2D.B, angle_2D.C, angle_2D.A)"
               "Angle_2D")))
 (anti_reflex_complement 0
  (anti_reflex_complement-1 nil 3814536952 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (reflex? const-decl "bool" angle_2D nil)
    (complement const-decl "Angle_2D" angle_2D nil)
    (anti_reflex? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (zero_complement 0
  (zero_complement-1 nil 3814536953 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (zero? const-decl "bool" angle_2D nil)
    (complement const-decl "Angle_2D" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (compl_compl_id 0
  (compl_compl_id-1 nil 3814536954
   ("" (grind) (("" (decompose-equality 3) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (complement const-decl "Angle_2D" angle_2D nil))
   shostak))
 (collinear_points 0
  (collinear_points-1 nil 3814536954 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (collinear_perm 0
  (collinear_perm-1 nil 3814536955 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (collinear_angle 0
  (collinear_angle-1 nil 3814536956
   ("" (skeep :preds? t)
    (("" (skoletin 3)
      (("" (expand "collinear?")
        (("" (expand "zero?")
          (("" (expand "straight?")
            (("" (replaces - :dir rl)
              (("" (flatten)
                (("" (case "det((A) - (C), (B) - (C)) = 0 ")
                  (("1" (assert)
                    (("1" (case "((A) - (C)) * ((B) - (C)) = 0")
                      (("1" (lemma "det_dot_0")
                        (("1" (inst?)
                          (("1" (assert) nil nil)
                           ("2" (flatten)
                            (("2" (rewrite "sub_eq_zero") nil nil))
                            nil)
                           ("3" (flatten)
                            (("3" (rewrite "sub_eq_zero") nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 1)) (("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (straight? const-decl "bool" angle_2D nil)
    (zero? const-decl "bool" angle_2D nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (collinear? const-decl "bool" angle_2D nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (det const-decl "real" det_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (A skolem-const-decl "Vect2" angle_2D nil)
    (C skolem-const-decl "Vect2" angle_2D nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (B skolem-const-decl "Vect2" angle_2D nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (det_dot_0 formula-decl nil det_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (non_collinear_points 0
  (non_collinear_points-1 nil 3814536957 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (non_collinear_different_points 0
  (non_collinear_different_points-1 nil 3814536958 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (/= const-decl "boolean" notequal nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (non_collinear_perm 0
  (non_collinear_perm-1 nil 3814536958 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (non_collinear_j 0
  (non_collinear_j-1 nil 3814535017 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (NonCollinearPoints type-eq-decl nil angle_2D nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil))
   nil (non_collinear_j subtype "angle_2D.x" "Angle_2D")))
 (non_collinear_angle 0
  (non_collinear_angle-1 nil 3814536959 ("" (grind) nil nil)
   ((NonCollinearPoints type-eq-decl nil angle_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (zero? const-decl "bool" angle_2D nil)
    (straight? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (reflex_complement 0
  (reflex_complement-1 nil 3814536960 ("" (grind) nil nil)
   ((NonCollinearPoints type-eq-decl nil angle_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (anti_reflex? const-decl "bool" angle_2D nil)
    (complement const-decl "Angle_2D" angle_2D nil)
    (reflex? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   shostak)))

