%% An angle is defined by tree points ACB, where C is the vertex and CA,CB are non-zero rays.
%% By convention, ACB denotes the positive angle (counter clockwise) from A to B.
angle_2D : THEORY
  BEGIN 

    IMPORTING vectors@det_2D

    Angle_2D : TYPE = {alpha:[Vect2,Vect2,Vect2] | LET (A,C,B) = alpha IN A /= C AND B /= C}

    % alpha = 0
    zero?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
           CA = A-C,
           CB = B-C IN
        det(CA,CB) = 0 AND CA * CB > 0

    ACA_is_zero : LEMMA
      FORALL (A,C:Vect2):
        A /= C IMPLIES zero?(A,C,A)    

    % 0 < alpha < pi/2
    acute?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
           CA = A-C,
           CB = B-C IN
        det(CA,CB) > 0 AND CA * CB > 0

    % alpha = pi/2
    right?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
           CA = A-C,
           CB = B-C IN
        det(CA,CB) > 0 AND CA * CB = 0
 
    % pi/2 < alpha < pi
    obtuse?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
           CA = A-C,
           CB = B-C IN
        det(CA,CB) > 0 AND CA * CB < 0

    % alpha = pi
    straight?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
          CA = A-C,
          CB = B-C IN
        det(CA,CB) = 0 AND CA * CB < 0    

    % pi < alpha < 2*pi
    reflex?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
           CA = A-C,
           CB = B-C IN
        det(CA,CB) < 0 

    % 0 <= alpha <= pi
    anti_reflex?(alpha:Angle_2D) : bool =
      LET (A,C,B) = alpha,
          CA = A-C,
          CB = B-C IN
        det(CA,CB) >= 0 

    complement(alpha:Angle_2D) : Angle_2D = 
      LET (A,C,B) = alpha IN 
        (B,C,A)

    anti_reflex_complement : LEMMA
      FORALL (alpha:Angle_2D) : 
        reflex?(alpha) IMPLIES
          anti_reflex?(complement(alpha)) 

    zero_complement : LEMMA
      FORALL (alpha:Angle_2D) : 
        zero?(alpha) IFF zero?(complement(alpha))
    
    compl_compl_id : LEMMA
      FORALL (alpha:Angle_2D) : 
        complement(complement(alpha)) = alpha
                 
    % 3 collinear points
    collinear?(A,B,C:Vect2) : bool =
        det(B-A,C-B) = 0

    collinear_points : LEMMA
      FORALL (A,B,C:Vect2) :
        collinear?(A,B,C) IMPLIES
        det(B-A,C-B) = 0 AND det(C-B,A-C) = 0 AND det(A-C,B-A) = 0

    collinear_perm : LEMMA 
      FORALL (A,B,C:Vect2) :
        collinear?(A,B,C) IMPLIES
        collinear?(A,C,B) AND collinear?(B,A,C) AND collinear?(C,A,B)
 
    % alpha = 0 OR alpha = pi
    collinear_angle : LEMMA
      FORALL (alpha:Angle_2D):
        LET (A,C,B) = alpha IN
          collinear?(A,C,B) IMPLIES
          zero?(alpha) OR straight?(alpha)

    % 3 non-collinear points
    non_collinear?(A,B,C:Vect2) : bool =
      det(B-A,C-B) /= 0
 
    non_collinear_points : LEMMA
      FORALL (A,B,C:Vect2) :
        non_collinear?(A,B,C) IMPLIES
        det(B-A,C-B) /= 0 AND det(C-B,A-C) /= 0 AND det(A-C,B-A) /= 0

    non_collinear_different_points : LEMMA
    FORALL (A,B,C:Vect2) :
        non_collinear?(A,B,C) IMPLIES
        A /= B AND B /= C AND C /= A 
        
    non_collinear_perm : LEMMA 
      FORALL (A,B,C:Vect2) :
        non_collinear?(A,B,C) IMPLIES
        non_collinear?(A,C,B) AND non_collinear?(B,A,C) AND non_collinear?(C,A,B)

    NonCollinearPoints : TYPE = (non_collinear?)

    non_collinear_j : JUDGEMENT NonCollinearPoints SUBTYPE_OF Angle_2D
    
    non_collinear_angle : LEMMA
      FORALL (alpha:NonCollinearPoints):
        NOT zero?(alpha) AND NOT straight?(alpha)

    reflex_complement : LEMMA
    FORALL (alpha:NonCollinearPoints) : 
      anti_reflex?(alpha) IMPLIES
        reflex?(complement(alpha)) 
      
  END angle_2D