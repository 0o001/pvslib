(circular_segment_2D_trig
 (perimeter_TCC1 0
  (perimeter_TCC1-1 nil 3814550593
   ("" (skeep* :preds? t)
    (("" (case "norm(B-A) > 0")
      (("1" (assert) nil nil)
       ("2" (hide (-1 -2 -4 6))
        (("2" (lemma "norm_eq_0")
          (("2" (inst?)
            (("2" (assert)
              (("2" (rewrite "sub_eq_zero")
                (("2" (replaces -1)
                  (("2" (lemma "ACA_is_zero")
                    (("2" (inst -1 "A" "C")
                      (("2" (assert)
                        (("2" (case-replace "alpha=(A,C,A)")
                          (("2" (decompose-equality) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (norm const-decl "nnreal" vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (norm_zero formula-decl nil vectors_2D vectors)
    (sub_eq_args formula-decl nil vectors_2D vectors)
    (ACA_is_zero formula-decl nil angle_2D nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (perimeter subtype
    "(number_fields.+)(number_fields.*(angle_2D_trig.angle(circular_segment_2D_trig.alpha), circular_segment_2D_trig.R), vectors_2D.norm((vectors_2D.-)(circular_segment_2D_trig.B, circular_segment_2D_trig.A)))"
    "posreal")))
 (area_TCC1 0
  (area_TCC1-1 nil 3814550593
   ("" (skeep :preds? t)
    (("" (case "sq(R) * (angle(alpha) - sine(alpha)) / 2 > 0")
      (("1" (assert) nil nil)
       ("2" (hide 5)
        (("2" (lemma "angle_0")
          (("2" (cancel-by 1 "sq(R)")
            (("2" (cross-mult 1)
              (("2" (lemma "angle_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (rewrite "sine_is_sin")
                      (("2" (lemma "sin_ub")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sine const-decl "real_abs_le1" angle_2D_trig nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (angle const-decl "nnreal_lt_2pi" angle_2D_trig nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (angle_0 formula-decl nil angle_2D_trig nil)
    (div_mult_pos_gt1 formula-decl nil extra_real_props nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (sine_is_sin formula-decl nil angle_2D_trig nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ub formula-decl nil sincos trig)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (area subtype
    "number_fields./(number_fields.*(sq.sq(circular_segment_2D_trig.R), ((number_fields.-)(angle_2D_trig.angle(circular_segment_2D_trig.alpha), angle_2D_trig.sine(circular_segment_2D_trig.alpha)))), 2)"
    "posreal")))
 (area_TCC2 0
  (area_TCC2-1 nil 3814550593
   ("" (skeep* :preds? t)
    (("" (case "sq(R) * (pi - (angle(nalpha) - sine(nalpha)) / 2) > 0")
      (("1" (assert) nil nil)
       ("2" (hide 8)
        (("2" (lemma "zero_complement")
          (("2" (inst?)
            (("2" (assert)
              (("2" (replace -5 :dir rl)
                (("2" (lemma "angle_0")
                  (("2" (inst -1 "nalpha")
                    (("2" (assert)
                      (("2" (cancel-by 3 "sq(R)")
                        (("2" (field 1)
                          (("2" (case "sine(nalpha) >= 0")
                            (("1" (rewrite "sine_is_sin")
                              (("1"
                                (lemma "sin_ub")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "sign_sine_det")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (beta)
                                    (("2"
                                      (expand "sign3")
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (ground)
                                          (("2"
                                            (expand "anti_reflex?")
                                            (("2"
                                              (lemma
                                               "anti_reflex_complement")
                                              (("2"
                                                (inst -1 "alpha")
                                                (("2"
                                                  (expand "reflex?")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "anti_reflex?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sine const-decl "real_abs_le1" angle_2D_trig nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (angle const-decl "nnreal_lt_2pi" angle_2D_trig nil)
    (nnreal_lt_2pi nonempty-type-eq-decl nil trig_types trig)
    (nnreal type-eq-decl nil real_types nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (pi const-decl "{x: real | x > 2 AND x < 4 AND cos(x / 2) = 0}"
     pi_def trig)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (cos const-decl "real" sincos_def trig)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_complement formula-decl nil angle_2D nil)
    (angle_0 formula-decl nil angle_2D_trig nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sign3 const-decl "Sign3" sign3 reals)
    (anti_reflex_complement formula-decl nil angle_2D nil)
    (reflex? const-decl "bool" angle_2D nil)
    (anti_reflex? const-decl "bool" angle_2D nil)
    (sign_sine_det formula-decl nil angle_2D_trig nil)
    (sine_is_sin formula-decl nil angle_2D_trig nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sin_ub formula-decl nil sincos trig)
    (zero_div formula-decl nil extra_tegies nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (area subtype
    "number_fields.*(sq.sq(circular_segment_2D_trig.R), ((number_fields.-)(pi_def.pi, number_fields./(((number_fields.-)(angle_2D_trig.angle(circular_segment_2D_trig.nalpha), angle_2D_trig.sine(circular_segment_2D_trig.nalpha))), 2))))"
    "posreal"))))

