parallelogram_2D : THEORY
BEGIN 

  IMPORTING angle_2D

  % Arbitrarly oriented parallalogram generated by the angle ACB. This parallelogram has
  % sides AC, CB, BD, and DA where  D = A+B-C, ACBD are not co-linear, AC || BD, and CB || DA
  Parallelogram_2D : DATATYPE
    BEGIN 
      mk_parallelogram(points:NonCollinearPoints) : parallelogram_2D? 
    END Parallelogram_2D

  % Computes the perimeter o a parallalogram
  perimeter(P:Parallelogram_2D) : posreal =
    LET (A,C,B) = points(P),
        ca = norm(A-C),
        cb = norm(B-C) IN 
      2*(ca+cb)

  % Computes the area of a parallelogram
  area(P:Parallelogram_2D) : posreal = 
    LET (A,C,B) = points(P),
        CA = A-C,
        CB = B-C IN 
      abs(det(CA,CB)) 

  IMPORTING structures@listn

  third_point(P:Parallelogram_2D) : Vect2 =
    LET (A,C,B) = points(P) IN
      A+B-C 

  % Return vertices in clockwise/counter-clockwise order
  vertices(P:Parallelogram_2D,clockwise:bool) : listn[Vect2](4) =
    LET (A,C,B) = points(P),
        CA = A-C,
        AB = B-A,
        D  = third_point(P) IN 
      IF clockwise = (det(CA,AB) < 0) THEN 
        (: C, A, D, B :)
      ELSE 
        (: C, B, D, A :)
      ENDIF

  % Vertices A,C,B,D of a parallegram satisfy
  % |AC| = |BD| and |CB| = |DA|
  % AC || BD and CB || DA
  % vertices are ordered according to clockwise
  vertices_of_parallelogram : LEMMA
    FORALL (P:Parallelogram_2D,clockwise:bool) : 
      LET (A,C,B) = points(P), 
          D = third_point(P),
          CA = A-C,
          AB = B-A,
          l = vertices(P,clockwise),
          P1 = nth(l,0),
          P2 = nth(l,1),
          P3 = nth(l,2),
          P4 = nth(l,3),
          P12 = P2-P1,
          P23 = P3-P2,
          P34 = P4-P3,
          P41 = P1-P4 IN
        P1 = C AND P3 = D AND
        IF clockwise = (det(CA,AB) < 0) THEN 
          P2 = A AND P4 = B 
        ELSE
          P2 = B AND P4 = A 
        ENDIF AND
        P12 = -P34 AND P23 = -P41 AND
        IF clockwise THEN 
          det(P12,P23) < 0 AND det(P23,P34) < 0 AND det(P34,P41) < 0 AND det(P41,P12) < 0
        ELSE 
          det(P12,P23) > 0 AND det(P23,P34) > 0 AND det(P34,P41) > 0 AND det(P41,P12) > 0
        ENDIF

  % Function returns true if point Q is inside parallegram P (including borders) 
  % CQ = a*CA + b*CB
  % d  = det(CA,CB),
  % a  = -det(CQ,CA)/d,
  % b  = det(CQ,CB)/d IN 
  % 0 <= a AND a <= 1 AND 0 <= b AND b <= 1
  point_in?(P:Parallelogram_2D)(Q:Vect2) : bool =
    LET (A,C,B) = points(P),
        CA = A-C, 
        CB = B-C, 
        CQ = Q-C,
        d  = det(CA,CB),
        ad = -det(CQ,CA),
        bd = det(CQ,CB) IN 
      IF d > 0 THEN 0 <= ad AND ad <= d  AND 0 <= bd AND bd <= d
      ELSE d <= ad AND ad <= 0 AND d <= bd AND bd <= 0
      ENDIF

  def_points_in_parallelogram : LEMMA
    FORALL (P:Parallelogram_2D) :
      LET (A,C,B) = points(P),
          D = third_point(P) IN
        point_in?(P)(A) AND
        point_in?(P)(B) AND
        point_in?(P)(C) AND
        point_in?(P)(D) 

  % Function returns true if point Q is inside parallegram P (excluding borders) 
  % CQ = a*CA + b*CB
  % d  = det(CA,CB),
  % a  = -det(CQ,CA)/d,
  % b  = det(CQ,CB)/d IN 
  % 0 < a AND a < 1 AND 0 < b AND b < 1
   point_strictly_in?(P:Parallelogram_2D)(Q:Vect2) : bool =
    LET (A,C,B) = points(P),
        CA = A-C, 
        CB = B-C, 
        CQ = Q-C,
        d  = det(CA,CB),
        ad = -det(CQ,CA),
        bd = det(CQ,CB) IN 
      IF d > 0 THEN 0 < ad AND ad < d  AND 0 < bd AND bd < d
      ELSE d < ad AND ad < 0 AND d < bd AND bd < 0
      ENDIF
    
  def_points_not_strictly_in_parallelogram : LEMMA
    FORALL (P:Parallelogram_2D) :
      LET (A,C,B) = points(P),
          D = third_point(P) IN
        point_in?(P)(A) AND
        point_in?(P)(B) AND
        point_in?(P)(C) AND
        point_in?(P)(D) 

  test_parallelogram_cw : Parallelogram_2D =
    LET C : Vect2 = (0,-2),
        A : Vect2 = (2,-4),
        B : Vect2 = (1,3) IN
      mk_parallelogram(A,C,B)

  test_area_cw : LEMMA
    area(test_parallelogram_cw) = 12

  test_vertices_cw: LEMMA
    vertices(test_parallelogram_cw,TRUE) = (: mk_vect2(0,-2), mk_vect2(1,3), mk_vect2(3,1),mk_vect2(2,-4) :) AND 
    vertices(test_parallelogram_cw,FALSE) = (: mk_vect2(0,-2), mk_vect2(2,-4), mk_vect2(3,1),mk_vect2(1,3) :)  
 
  test_Q_in_P_cw : LEMMA
    LET P  = test_parallelogram_cw,
        Q1 : Vect2 = (1,0),
        Q2 : Vect2 = (2,2),
        Q3 : Vect2 = (0,0) IN
      point_in?(P)(Q1) AND
      point_in?(P)(Q2) AND
      NOT point_in?(P)(Q3) AND
      NOT point_strictly_in?(P)(Q2)

  test_parallelogram_ccw : Parallelogram_2D =
    LET C : Vect2 = (-2,0),
        A : Vect2 = (-1,5),
        B : Vect2 = (0,-2) IN
      mk_parallelogram(A,C,B)

  test_area_ccw : LEMMA
      area(test_parallelogram_ccw) = 12

  test_vertices_ccw: LEMMA
    vertices(test_parallelogram_ccw,FALSE) = (: mk_vect2(-2,0), mk_vect2(0,-2), mk_vect2(1,3),mk_vect2(-1,5) :)  AND 
    vertices(test_parallelogram_ccw,TRUE) = (: mk_vect2(-2,0), mk_vect2(-1,5), mk_vect2(1,3),mk_vect2(0,-2) :) 

  test_Q_in_P_ccw : LEMMA
    LET P  = test_parallelogram_ccw,
        Q1 : Vect2 = (0,0),
        Q2 : Vect2 = (-1,-1),
        Q3 : Vect2 = (1,0) IN
      point_in?(P)(Q1) AND
      point_in?(P)(Q2) AND
      NOT point_in?(P)(Q3) AND
      NOT point_strictly_in?(P)(Q2)

END parallelogram_2D