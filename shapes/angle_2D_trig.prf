(angle_2D_trig
 (cosine_TCC1 0
  (cosine_TCC1-1 nil 3814538467
   ("" (skeep* :preds? t)
    (("" (replaces (-3 -4 -5) :dir rl)
      (("" (grind-reals)
        (("1" (rewrite "norm_eq_0")
          (("1" (rewrite "sub_eq_zero") nil nil)) nil)
         ("2" (rewrite "norm_eq_0")
          (("2" (rewrite "sub_eq_zero") nil nil)) nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (zero_ge_zero formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (cosine subtype
    "(number_fields.*(angle_2D_trig.a, angle_2D_trig.b))" "nznum")))
 (cosine_TCC2 0
  (cosine_TCC2-1 nil 3814538467
   ("" (skeep* :preds? t)
    (("" (replaces (-3 -4 -5) :dir rl)
      (("" (case "a*b > 0")
        (("1" (lemma "abs_le")
          (("1" (inst -1 "1" "(CA * CB) / (a * b)")
            (("1" (flatten)
              (("1" (hide -2)
                (("1" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (hide 4)
                    (("2" (rewrite "abs_div")
                      (("2" (field)
                        (("2" (replaces (-7 -8))
                          (("2" (lemma "abs_nnreal")
                            (("2" (inst-cp -1 "norm(CA)")
                              (("2"
                                (inst -1 "norm(CB)")
                                (("2"
                                  (replaces (-1 -2))
                                  (("2"
                                    (lemma "schwarz")
                                    (("2" (inst? -1) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 4)
          (("2" (grind-reals)
            (("1" (hide -2)
              (("1" (lemma "norm_eq_0")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (rewrite "sub_eq_zero") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (lemma "norm_eq_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Vect2 type-eq-decl nil vectors_2D_def vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (pos_times_gt formula-decl nil real_props nil)
    (abs_le formula-decl nil abs_lems reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (schwarz formula-decl nil vectors_2D vectors)
    (abs_nnreal formula-decl nil abs_lems reals)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fdx_7 skolem-const-decl
     "{n: nonneg_real | n >= (a * b) AND n >= -(a * b)}" angle_2D_trig
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "real" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (b skolem-const-decl "nnreal" angle_2D_trig nil)
    (a skolem-const-decl "nnreal" angle_2D_trig nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (cosine subtype
    "number_fields./((vectors_2D.*(angle_2D_trig.CA, angle_2D_trig.CB)), (number_fields.*(angle_2D_trig.a, angle_2D_trig.b)))"
    "real_abs_le1")))
 (sine_TCC1 0
  (sine_TCC1-1 nil 3814538467
   ("" (skeep* :preds? t)
    (("" (replaces (-3 -4 -5) :dir rl)
      (("" (case "a*b > 0")
        (("1" (lemma "abs_le")
          (("1" (inst -1 "1" "det(CA, CB) / (a * b)")
            (("1" (flatten)
              (("1" (hide -2)
                (("1" (split -1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (hide 4)
                    (("2" (rewrite "abs_div")
                      (("2" (field)
                        (("2" (replaces (-7 -8))
                          (("2" (lemma "abs_nnreal")
                            (("2" (inst-cp -1 "norm(CA)")
                              (("2"
                                (inst -1 "norm(CB)")
                                (("2"
                                  (replaces (-1 -2))
                                  (("2"
                                    (lemma "abs_det_le")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 4)
          (("2" (grind-reals)
            (("1" (hide -2)
              (("1" (lemma "norm_eq_0")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (rewrite "sub_eq_zero") nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -1)
              (("2" (lemma "norm_eq_0")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (pos_times_gt formula-decl nil real_props nil)
    (abs_le formula-decl nil abs_lems reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (abs_det_le formula-decl nil det_2D vectors)
    (abs_nnreal formula-decl nil abs_lems reals)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_times_pos_le1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fdx_8 skolem-const-decl
     "{n: nonneg_real | n >= (a * b) AND n >= -(a * b)}" angle_2D_trig
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (b skolem-const-decl "nnreal" angle_2D_trig nil)
    (a skolem-const-decl "nnreal" angle_2D_trig nil)
    (/= const-decl "boolean" notequal nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (sine subtype
    "number_fields./(det_2D.det(angle_2D_trig.CA, angle_2D_trig.CB), (number_fields.*(angle_2D_trig.a, angle_2D_trig.b)))"
    "real_abs_le1")))
 (sign_cosine_dot 0
  (sign_cosine_dot-1 nil 3814542889
   ("" (skeep)
    (("" (beta)
      (("" (expand "sign3")
        ((""
          (case-replace
           "(alpha`1 - alpha`2) * (alpha`3 - alpha`2) = 0 IFF cosine(alpha) = 0")
          (("1" (case-replace "cosine(alpha) = 0")
            (("1" (replace 1)
              (("1" (assert)
                (("1"
                  (case-replace
                   "cosine(alpha) > 0 IFF (alpha`1 - alpha`2) * (alpha`3 - alpha`2) > 0")
                  (("1" (hide 4)
                    (("1" (expand "cosine")
                      (("1" (grind-reals)
                        (("1" (hide-all-but (-1 1))
                          (("1" (lemma "norm_eq_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (rewrite "sub_eq_zero") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (lemma "norm_eq_0")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2" (rewrite "sub_eq_zero") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (* const-decl "real" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (> const-decl "bool" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sign3 const-decl "Sign3" sign3 reals))
   shostak))
 (sign_sine_det 0
  (sign_sine_det-1 nil 3814542891
   ("" (skeep)
    (("" (beta)
      (("" (expand "sign3")
        ((""
          (case-replace
           "det(alpha`1 - alpha`2, alpha`3 - alpha`2) = 0 IFF  sine(alpha) = 0")
          (("1" (case-replace "sine(alpha) = 0")
            (("1" (replace 1)
              (("1" (assert)
                (("1"
                  (case-replace
                   "det(alpha`1 - alpha`2, alpha`3 - alpha`2) > 0 IFF sine(alpha) > 0")
                  (("1" (hide 4)
                    (("1" (expand "sine")
                      (("1" (grind-reals)
                        (("1" (hide-all-but (-1 1))
                          (("1" (lemma "norm_eq_0")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1" (rewrite "sub_eq_zero") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide-all-but (-1 1))
                          (("2" (lemma "norm_eq_0")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2" (rewrite "sub_eq_zero") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (det const-decl "real" det_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (sine const-decl "real_abs_le1" angle_2D_trig nil)
    (> const-decl "bool" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (neg_times_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (pos_div_gt formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (div_cancel3 formula-decl nil real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sign3 const-decl "Sign3" sign3 reals))
   shostak))
 (cosine2_sine2_eq_1 0
  (cosine2_sine2_eq_1-1 nil 3814542894
   ("" (skeep :preds? t)
    (("" (expand "cosine")
      (("" (expand "sine")
        (("" (name-replace "A" "alpha`1")
          (("" (name-replace "C" "alpha`2")
            (("" (name-replace "B" "alpha`3")
              (("" (case "norm(A-C) /= 0")
                (("1" (case "norm(B-C) /= 0")
                  (("1" (rewrite "sq_div")
                    (("1" (rewrite "sq_div")
                      (("1" (hide -)
                        (("1" (rewrite "sq_times")
                          (("1" (rewrite "sq_norm")
                            (("1" (rewrite "sq_norm")
                              (("1"
                                (field 3)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 4) (("2" (grind-reals) nil nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-1 -2 1))
                      (("2" (grind-reals) nil nil)) nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide (1 4))
                      (("2" (rewrite "norm_eq_0")
                        (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide 3)
                    (("2" (rewrite "norm_eq_0")
                      (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (det const-decl "real" det_2D vectors)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sq_times formula-decl nil sq reals)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (sq const-decl "nonneg_real" sq reals)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sq_norm formula-decl nil vectors_2D vectors)
    (nonzero_times3 formula-decl nil real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (sq_div formula-decl nil sq reals)
    (* const-decl "real" vectors_2D vectors)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (number nonempty-type-decl nil numbers nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (sine const-decl "real_abs_le1" angle_2D_trig nil))
   shostak))
 (angle_TCC1 0
  (angle_TCC1-1 nil 3814538467
   ("" (skeep* :preds? t)
    (("" (replaces (-4 -5 -6) :dir rl)
      (("" (grind-reals)
        (("1" (lemma "norm_eq_0")
          (("1" (inst?)
            (("1" (assert) (("1" (rewrite "sub_eq_zero") nil nil))
              nil))
            nil))
          nil)
         ("2" (lemma "norm_eq_0")
          (("2" (inst?)
            (("2" (assert) (("2" (rewrite "sub_eq_zero") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_eq_0 formula-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (zero_ge_zero formula-decl nil real_props nil)
    (zero_times3 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (angle subtype "angle_2D_trig.ab" "nznum")))
 (angle_TCC2 0
  (angle_TCC2-1 nil 3814538467
   ("" (skeep* :preds? t)
    (("" (replaces (-4 -5 -6) :dir rl)
      (("" (field -9)
        (("" (field -10)
          (("" (lemma "det_dot_0")
            (("" (inst?)
              (("1" (assert) nil nil)
               ("2" (flatten)
                (("2" (replaces -8)
                  (("2" (rewrite "sub_eq_zero") nil nil)) nil))
                nil)
               ("3" (flatten)
                (("3" (replaces -7)
                  (("3" (rewrite "sub_eq_zero") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((det const-decl "real" det_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (CA skolem-const-decl "Vector" angle_2D_trig nil)
    (zero const-decl "Vector" vectors_2D vectors)
    (CB skolem-const-decl "Vector" angle_2D_trig nil)
    (Nz_vect2 type-eq-decl nil vectors_2D vectors)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (det_dot_0 formula-decl nil det_2D vectors)
    (zero_times1 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (angle subtype
    "number_fields./(det_2D.det(angle_2D_trig.CA, angle_2D_trig.CB), angle_2D_trig.ab)"
    "{z: reals.real | booleans.=>(number_fields./((vectors_2D.*(angle_2D_trig.CA, angle_2D_trig.CB)), angle_2D_trig.ab) = 0, z /= 0)}")))
 (sine_cosine_neq_0 0
  (sine_cosine_neq_0-1 nil 3814542898
   ("" (skeep)
    (("" (lemma "cosine2_sine2_eq_1")
      (("" (inst?)
        (("" (replaces (-2 -3)) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cosine2_sine2_eq_1 formula-decl nil angle_2D_trig nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_0 formula-decl nil sq reals)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (angle_atan2_TCC1 0
  (angle_atan2_TCC1-1 nil 3814538467
   ("" (skeep)
    (("" (lemma "sine_cosine_neq_0")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((sine_cosine_neq_0 formula-decl nil angle_2D_trig nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (angle_atan2 subtype "angle_2D_trig.sine(angle_2D_trig.alpha)"
    "{z: reals.real | booleans.=>(angle_2D_trig.cosine(angle_2D_trig.alpha) = 0, z /= 0)}")))
 (angle_atan2 0
  (angle_atan2-1 nil 3814542899
   ("" (skeep) (("" (expand* "angle" "cosine" "sine") nil nil)) nil)
   ((angle const-decl "nnreal_lt_2pi" angle_2D_trig nil)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (sine const-decl "real_abs_le1" angle_2D_trig nil))
   shostak))
 (cosine_is_cos 0
  (cosine_is_cos-1 nil 3814542901
   ("" (skeep)
    (("" (rewrite "angle_atan2")
      (("" (lemma "cos_atan2")
        (("" (inst?)
          (("" (lemma "sine_cosine_neq_0")
            (("" (inst?)
              (("" (split -2)
                (("1" (lift-if)
                  (("1" (split -1)
                    (("1" (flatten) (("1" (assert) nil nil)) nil)
                     ("2" (flatten)
                      (("2" (hide -2)
                        (("2" (beta)
                          (("2" (lift-if)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (field 1)
                                      (("1"
                                        (both-sides-f 1 "sq")
                                        (("1"
                                          (sq-simp)
                                          (("1"
                                            (case-replace
                                             "sq(cosine(alpha)) * (sq(sine(alpha)) / sq(cosine(alpha))) = sq(sine(alpha))")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite
                                                 "cosine2_sine2_eq_1")
                                                nil
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sq_eq")
                                          (("2"
                                            (hide-all-but (-2 1))
                                            (("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (field 3)
                                    (("2"
                                      (neg-formula 3)
                                      (("2"
                                        (both-sides-f 3 "sq")
                                        (("1"
                                          (sq-simp)
                                          (("1"
                                            (case-replace
                                             "sq(cosine(alpha)) * (sq(sine(alpha)) / sq(cosine(alpha))) = sq(sine(alpha))")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (rewrite
                                                 "cosine2_sine2_eq_1")
                                                nil
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "sq_eq")
                                          (("2"
                                            (neg-formula 1)
                                            (("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((angle_atan2 formula-decl nil angle_2D_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (sine const-decl "real_abs_le1" angle_2D_trig nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sq_eq formula-decl nil sq reals)
    (pos_times_ge formula-decl nil real_props nil)
    (sq_div formula-decl nil sq reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_times formula-decl nil sq reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (sq_1 formula-decl nil sq reals)
    (cosine2_sine2_eq_1 formula-decl nil angle_2D_trig nil)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (TRUE const-decl "bool" booleans nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (neg_times_ge formula-decl nil real_props nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (both_sides_times_neg_ge1 formula-decl nil real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (sq_neg formula-decl nil sq reals)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cos_range application-judgement "real_abs_le1" sincos trig)
    (sine_cosine_neq_0 formula-decl nil angle_2D_trig nil)
    (cos_atan2 formula-decl nil atan2 trig))
   shostak))
 (sine_is_sin 0
  (sine_is_sin-1 nil 3814542905
   ("" (skeep)
    (("" (rewrite "angle_atan2")
      (("" (lemma "sin_atan2")
        (("" (inst?)
          (("" (lemma "sine_cosine_neq_0")
            (("" (inst?)
              (("" (split -2)
                (("1" (lemma "cosine2_sine2_eq_1")
                  (("1" (inst?)
                    (("1" (case-replace "cosine(alpha) = 0")
                      (("1" (assert)
                        (("1" (replaces -3)
                          (("1" (lemma "sq_eq_abs")
                            (("1" (inst -1 "sine(alpha)" "1")
                              (("1"
                                (assert)
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (expand "abs")
                                    (("1"
                                      (lift-if)
                                      (("1" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (replace 1)
                        (("2" (beta)
                          (("2" (lift-if)
                            (("2" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide 1)
                                  (("1"
                                    (replaces -2)
                                    (("1"
                                      (cross-mult)
                                      (("1"
                                        (cancel-by 1 "sine(alpha)")
                                        (("1"
                                          (both-sides-f 2 "sq")
                                          (("1"
                                            (sq-simp)
                                            (("1"
                                              (case-replace
                                               "sq(cosine(alpha)) * (sq(sine(alpha)) / sq(cosine(alpha))) = sq(sine(alpha))")
                                              (("1"
                                                (hide-all-but (1 3))
                                                (("1"
                                                  (grind-reals)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite "sq_eq")
                                            (("2"
                                              (grind-reals)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (replaces -1)
                                  (("2"
                                    (neg-formula 3)
                                    (("2"
                                      (cross-mult 3)
                                      (("2"
                                        (cancel-by 3 "sine(alpha)")
                                        (("2"
                                          (both-sides-f 4 "sq")
                                          (("1" (sq-simp) nil nil)
                                           ("2"
                                            (rewrite "sq_eq")
                                            (("2"
                                              (neg-formula 1)
                                              (("2"
                                                (grind-reals)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((angle_atan2 formula-decl nil angle_2D_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (sine const-decl "real_abs_le1" angle_2D_trig nil)
    (cosine2_sine2_eq_1 formula-decl nil angle_2D_trig nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TRUE const-decl "bool" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sq_1 formula-decl nil sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nzrat_abs_is_pos application-judgement "{r: posrat | r >= q}"
     real_defs nil)
    (sq_eq_abs formula-decl nil sq reals)
    (sq_0 formula-decl nil sq reals)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sin_range application-judgement "real_abs_le1" sincos trig)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel4 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt const-decl "{nnz: nnreal | nnz * nnz = nnx}" sqrt reals)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sq const-decl "nonneg_real" sq reals)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (sqrt_pos application-judgement "posreal" sqrt reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_cancel3 formula-decl nil real_props nil)
    (times_div1 formula-decl nil real_props nil)
    (sq_sqrt formula-decl nil sqrt reals)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq_times formula-decl nil sq reals)
    (sq_div formula-decl nil sq reals)
    (pos_times_ge formula-decl nil real_props nil)
    (sq_eq formula-decl nil sq reals)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_5 skolem-const-decl "real_abs_le1" angle_2D_trig nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (sq_neg formula-decl nil sq reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (both_sides_times_neg_ge1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (< const-decl "bool" reals nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (neg_times_ge formula-decl nil real_props nil)
    (neg_one_times formula-decl nil extra_tegies nil)
    (div_6 skolem-const-decl "real_abs_le1" angle_2D_trig nil)
    (mult_neg formula-decl nil extra_tegies nil)
    (neg_neg formula-decl nil extra_tegies nil)
    (sine_cosine_neq_0 formula-decl nil angle_2D_trig nil)
    (sin_atan2 formula-decl nil atan2 trig))
   shostak))
 (angle_0 0
  (angle_0-1 nil 3814542911
   ("" (skeep)
    (("" (rewrite "angle_atan2")
      (("" (lemma "sine_cosine_neq_0")
        (("" (inst?)
          (("" (rewrite "atan2_is_0")
            (("" (lemma "sign_cosine_dot")
              (("" (inst?)
                (("" (beta)
                  (("" (expand "sign3")
                    (("" (expand "zero?")
                      (("" (case-replace "cosine(alpha) = 0")
                        (("1" (assert)
                          (("1" (lift-if) (("1" (ground) nil nil))
                            nil))
                          nil)
                         ("2" (replace 1)
                          (("2" (case-replace "cosine(alpha) > 0")
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1"
                                  (ground)
                                  (("1" (grind) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lift-if)
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((angle_atan2 formula-decl nil angle_2D_trig nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (Angle_2D type-eq-decl nil angle_2D nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (nil application-judgement "nnreal_lt_2pi" atan2 trig)
    (sign_cosine_dot formula-decl nil angle_2D_trig nil)
    (zero? const-decl "bool" angle_2D nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm const-decl "nnreal" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (> const-decl "bool" reals nil)
    (sign3 const-decl "Sign3" sign3 reals)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sine const-decl "real_abs_le1" angle_2D_trig nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cosine const-decl "real_abs_le1" angle_2D_trig nil)
    (real_abs_le1 nonempty-type-eq-decl nil trig_types trig)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (atan2_is_0 formula-decl nil atan2_props trig)
    (sine_cosine_neq_0 formula-decl nil angle_2D_trig nil))
   shostak)))

