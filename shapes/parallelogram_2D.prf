(parallelogram_2D
 (perimeter_TCC1 0
  (perimeter_TCC1-1 nil 3814550591
   ("" (skeep*)
    (("" (typepred "points(P)")
      (("" (lemma "non_collinear_different_points")
        (("" (expand "non_collinear?")
          (("" (inst? -1)
            (("" (assert)
              (("" (flatten)
                (("" (replaces (-1 -2 -3) :dir rl)
                  (("" (case "ca > 0")
                    (("1" (assert) nil nil)
                     ("2" (replaces -1)
                      (("2" (lemma "norm_eq_0")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (rewrite "sub_eq_zero") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((points adt-accessor-decl
     "[Parallelogram_2D -> NonCollinearPoints]" parallelogram_2D nil)
    (NonCollinearPoints type-eq-decl nil angle_2D nil)
    (Parallelogram_2D type-decl nil parallelogram_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "Vector" vectors_2D vectors)
    (Vector type-eq-decl nil vectors_2D vectors)
    (sub_eq_zero formula-decl nil vectors_2D vectors)
    (norm_eq_0 formula-decl nil vectors_2D vectors)
    (nnreal type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (non_collinear_different_points formula-decl nil angle_2D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (perimeter subtype
    "number_fields.*(2, ((number_fields.+)(parallelogram_2D.ca, parallelogram_2D.cb)))"
    "posreal")))
 (area_TCC1 0
  (area_TCC1-1 nil 3814550591
   ("" (skeep*)
    (("" (typepred "points(P)") (("" (grind) nil nil)) nil)) nil)
   ((points adt-accessor-decl
     "[Parallelogram_2D -> NonCollinearPoints]" parallelogram_2D nil)
    (NonCollinearPoints type-eq-decl nil angle_2D nil)
    (Parallelogram_2D type-decl nil parallelogram_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (area subtype
    "real_defs.abs(det_2D.det(parallelogram_2D.CA, parallelogram_2D.CB))"
    "posreal")))
 (vertices_TCC1 0
  (vertices_TCC1-1 nil 3814550591 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (length def-decl "nat" list_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices subtype
    "(: parallelogram_2D.C, parallelogram_2D.A, parallelogram_2D.D, parallelogram_2D.B :)"
    "listn[Vect2].listn(4)")))
 (vertices_TCC2 0
  (vertices_TCC2-1 nil 3814550591 ("" (grind) nil nil)
   ((- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (length def-decl "nat" list_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices subtype
    "(: parallelogram_2D.C, parallelogram_2D.B, parallelogram_2D.D, parallelogram_2D.A :)"
    "listn[Vect2].listn(4)")))
 (vertices_of_parallelogram_TCC1 0
  (vertices_of_parallelogram_TCC1-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices_of_parallelogram subtype "0" "below[length[Vect2](l)]")))
 (vertices_of_parallelogram_TCC2 0
  (vertices_of_parallelogram_TCC2-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices_of_parallelogram subtype "1" "below[length[Vect2](l)]")))
 (vertices_of_parallelogram_TCC3 0
  (vertices_of_parallelogram_TCC3-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices_of_parallelogram subtype "2" "below[length[Vect2](l)]")))
 (vertices_of_parallelogram_TCC4 0
  (vertices_of_parallelogram_TCC4-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (vertices_of_parallelogram subtype "3" "below[length[Vect2](l)]")))
 (vertices_of_parallelogram 0
  (vertices_of_parallelogram-1 nil 3814550632
   ("" (skeep) (("" (typepred "points(P)") (("" (grind) nil nil)) nil))
    nil)
   ((points adt-accessor-decl
     "[Parallelogram_2D -> NonCollinearPoints]" parallelogram_2D nil)
    (NonCollinearPoints type-eq-decl nil angle_2D nil)
    (Parallelogram_2D type-decl nil parallelogram_2D nil)
    (non_collinear? const-decl "bool" angle_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "Vector" vectors_2D vectors)
    (nth def-decl "T" list_props nil)
    (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil))
   shostak))
 (def_points_in_parallelogram 0
  (def_points_in_parallelogram-1 nil 3814550639 ("" (grind) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (point_in? const-decl "bool" parallelogram_2D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (def_points_not_strictly_in_parallelogram 0
  (def_points_not_strictly_in_parallelogram-1 nil 3814550640
   ("" (grind) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (point_in? const-decl "bool" parallelogram_2D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (test_parallelogram_cw_TCC1 0
  (test_parallelogram_cw_TCC1-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (test_parallelogram_cw subtype
    "(parallelogram_2D.A, parallelogram_2D.C, parallelogram_2D.B)"
    "NonCollinearPoints")))
 (test_area_cw 0
  (test_area_cw-1 nil 3814550641 ("" (grind) nil nil)
   ((test_parallelogram_cw const-decl "Parallelogram_2D"
     parallelogram_2D nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (area const-decl "posreal" parallelogram_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (test_vertices_cw 0
  (test_vertices_cw-1 nil 3814550641 ("" (grind) nil nil)
   ((minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (test_parallelogram_cw const-decl "Parallelogram_2D"
     parallelogram_2D nil))
   shostak))
 (test_Q_in_P_cw 0
  (test_Q_in_P_cw-1 nil 3814550642 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (test_parallelogram_cw const-decl "Parallelogram_2D"
     parallelogram_2D nil)
    (point_strictly_in? const-decl "bool" parallelogram_2D nil)
    (point_in? const-decl "bool" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors))
   shostak))
 (test_parallelogram_ccw_TCC1 0
  (test_parallelogram_ccw_TCC1-1 nil 3814550591
   ("" (subtype-tcc) nil nil)
   ((even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (nzint_times_nzint_is_nzint application-judgement "nzint" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (non_collinear? const-decl "bool" angle_2D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (test_parallelogram_ccw subtype
    "(parallelogram_2D.A, parallelogram_2D.C, parallelogram_2D.B)"
    "NonCollinearPoints")))
 (test_area_ccw 0
  (test_area_ccw-1 nil 3814550643 ("" (grind) nil nil)
   ((minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (area const-decl "posreal" parallelogram_2D nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors)
    (test_parallelogram_ccw const-decl "Parallelogram_2D"
     parallelogram_2D nil))
   shostak))
 (test_vertices_ccw 0
  (test_vertices_ccw-1 nil 3814550643 ("" (grind) nil nil)
   ((test_parallelogram_ccw const-decl "Parallelogram_2D"
     parallelogram_2D nil)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (third_point const-decl "Vect2" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (vertices const-decl "listn[Vect2](4)" parallelogram_2D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil))
   shostak))
 (test_Q_in_P_ccw 0
  (test_Q_in_P_ccw-1 nil 3814550644 ("" (grind) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (test_parallelogram_ccw const-decl "Parallelogram_2D"
     parallelogram_2D nil)
    (point_strictly_in? const-decl "bool" parallelogram_2D nil)
    (point_in? const-decl "bool" parallelogram_2D nil)
    (det const-decl "real" det_2D vectors)
    (- const-decl "Vector" vectors_2D vectors))
   shostak)))

