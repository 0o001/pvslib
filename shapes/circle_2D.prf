(circle_2D
 (mk_circle_TCC1 0
  (mk_circle_TCC1-1 nil 3814554658 ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)) nil
   (mk_circle subtype "(circle_2D.A, circle_2D.C, circle_2D.A)"
    "Arc")))
 (mk_circle_TCC2 0
  (mk_circle_TCC2-1 nil 3814554658 ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)) nil
   (mk_circle subtype
    "circular_segment_2D.mk_circular_segment(circle_2D.A, circle_2D.C, circle_2D.A)"
    "Circle_2D")))
 (point_in_circle 0
  (point_in_circle-1 nil 3825500033
   ("" (skeep)
    (("" (expand "mk_circle")
      (("" (expand "point_in_circle?")
        ((""
          (case-replace
           "C + (# x := R, y := 0 #) - C = (# x := R, y := 0 #)")
          (("1" (hide -1)
            (("1" (name-replace "D" "Q-C") (("1" (grind) nil nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Vector type-eq-decl nil vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals))
   shostak))
 (point_in_circle_eq 0
  (point_in_circle_eq-1 nil 3823364415
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (typepred "CC") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((CircularSegment_2D type-decl nil circular_segment_2D nil)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors))
   shostak))
 (point_strictly_in_circle 0
  (point_strictly_in_circle-1 nil 3825500302
   ("" (skeep)
    (("" (expand "mk_circle")
      (("" (expand "point_strictly_in_circle?")
        ((""
          (case-replace
           "C + (# x := R, y := 0 #) - C = (# x := R, y := 0 #)")
          (("1" (hide -1)
            (("1" (name-replace "D" "Q-C") (("1" (grind) nil nil))
              nil))
            nil)
           ("2" (hide 2) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((mk_circle const-decl "Circle_2D" circle_2D nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil vectors_2D vectors)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "Vector" vectors_2D vectors)
    (+ const-decl "Vector" vectors_2D vectors)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (sq const-decl "nonneg_real" sq reals)
    (sq_nz_pos application-judgement "posreal" sq reals)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (point_strictly_in_circle? const-decl "bool" circle_2D nil))
   nil))
 (point_strictly_in_circle_eq 0
  (point_strictly_in_circle_eq-1 nil 3823369505
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (typepred "CC") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((CircularSegment_2D type-decl nil circular_segment_2D nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors))
   shostak)))

