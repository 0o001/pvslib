(circle_2D
 (mk_circle_TCC1 0
  (mk_circle_TCC1-1 nil 3814554658 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "Vector" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil))
   nil
   (mk_circle subtype "(circle_2D.A, circle_2D.C, circle_2D.A)"
    "Arc")))
 (mk_circle_TCC2 0
  (mk_circle_TCC2-1 nil 3814554658 ("" (subtype-tcc) nil nil)
   ((+ const-decl "Vector" vectors_2D vectors)
    (circle_2D? const-decl "bool" circle_2D nil))
   nil
   (mk_circle subtype
    "circular_segment_2D.mk_circular_segment(circle_2D.A, circle_2D.C, circle_2D.A)"
    "Circle_2D")))
 (point_in_circle_eq 0
  (point_in_circle_eq-1 nil 3823364415
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (typepred "CC") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((CircularSegment_2D type-decl nil circular_segment_2D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (point_in? const-decl "bool" circular_segment_2D nil)
    (circle_2D? const-decl "bool" circle_2D nil)
    (Circle_2D type-eq-decl nil circle_2D nil)
    (point_in_circle? const-decl "bool" circle_2D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    nil (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (point_strictly_in_circle_eq 0
  (point_strictly_in_circle_eq-1 nil 3823369505
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten) (("1" (grind) nil nil)) nil)
           ("2" (flatten)
            (("2" (typepred "CC") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((CircularSegment_2D type-decl nil circular_segment_2D nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (point_strictly_in? const-decl "bool" circular_segment_2D nil)
    (circle_2D? const-decl "bool" circle_2D nil)
    (Circle_2D type-eq-decl nil circle_2D nil)
    (point_strictly_in_circle? const-decl "bool" circle_2D nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Vect2 type-eq-decl nil vectors_2D_def vectors)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "Vector" vectors_2D vectors)
    (det const-decl "real" det_2D vectors)
    (* const-decl "real" vectors_2D vectors)
    (sqv const-decl "nnreal" vectors_2D vectors)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak)))

