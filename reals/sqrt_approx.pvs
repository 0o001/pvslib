sqrt_approx : theory
begin
%-----------------------------------------------------------------------------
%
%  Includes sqrt_newton, sqrt_approx
%
%  This theory was originally developed by Michel Levy (LSR IMAG, France) after
%  Exercise Page 66 NÂ°8 of Reasoned Programming by Krysia Broda, 
%  Susan Eisenbach, Hessam Koshnevisan, and Steve Vickers, 1994. Prentice Hall.
%
%  It was modified and integrated to sqrt_approx in the NASA PVS Library 
%  by C. Munoz (NIA) on March 28 2005. The definition of sqrt_bisect was 
%  moved to interval_arith.
%
%  It was further modified in 2014/2015 by A. Dutle (NASA) for better 
%  approximations and the monotone properties of the presicion
%  parameter.   
% 
%-----------------------------------------------------------------------------

  IMPORTING sq,
            sqrt,
            log_int

  x,y, zz       : VAR nnreal  
  n,m           : VAR nat
  z,X,Y,YY      : VAR posreal
  eps,eps1,eps2 : VAR posreal 

  sq_sq_aux : lemma 
    sq((z+x/z)/2)-x = sq((sq(z)-x)/(2*z))

  sqrt_newton_step(X, (Y | X<=sq(Y))):
    {z | X <= sq(z)} =
    (Y+X/Y)/2

  sqrt_newton_step_increasing: LEMMA 
    FORALL  (x1,x2:posreal,(y1:posreal|x1<=sq(y1)),(y2:posreal|x2<=sq(y2))): 
    x1<=x2 AND y1<=y2  IMPLIES 
    sqrt_newton_step(x1, y1) <= sqrt_newton_step(x2, y2)

  sqrt_newton_interv((X| X>=1 AND X<=4), (Y | X<=sq(Y)),  n):
    RECURSIVE {z | X<=sq(z)} = 
    IF n=0 THEN Y
    ELSE 
      sqrt_newton_interv(X, sqrt_newton_step(X,Y), n-1)
    ENDIF
    MEASURE n 

  sqrt_newton_interv_increasing: LEMMA 
    FORALL (x1, x2 : {zz:posreal | zz>=1 AND zz<=4},
    (y1:posreal|x1<=sq(y1)),(y2:posreal|x2<=sq(y2)), n:nat):
    x1<=x2 AND y1<=y2 IMPLIES 
    sqrt_newton_interv(x1,y1,n)<= sqrt_newton_interv(x2,y2,n)

  sqrt_newton_interv_dec: LEMMA 
     FORALL ((X| X>=1 AND X<=4), (Y | X<=sq(Y)),  n):
      sqrt_newton_interv(X,Y,n+1)<= sqrt_newton_interv(X,Y,n)

  sqrt_newton_interv_dec2: LEMMA 
     FORALL ((X| X>=1 AND X<=4), (Y | X<=sq(Y)),  n,m): 
          m>=n IMPLIES 
      sqrt_newton_interv(X,Y,m)<= sqrt_newton_interv(X,Y,n)
   
  sqrt_int( M:int, X: {zz:posreal | zz>=1 AND zz<=4}, x:{xx:posreal | 4^M*X = xx}, n:nat):
    {z | sq(z)>=x AND z<=2^(M+1) AND z>=2^M} = 
    2^M*sqrt_newton_interv(X,2,n)

  sqrt_int_ub(x,n): {zz | x<=sq(zz)}= 
   IF x=0 THEN 0
   ELSE LET (M,Y) = log_int(x,4) IN
     sqrt_int(M,Y,x, 3+log_nat(max(1, 10/3*M+n),2)`1)
   ENDIF

  sqrt_int_ub_dec: LEMMA n<=m IMPLIES
    sqrt_int_ub(x,m)<=sqrt_int_ub(x,n)

  sqrt_ub(x,n): {zz | x<=sq(zz)} = 
    LET ub = sqrt_int_ub(x,n) IN
    IF sq(floor(ub))>=x THEN floor(ub)
    ELSE ub
    ENDIF

  sqrt_ub_increasing: LEMMA 
   x<=y IMPLIES sqrt_ub(x,n)<=sqrt_ub(y,n)

  sqrt_ub_dec: LEMMA n<=m IMPLIES 
     sqrt_ub(x,m)<=sqrt_ub(x,n)

  sqrt_newton_interv_lower((X| X>=1 AND X<=4), (Y | X>=sq(Y)),  n):
    {z | X>=sq(z)} =
     2/sqrt_newton_interv(4/X, 2/Y, n)

  sqrt_newton_interv_lower_increasing: LEMMA 
   FORALL (x1, x2 : {zz:posreal | zz>=1 AND zz<=4},
    (y1:posreal|x1>=sq(y1)),(y2:posreal|x2>=sq(y2)), n:nat):
    x1<=x2 AND y1<=y2 IMPLIES 
    sqrt_newton_interv_lower(x1,y1,n)<= sqrt_newton_interv_lower(x2,y2,n)

  sqrt_newton_interv_lower_inc: LEMMA 
    FORALL ((X| X>=1 AND X<=4), (Y | X>=sq(Y)),  n,m): 
          m>=n IMPLIES 
      sqrt_newton_interv_lower(X,Y,n)<= sqrt_newton_interv_lower(X,Y,m)

  sqrt_int_lower( M:int, X: {zz:posreal | zz>=1 AND zz<=4}, x:{xx:posreal | 4^M*X = xx}, n:nat):
    {z | sq(z)<=x AND z<=2^(M+1) AND z>=2^M} = 
    2^M*sqrt_newton_interv_lower(X,1,n)

  sqrt_int_lb(x,n): {zz | x>=sq(zz)}= 
   IF x=0 THEN 0
   ELSE LET (M,Y) = log_int(x,4) IN
     sqrt_int_lower(M,Y,x, 3+log_nat(max(1, 10/3*M+n),2)`1)
   ENDIF

  sqrt_int_lb_inc: LEMMA n<=m IMPLIES
    sqrt_int_lb(x,n)<=sqrt_int_lb(x,m)

  sqrt_lb(x,n): {zz | x>=sq(zz)} = 
    LET lb = sqrt_int_lb(x,n) IN
    IF sq(ceiling(lb))<=x THEN ceiling(lb)
    ELSE lb
    ENDIF

  sqrt_lb_increasing: LEMMA 
   x<=y IMPLIES sqrt_lb(x,n)<=sqrt_lb(y,n)

  sqrt_lb_inc: LEMMA n<=m IMPLIES 
     sqrt_lb(x,n)<=sqrt_lb(x,m)

  sqrt_bounds      : LEMMA
	sqrt_lb(x,n) <= sqrt(x) AND
        sqrt(x) <= sqrt_ub(x,n)

 end sqrt_approx
