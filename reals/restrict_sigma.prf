(restrict_sigma
 (low_TCC1 0
  (low_TCC1-1 nil 3821996130
   ("" (lemma "restrict_connected_domain") (("" (propax) nil nil)) nil)
   ((restrict_connected_domain formula-decl nil restrict_sigma nil))
   nil
   (low assuming "sigma[T].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (restrict_sigma_TCC1 0
  (restrict_sigma_TCC1-1 nil 3821996576 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_sigma nil)
    (T formal-subtype-decl nil restrict_sigma nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil))
   nil
   (restrict_sigma subtype "restrict_sigma.low"
    "T_low[subrange(low, high)]")))
 (restrict_sigma_TCC2 0
  (restrict_sigma_TCC2-1 nil 3821996576 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_sigma nil)
    (T formal-subtype-decl nil restrict_sigma nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil))
   nil
   (restrict_sigma subtype "restrict_sigma.high"
    "T_high[subrange(low, high)]")))
 (restrict_sigma_TCC3 0
  (restrict_sigma_TCC3-1 nil 3821996576
   ("" (lemma "restrict_connected_domain")
    (("" (skeep*)
      (("" (inst -1 "low" "high" "x") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (T_high type-eq-decl nil sigma nil)
    (high skolem-const-decl "T_high[T]" restrict_sigma nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-subtype-decl nil restrict_sigma nil)
    (<= const-decl "bool" reals nil) (T_low type-eq-decl nil sigma nil)
    (low skolem-const-decl "T_low[T]" restrict_sigma nil)
    (restrict_connected_domain formula-decl nil restrict_sigma nil))
   nil (restrict_sigma subtype "restrict_sigma.x" "T")))
 (restrict_sigma_TCC4 0
  (restrict_sigma_TCC4-1 nil 3821996576 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_sigma nil)
    (T formal-subtype-decl nil restrict_sigma nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil sigma nil)
    (T_low type-eq-decl nil sigma nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (restrict_sigma assuming
    "sigma[integers.subrange(restrict_sigma.low, restrict_sigma.high)].sigma"
    "connected_domain: ASSUMPTION (FORALL (x, y: sigma.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), sigma.T_pred(z)))")))
 (restrict_sigma 0
  (restrict_sigma-1 nil 3821997200
   ("" (skeep)
    ((""
      (case "FORALL (n:upto(high-low)): sigma[T](low,low+n, F) =
                                                 sigma[subrange(low,high)](low,low+n,restrict[T,subrange(low,high),real](F))")
      (("1" (inst -1 "high-low")
        (("1" (assert) nil nil)
         ("2" (hide 2) (("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (expand "sigma" 1)
              (("2" (expand "restrict") (("2" (propax) nil nil)) nil))
              nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil)
           ("4" (hide 2)
            (("4" (skeep)
              (("4" (lemma "restrict_connected_domain")
                (("4" (inst -1 "low" "high" "x")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (inst 2 "high") (("5" (assert) nil nil)) nil))
              nil))
            nil)
           ("6" (hide 2) (("6" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (subtype-tcc) nil nil)) nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (lemma "restrict_connected_domain")
            (("4" (inst -1 "low" "high" "x") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (inst 2 "high") (("5" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sigma def-decl "real" sigma nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (T_low type-eq-decl nil sigma nil)
    (T_high type-eq-decl nil sigma nil)
    (T formal-subtype-decl nil restrict_sigma nil)
    (T_pred const-decl "[int -> boolean]" restrict_sigma nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (low skolem-const-decl "T_low[T]" restrict_sigma nil)
    (high skolem-const-decl "T_high[T]" restrict_sigma nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pred type-eq-decl nil defined_types nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restrict_connected_domain formula-decl nil restrict_sigma nil))
   shostak)))

