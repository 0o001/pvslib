stirling: THEORY


BEGIN

IMPORTING binomial, sigma[nat], binomial_identities

m: VAR nat

%Stirling numbers of the 2nd kind 
S2_recur(m,n:nat): RECURSIVE nat = IF (n=0 AND m=0) THEN 1 ELSIF (n>m OR n=0) THEN 0 ELSE S2_recur(m-1, n-1) + n*S2_recur(m-1,n) ENDIF
MEASURE m

S2_recur_00: LEMMA S2_recur(0,0) = 1
S2_recur_0n: LEMMA FORALL (n:posnat): S2_recur(0,n) = 0
S2_recur_n0: LEMMA FORALL (n:posnat): S2_recur(n,0) = 0
S2_recur_n0_1: LEMMA S2_recur(m,0) = 1 IFF m=0
S2_recur_0n_1: LEMMA S2_recur(0,m) = 1 IFF m=0
S2_recur_nn: LEMMA FORALL (n:nat): S2_recur(n,n) = 1
S2_recur_n1: LEMMA FORALL (m:posnat): S2_recur(m,1) = 1
S2_recur_n2: LEMMA FORALL (m:{x:nat|x>=2}): S2_recur(m,2) = (2^m-2)/2
S2_recur_n2_alt: LEMMA FORALL (m:{x:nat|x>=2}): S2_recur(m,2) = 2^(m-1) - 1
S2_recur_n3: LEMMA FORALL (m:{x:nat|x>=3}): S2_recur(m,3) = (1/6) * (3^m -3*2^m+3)
S2_recur_n_nminus1: LEMMA FORALL (n:{x:nat|x>=2}): S2_recur(n,n-1) = C(n,2)

S2(m: nat,n:{i:nat|i<=m}): rat = (1/factorial(n)) * sigma(0,n, (LAMBDA (i:nat): IF i>n THEN 0 ELSE ((-1)^i * C(n,i)* (n-i)^m) ENDIF))

St2(m,n :nat): rat = IF n>m THEN 0 ELSE (1/factorial(n)) * sigma(0,n, (LAMBDA (i:nat): IF i>n THEN 0 ELSE ((-1)^i * C(n,i)* (n-i)^m) ENDIF)) ENDIF

S2_00: LEMMA S2(0,0) = 1
S2_n1: LEMMA FORALL (m:posnat): S2(m,1) = 1

St2_00: LEMMA St2(0,0) = 1
St2_n1: LEMMA FORALL (m:posnat): St2(m,1) = 1


%Signed stirling numbers of the 1st kind

SS1_recur(m,n:nat): RECURSIVE int = IF (n=0 AND m=0) THEN 1 ELSIF (n>m OR n=0) THEN 0 ELSE SS1_recur(m-1,n-1)-(m-1)*SS1_recur(m-1,n) ENDIF
MEASURE m

SS1_recur_00: LEMMA SS1_recur(0,0) = 1
SS1_recur_0n: LEMMA FORALL (n:posnat): SS1_recur(0,n) = 0
SS1_recur_nn: LEMMA FORALL (n:nat): SS1_recur(n,n) = 1
SS1_recur_n0: LEMMA FORALL (n:posnat): SS1_recur(n,0) = 0
SS1_recur_n0_1: LEMMA SS1_recur(m,0) = 1 IFF m=0
SS1_recur_0n_1: LEMMA SS1_recur(0,m) = 1 IFF m=0

%Unsigned Stirling numbers of the first kind

S1_recur(m,n:nat): RECURSIVE nat = IF (n=0 AND m=0) THEN 1 ELSIF (n>m OR n=0) THEN 0 ELSE S1_recur(m-1,n-1)+(m-1)*S1_recur(m-1,n) ENDIF
MEASURE m

S1_recur_00: LEMMA S1_recur(0,0)=1
S1_recur_0n: LEMMA FORALL (n:posnat): S1_recur(0,n) = 0
S1_recur_n0: LEMMA FORALL (n:posnat): S1_recur(n,0) = 0
S1_recur_n0_1: LEMMA S1_recur(m,0) = 1 IFF m=0
S1_recur_0n_1: LEMMA S1_recur(0,m) = 1 IFF m=0
S1_recur_nn: LEMMA FORALL (n:nat): S1_recur(n,n) = 1
S1_recur_n1: LEMMA FORALL (n:posnat): S1_recur(n,1) = factorial(n-1)
S1_recur_n_nminus1: LEMMA FORALL (n:{x:nat|x>=2}): S1_recur(n,n-1) = C(n,2)
S1_recur_n_nminus2: LEMMA FORALL (n:{x:nat|x>=3}): S1_recur(n,n-2) = (1/4)*(3*n-1)*C(n,3)
S1_recur_sum: LEMMA FORALL (m:nat): sigma(0,m, LAMBDA (k:nat): S1_recur(m,k)) = factorial(m)

%Bell numbers
Bell(n:nat): nat = sigma(0,n, LAMBDA (k:nat): S2_recur(n,k))

Bell_0: LEMMA Bell(0) = 1
Bell_1: LEMMA Bell(1) = 1
Bell_2: LEMMA Bell(2) = 2
Bell_3: LEMMA Bell(3) = 5
Bell_4: LEMMA Bell(4) = 15
Bell_5: LEMMA Bell(5) = 52

Bell_recur(n:nat): RECURSIVE nat = If n = 0 THEN 1 ELSE sigma(0, n-1, LAMBDA(k:nat): IF k>n-1 THEN 0 ELSE C(n-1, k) * Bell_recur(k) ENDIF) ENDIF
MEASURE n

Bell_recur_0: LEMMA Bell_recur(0) = 1
Bell_recur_1: LEMMA Bell_recur(1) = 1
Bell_recur_2: LEMMA Bell_recur(2) = 2
Bell_recur_3: LEMMA Bell_recur(3) = 5
Bell_recur_4: LEMMA Bell_recur(4) = 15
Bell_recur_5: LEMMA Bell_recur(5) = 52

%Bell_def: LEMMA FORALL (m:nat): Bell(m) = Bell_recur(m)
END stirling
