sqrt: THEORY
%------------------------------------------------------------------------
%
%  Square root of non-negative real
%
%  Supercedes older version: sqrt_ax
%
%  Authors:  Rick Butler             NASA
%            Cesar Munoz             NIA
%------------------------------------------------------------------------
BEGIN

  IMPORTING sq,sign,                      % sq(a): nonneg_real = a*a
            sqrt_exists

   nnx, nny, nnz: VAR nonneg_real
   a,x,y,z,xx: VAR real

  sqrt(nnx): {nnz : nnreal | nnz*nnz = nnx}

  sqrt_pos            : JUDGEMENT sqrt(px: posreal) HAS_TYPE posreal

% -------------------- Special Arguments --------------------

  sqrt_0              : LEMMA  sqrt(0) = 0
  sqrt_1              : LEMMA  sqrt(1) = 1
  sqrt_eq_0           : LEMMA  sqrt(nnx) = 0 IMPLIES nnx = 0
  sqrt_eq_1           : LEMMA  sqrt(nnx) = 1 IMPLIES nnx = 1

% -------------------- Basic Properties --------------------

  sqrt_lem            : LEMMA  sqrt(nny) = nnz IFF nnz * nnz = nny
                               
  sqrt_def            : LEMMA  sqrt(nnx) * sqrt(nnx) = nnx

  sqrt_square         : LEMMA  sqrt(nnx * nnx) = nnx

  sqrt_sq             : LEMMA  x >= 0 IMPLIES sqrt(sq(x)) = x

  sqrt_sq_neg         : LEMMA  x < 0 IMPLIES sqrt(sq(x)) = -x

  sqrt_sq_abs         : LEMMA  sqrt(sq(x)) = abs(x)

  sqrt_sq_sign        : LEMMA  sqrt(sq(x)) = sign(x)*x

  sq_sqrt             : LEMMA  x >= 0 IMPLIES sq(sqrt(x))=x

  sqrt_times          : LEMMA  sqrt(nny * nnz) = sqrt(nny) * sqrt(nnz)

  sqrt_div            : LEMMA  nnz /= 0 IMPLIES 
                                   sqrt(nny / nnz) = sqrt(nny) / sqrt(nnz)

  abs_sqrt            : LEMMA abs(sqrt(nnx)) = sqrt(nnx)

  sqrt_scal           : LEMMA abs(a)*sqrt(nnx) = sqrt(sq(a)*nnx)


% --------------------- Inequalities --------------------
                               
  sqrt_lt             : LEMMA  sqrt(nny) < sqrt(nnz) IFF nny < nnz 

  sqrt_le             : LEMMA  sqrt(nny) <= sqrt(nnz) IFF nny <= nnz 

  sqrt_gt             : LEMMA  sqrt(nny) > sqrt(nnz) IFF nny > nnz 

  sqrt_ge             : LEMMA  sqrt(nny) >= sqrt(nnz) IFF nny >= nnz 

  sqrt_eq             : LEMMA  sqrt(nny) = sqrt(nnz) IFF nny = nnz  

  sqrt_less           : LEMMA  nnx > 1 IMPLIES sqrt(nnx) < nnx

  sqrt_more           : LEMMA  nnx > 0 AND nnx < 1 IMPLIES sqrt(nnx) > nnx


  sqrt_lt_0           : LEMMA  nnx < 0 IFF sqrt(nnx) < 0

  sqrt_le_0           : LEMMA  nnx <= 0 IFF sqrt(nnx) <= 0

  sqrt_gt_0           : LEMMA  nnx > 0 IFF sqrt(nnx) > 0

  sqrt_ge_0           : LEMMA  nnx >= 0 IFF sqrt(nnx) >= 0


  sqrt_lt1            : LEMMA  nnx < 1 IFF sqrt(nnx) < 1

  sqrt_le1            : LEMMA  nnx <= 1 IFF sqrt(nnx) <= 1

  sqrt_gt1            : LEMMA  nnx > 1 IFF sqrt(nnx) > 1

  sqrt_ge1            : LEMMA  nnx >= 1 IFF sqrt(nnx) >= 1

  sqrt_plus_le        : LEMMA  sqrt(nnx+nny) <= sqrt(nnx) + sqrt(nny)

  sqrt_cauchy         : LEMMA FORALL (a,b,c,d: real):
                           a*c + b*d <= sqrt(sq(a)+sq(b)) *  sqrt(sq(c)+sq(d))

  sqrt_4              : LEMMA  sqrt(4) = 2
  sqrt_9              : LEMMA  sqrt(9) = 3 
  sqrt_16             : LEMMA  sqrt(16) = 4
  sqrt_25             : LEMMA  sqrt(25) = 5

  AUTO_REWRITE+   sqrt_4
  AUTO_REWRITE+   sqrt_9
  AUTO_REWRITE+   sqrt_16
  AUTO_REWRITE+   sqrt_25

  AUTO_REWRITE+ sqrt_0
  AUTO_REWRITE+ sqrt_1
  AUTO_REWRITE+ sqrt_square
  AUTO_REWRITE+ sqrt_sq
  AUTO_REWRITE+ sqrt_sq_neg
  AUTO_REWRITE+ sq_sqrt

  b,d   : VAR nnreal
  c,e : VAR real

  % An algebraic way to determine a*sqrt(b) = e
  eq(a,b,e) : bool = 
    a*e >= 0 AND sq(a)*b = sq(e)

  eq_correct_1 : LEMMA
    eq(a,b,e) IFF a*sqrt(b) = e

  eq_neg : LEMMA
    eq(-a,b,-e) = eq(a,b,e)

  % An algebraic way to determine a*sqrt(b) > e
  gt(a,b,e) : bool =
    IF a >= 0 THEN
      e < 0 OR sq(a)*b > sq(e)
    ELSE
      e < 0 AND sq(a)*b < sq(e) 
    ENDIF

  gt_correct_1 : LEMMA
    gt(a,b,e) IFF a*sqrt(b) > e

  % An algebraic way to determine a*sqrt(b) < e
  lt(a,b,e) : bool =
    gt(-a,b,-e)

  lt_correct_1 : LEMMA
    lt(a,b,e) IFF a*sqrt(b) < e

  % An algebraic way to determine a*sqrt(b) >= e
  ge(a,b,e) : bool =
    NOT lt(a,b,e)

  ge_correct_1 : LEMMA
    ge(a,b,e) IFF a*sqrt(b) >= e

  % An algebraic way to determine a*sqrt(b) <= e
  le(a,b,e) : bool =
    NOT gt(a,b,e)

  le_correct_1 : LEMMA
    le(a,b,e) IFF a*sqrt(b) <= e

  % An algebraic way to determine if a*sqrt(b) > c*sqrt(d)+e
  gt(a,b,c,d,e) : bool =
    IF a >= 0 THEN
      lt(c,d,-e) OR lt(2*e*c,d,sq(a)*b-sq(c)*d-sq(e))
    ELSE
      lt(c,d,-e) AND gt(2*e*c,d,sq(a)*b-sq(c)*d-sq(e))
    ENDIF

  gt_correct_2 : LEMMA
    gt(a,b,c,d,e) IFF a*sqrt(b) > c*sqrt(d)+e

  % An algebraic way to determine a*sqrt(b) < c*sqrt(d)+e
  lt(a,b,c,d,e) : bool =
    gt(-a,b,-c,d,-e)

  lt_correct_2 : LEMMA
    lt(a,b,c,d,e) IFF a*sqrt(b) < c*sqrt(d)+e

  % An algebraic way to determine a*sqrt(b) >= c*sqrt(d)+e
  ge(a,b,c,d,e) : bool =
    NOT lt(a,b,c,d,e)

  ge_correct_2 : LEMMA
    ge(a,b,c,d,e) IFF a*sqrt(b) >= c*sqrt(d)+e

  % An algebraic way to determine a*sqrt(b) <= c*sqrt(d)+e
  le(a,b,c,d,e) : bool =
    NOT gt(a,b,c,d,e)

  le_correct_2 : LEMMA
    le(a,b,c,d,e) IFF a*sqrt(b) <= c*sqrt(d)+e

END sqrt

