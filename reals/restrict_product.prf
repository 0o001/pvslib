(restrict_product
 (low_TCC1 0
  (low_TCC1-1 nil 3821996130
   ("" (lemma "restrict_connected_domain") (("" (propax) nil nil)) nil)
   ((restrict_connected_domain formula-decl nil restrict_product nil))
   nil
   (low assuming "product[T].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (restrict_product_TCC1 0
  (restrict_product_TCC1-1 nil 3822071577 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_product nil)
    (T formal-subtype-decl nil restrict_product nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil))
   nil
   (restrict_product subtype "restrict_product.low"
    "T_low[subrange(low, high)]")))
 (restrict_product_TCC2 0
  (restrict_product_TCC2-1 nil 3822071577 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_product nil)
    (T formal-subtype-decl nil restrict_product nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil))
   nil
   (restrict_product subtype "restrict_product.high"
    "T_high[subrange(low, high)]")))
 (restrict_product_TCC3 0
  (restrict_product_TCC3-1 nil 3822071577
   ("" (skeep*)
    (("" (lemma "restrict_connected_domain")
      (("" (inst -1 "low" "high" "i") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((restrict_connected_domain formula-decl nil restrict_product nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (T_high type-eq-decl nil product nil)
    (high skolem-const-decl "T_high[T]" restrict_product nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_product nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T formal-subtype-decl nil restrict_product nil)
    (<= const-decl "bool" reals nil)
    (T_low type-eq-decl nil product nil)
    (low skolem-const-decl "T_low[T]" restrict_product nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil (restrict_product subtype "restrict_product.i" "T")))
 (restrict_product_TCC4 0
  (restrict_product_TCC4-1 nil 3822071577 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (T_pred const-decl "[int -> boolean]" restrict_product nil)
    (T formal-subtype-decl nil restrict_product nil)
    (<= const-decl "bool" reals nil)
    (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (subrange type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (restrict_product assuming
    "product[integers.subrange(restrict_product.low, restrict_product.high)].product"
    "connected_domain: ASSUMPTION (FORALL (x, y: product.T), (z: integers.integer): booleans.IMPLIES(booleans.AND(reals.<=(x, z), reals.<=(z, y)), product.T_pred(z)))")))
 (restrict_product 0
  (restrict_product-1 nil 3822071659
   ("" (skeep)
    ((""
      (case "FORALL (n:upto(high-low)): product[T](low,low+n, F) = product[subrange(low,high)](low,low+n,restrict[T,subrange(low,high),real](F))")
      (("1" (inst -1 "high-low")
        (("1" (assert)
          (("1" (expand "restrict") (("1" (propax) nil nil)) nil)) nil)
         ("2" (hide 2) (("2" (assert) nil nil)) nil))
        nil)
       ("2" (hide 2)
        (("2" (induct "n")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (expand "product" 1)
              (("2" (expand "restrict")
                (("2" (replaces -2 :dir rl) nil nil)) nil))
              nil))
            nil)
           ("3" (hide 2) (("3" (grind) nil nil)) nil)
           ("4" (hide 2)
            (("4" (skeep)
              (("4" (lemma "restrict_connected_domain")
                (("4" (inst -1 "low" "high" "x")
                  (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep)
              (("5" (inst 2 "high") (("5" (assert) nil nil)) nil))
              nil))
            nil)
           ("6" (hide 2) (("6" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (hide 2) (("3" (subtype-tcc) nil nil)) nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (lemma "restrict_connected_domain")
            (("4" (inst -1 "low" "high" "x") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep)
          (("5" (inst 2 "high") (("5" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((restrict_connected_domain formula-decl nil restrict_product nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (upto_induction formula-decl nil bounded_nat_inductions nil)
    (pred type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (high skolem-const-decl "T_high[T]" restrict_product nil)
    (low skolem-const-decl "T_low[T]" restrict_product nil)
    (integer nonempty-type-from-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (T_pred const-decl "[int -> boolean]" restrict_product nil)
    (T formal-subtype-decl nil restrict_product nil)
    (T_high type-eq-decl nil product nil)
    (T_low type-eq-decl nil product nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (product def-decl "real" product nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (subrange type-eq-decl nil integers nil)
    (restrict const-decl "R" restrict nil))
   nil)))

